
stopwatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005504  08005504  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800550c  0800550c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08005584  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08005584  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001159a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002132  00000000  00000000  0003163a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  000345d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027186  00000000  00000000  00035368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011be1  00000000  00000000  0005c4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6ac1  00000000  00000000  0006e0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164b90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004080  00000000  00000000  00164be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005490 	.word	0x08005490

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005490 	.word	0x08005490

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <HAL_SYSTICK_Callback>:
/* USER CODE BEGIN 0 */

char uart_buf[30];
volatile int second_count, timer_count;

void HAL_SYSTICK_Callback(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	if((timer_count%1000) == 0){
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <HAL_SYSTICK_Callback+0x60>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_SYSTICK_Callback+0x64>)
 80005ce:	fb83 1302 	smull	r1, r3, r3, r2
 80005d2:	1199      	asrs	r1, r3, #6
 80005d4:	17d3      	asrs	r3, r2, #31
 80005d6:	1acb      	subs	r3, r1, r3
 80005d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005dc:	fb01 f303 	mul.w	r3, r1, r3
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d116      	bne.n	8000614 <HAL_SYSTICK_Callback+0x50>
		memset(uart_buf,0,30);
 80005e6:	221e      	movs	r2, #30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4810      	ldr	r0, [pc, #64]	; (800062c <HAL_SYSTICK_Callback+0x68>)
 80005ec:	f004 fada 	bl	8004ba4 <memset>
		sprintf(uart_buf, "%d,%d\r\n", second_count, timer_count);
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_SYSTICK_Callback+0x6c>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_SYSTICK_Callback+0x60>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	490e      	ldr	r1, [pc, #56]	; (8000634 <HAL_SYSTICK_Callback+0x70>)
 80005fa:	480c      	ldr	r0, [pc, #48]	; (800062c <HAL_SYSTICK_Callback+0x68>)
 80005fc:	f004 fada 	bl	8004bb4 <siprintf>
		HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 8000600:	221e      	movs	r2, #30
 8000602:	490a      	ldr	r1, [pc, #40]	; (800062c <HAL_SYSTICK_Callback+0x68>)
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <HAL_SYSTICK_Callback+0x74>)
 8000606:	f003 f9f1 	bl	80039ec <HAL_UART_Transmit_IT>

//		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
//		HAL_Delay(100) ;
//		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
//		HAL_Delay(100) ;
		second_count++;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <HAL_SYSTICK_Callback+0x6c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_SYSTICK_Callback+0x6c>)
 8000612:	6013      	str	r3, [r2, #0]
	}
	timer_count++;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <HAL_SYSTICK_Callback+0x60>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a02      	ldr	r2, [pc, #8]	; (8000624 <HAL_SYSTICK_Callback+0x60>)
 800061c:	6013      	str	r3, [r2, #0]
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200001a4 	.word	0x200001a4
 8000628:	10624dd3 	.word	0x10624dd3
 800062c:	20000180 	.word	0x20000180
 8000630:	200001a0 	.word	0x200001a0
 8000634:	080054a8 	.word	0x080054a8
 8000638:	200000f8 	.word	0x200000f8

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fb88 	bl	8000d56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f83d 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f979 	bl	8000940 <MX_GPIO_Init>
  MX_RTC_Init();
 800064e:	f000 f8a9 	bl	80007a4 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000652:	f000 f945 	bl	80008e0 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000656:	f000 f8cb 	bl	80007f0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800065a:	2100      	movs	r1, #0
 800065c:	4815      	ldr	r0, [pc, #84]	; (80006b4 <main+0x78>)
 800065e:	f002 f9cf 	bl	8002a00 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8000662:	2101      	movs	r1, #1
 8000664:	4814      	ldr	r0, [pc, #80]	; (80006b8 <main+0x7c>)
 8000666:	f000 ff66 	bl	8001536 <HAL_GPIO_TogglePin>
	  HAL_Delay(100) ;
 800066a:	2064      	movs	r0, #100	; 0x64
 800066c:	f000 fbd0 	bl	8000e10 <HAL_Delay>
	  HAL_GPIO_TogglePin(led1_GPIO_Port, led2_Pin);
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <main+0x7c>)
 8000674:	f000 ff5f 	bl	8001536 <HAL_GPIO_TogglePin>
	  HAL_Delay(100) ;
 8000678:	2064      	movs	r0, #100	; 0x64
 800067a:	f000 fbc9 	bl	8000e10 <HAL_Delay>
	  HAL_GPIO_TogglePin(led1_GPIO_Port, led3_Pin);
 800067e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000682:	480d      	ldr	r0, [pc, #52]	; (80006b8 <main+0x7c>)
 8000684:	f000 ff57 	bl	8001536 <HAL_GPIO_TogglePin>
	  HAL_Delay(100) ;
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f000 fbc1 	bl	8000e10 <HAL_Delay>

	  char Buffer[] ="hello";
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <main+0x80>)
 8000690:	463b      	mov	r3, r7
 8000692:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000696:	6018      	str	r0, [r3, #0]
 8000698:	3304      	adds	r3, #4
 800069a:	8019      	strh	r1, [r3, #0]

	  HAL_UART_Transmit(&huart3,Buffer,strlen(Buffer),10);
 800069c:	463b      	mov	r3, r7
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fdb6 	bl	8000210 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4639      	mov	r1, r7
 80006aa:	230a      	movs	r3, #10
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <main+0x84>)
 80006ae:	f003 f919 	bl	80038e4 <HAL_UART_Transmit>
  {
 80006b2:	e7d6      	b.n	8000662 <main+0x26>
 80006b4:	200000ac 	.word	0x200000ac
 80006b8:	40020400 	.word	0x40020400
 80006bc:	080054b0 	.word	0x080054b0
 80006c0:	200000f8 	.word	0x200000f8

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fa66 	bl	8004ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e8:	f000 ff40 	bl	800156c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006ec:	4b2b      	ldr	r3, [pc, #172]	; (800079c <SystemClock_Config+0xd8>)
 80006ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006f0:	4a2a      	ldr	r2, [pc, #168]	; (800079c <SystemClock_Config+0xd8>)
 80006f2:	f023 0318 	bic.w	r3, r3, #24
 80006f6:	6713      	str	r3, [r2, #112]	; 0x70

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <SystemClock_Config+0xd8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a27      	ldr	r2, [pc, #156]	; (800079c <SystemClock_Config+0xd8>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <SystemClock_Config+0xd8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <SystemClock_Config+0xdc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <SystemClock_Config+0xdc>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <SystemClock_Config+0xdc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000728:	2306      	movs	r3, #6
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2310      	movs	r3, #16
 8000736:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000740:	2308      	movs	r3, #8
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000744:	23b4      	movs	r3, #180	; 0xb4
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f000 ff19 	bl	800158c <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000760:	f000 f93a 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000770:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2105      	movs	r1, #5
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f9a6 	bl	8001ad4 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800078e:	f000 f923 	bl	80009d8 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	; 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_RTC_Init+0x44>)
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <MX_RTC_Init+0x48>)
 80007ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_RTC_Init+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_RTC_Init+0x44>)
 80007b6:	227f      	movs	r2, #127	; 0x7f
 80007b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_RTC_Init+0x44>)
 80007bc:	22ff      	movs	r2, #255	; 0xff
 80007be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_RTC_Init+0x44>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_RTC_Init+0x44>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_RTC_Init+0x44>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_RTC_Init+0x44>)
 80007d4:	f001 ff54 	bl	8002680 <HAL_RTC_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007de:	f000 f8fb 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	40002800 	.word	0x40002800

080007f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	; 0x38
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000822:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000824:	4a2d      	ldr	r2, [pc, #180]	; (80008dc <MX_TIM4_Init+0xec>)
 8000826:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000828:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <MX_TIM4_Init+0xe8>)
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000834:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_TIM4_Init+0xe8>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000848:	4823      	ldr	r0, [pc, #140]	; (80008d8 <MX_TIM4_Init+0xe8>)
 800084a:	f002 f821 	bl	8002890 <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000854:	f000 f8c0 	bl	80009d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800085e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000862:	4619      	mov	r1, r3
 8000864:	481c      	ldr	r0, [pc, #112]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000866:	f002 fad9 	bl	8002e1c <HAL_TIM_ConfigClockSource>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000870:	f000 f8b2 	bl	80009d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000874:	4818      	ldr	r0, [pc, #96]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000876:	f002 f862 	bl	800293e <HAL_TIM_PWM_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000880:	f000 f8aa 	bl	80009d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000894:	f002 ff4a 	bl	800372c <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800089e:	f000 f89b 	bl	80009d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a2:	2360      	movs	r3, #96	; 0x60
 80008a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3000;
 80008a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4807      	ldr	r0, [pc, #28]	; (80008d8 <MX_TIM4_Init+0xe8>)
 80008bc:	f002 f99a 	bl	8002bf4 <HAL_TIM_PWM_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80008c6:	f000 f887 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <MX_TIM4_Init+0xe8>)
 80008cc:	f000 f8fc 	bl	8000ac8 <HAL_TIM_MspPostInit>

}
 80008d0:	bf00      	nop
 80008d2:	3738      	adds	r7, #56	; 0x38
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000ac 	.word	0x200000ac
 80008dc:	40000800 	.word	0x40000800

080008e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_USART3_UART_Init+0x58>)
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <MX_USART3_UART_Init+0x5c>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_USART3_UART_Init+0x58>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_USART3_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART3_UART_Init+0x58>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART3_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART3_UART_Init+0x58>)
 8000924:	f002 ff90 	bl	8003848 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 f853 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000f8 	.word	0x200000f8
 800093c:	40004800 	.word	0x40004800

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <MX_GPIO_Init+0x90>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <MX_GPIO_Init+0x90>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_GPIO_Init+0x90>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_GPIO_Init+0x90>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <MX_GPIO_Init+0x90>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_GPIO_Init+0x90>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_GPIO_Init+0x90>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <MX_GPIO_Init+0x90>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x90>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led3_Pin|led2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <MX_GPIO_Init+0x94>)
 80009a6:	f000 fdad 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led1_Pin led3_Pin led2_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led3_Pin|led2_Pin;
 80009aa:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_GPIO_Init+0x94>)
 80009c4:	f000 fbf2 	bl	80011ac <HAL_GPIO_Init>

}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_MspInit+0x44>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_MspInit+0x44>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x44>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x44>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0a4      	sub	sp, #144	; 0x90
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2284      	movs	r2, #132	; 0x84
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 f8b1 	bl	8004ba4 <memset>
  if(hrtc->Instance==RTC)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_RTC_MspInit+0x54>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d114      	bne.n	8000a76 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a4c:	2320      	movs	r3, #32
 8000a4e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a54:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fa20 	bl	8001ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a66:	f7ff ffb7 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_RTC_MspInit+0x58>)
 8000a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <HAL_RTC_MspInit+0x58>)
 8000a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a74:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3790      	adds	r7, #144	; 0x90
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40002800 	.word	0x40002800
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_TIM_Base_MspInit+0x38>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d10b      	bne.n	8000ab2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40000800 	.word	0x40000800
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <HAL_TIM_MspPostInit+0x64>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d11c      	bne.n	8000b24 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_TIM_MspPostInit+0x68>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_TIM_MspPostInit+0x68>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_TIM_MspPostInit+0x68>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_TIM_MspPostInit+0x6c>)
 8000b20:	f000 fb44 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40000800 	.word	0x40000800
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020c00 	.word	0x40020c00

08000b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0aa      	sub	sp, #168	; 0xa8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	2284      	movs	r2, #132	; 0x84
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 f823 	bl	8004ba4 <memset>
  if(huart->Instance==USART3)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <HAL_UART_MspInit+0xc4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d144      	bne.n	8000bf2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 f992 	bl	8001ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b82:	f7ff ff29 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <HAL_UART_MspInit+0xc8>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a1d      	ldr	r2, [pc, #116]	; (8000c00 <HAL_UART_MspInit+0xc8>)
 8000b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <HAL_UART_MspInit+0xc8>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_UART_MspInit+0xc8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <HAL_UART_MspInit+0xc8>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_UART_MspInit+0xc8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <HAL_UART_MspInit+0xcc>)
 8000bde:	f000 fae5 	bl	80011ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2027      	movs	r0, #39	; 0x27
 8000be8:	f000 fa11 	bl	800100e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bec:	2027      	movs	r0, #39	; 0x27
 8000bee:	f000 fa2a 	bl	8001046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	37a8      	adds	r7, #168	; 0xa8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40004800 	.word	0x40004800
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020400 	.word	0x40020400

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f8bc 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000c58:	f000 fa0f 	bl	800107a <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <USART3_IRQHandler+0x10>)
 8000c66:	f002 ff1f 	bl	8003aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000f8 	.word	0x200000f8

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f003 ff54 	bl	8004b50 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20050000 	.word	0x20050000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	200001a8 	.word	0x200001a8
 8000cdc:	200001c0 	.word	0x200001c0

08000ce0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d20:	4c0b      	ldr	r4, [pc, #44]	; (8000d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2e:	f7ff ffd7 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f003 ff13 	bl	8004b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fc81 	bl	800063c <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d48:	08005514 	.word	0x08005514
  ldr r2, =_sbss
 8000d4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d50:	200001c0 	.word	0x200001c0

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>

08000d56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f000 f94c 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d60:	200f      	movs	r0, #15
 8000d62:	f000 f805 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d66:	f7ff fe3d 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f967 	bl	8001062 <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dac:	f000 f92f 	bl	800100e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	200001ac 	.word	0x200001ac

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200001ac 	.word	0x200001ac

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff ffee 	bl	8000df8 <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <__NVIC_SetPriorityGrouping+0x40>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x40>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00
 8000e9c:	05fa0000 	.word	0x05fa0000

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <__NVIC_EnableIRQ+0x38>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd8:	f7ff ff8e 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff29 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff3e 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff8e 	bl	8000f4c <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5d 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff31 	bl	8000ebc <__NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffa2 	bl	8000fb4 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800107e:	f7ff faa1 	bl	80005c4 <HAL_SYSTICK_Callback>
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff feb0 	bl	8000df8 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d008      	beq.n	80010b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e052      	b.n	800115e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0216 	bic.w	r2, r2, #22
 80010c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d103      	bne.n	80010e8 <HAL_DMA_Abort+0x62>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d007      	beq.n	80010f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0208 	bic.w	r2, r2, #8
 80010f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001108:	e013      	b.n	8001132 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800110a:	f7ff fe75 	bl	8000df8 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b05      	cmp	r3, #5
 8001116:	d90c      	bls.n	8001132 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2220      	movs	r2, #32
 800111c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e015      	b.n	800115e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e4      	bne.n	800110a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001144:	223f      	movs	r2, #63	; 0x3f
 8001146:	409a      	lsls	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d004      	beq.n	8001184 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e00c      	b.n	800119e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2205      	movs	r2, #5
 8001188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0201 	bic.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	e175      	b.n	80014b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011cc:	2201      	movs	r2, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f040 8164 	bne.w	80014b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d005      	beq.n	8001202 <HAL_GPIO_Init+0x56>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d130      	bne.n	8001264 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001238:	2201      	movs	r2, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f003 0201 	and.w	r2, r3, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b03      	cmp	r3, #3
 800126e:	d017      	beq.n	80012a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d123      	bne.n	80012f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	69b9      	ldr	r1, [r7, #24]
 80012f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80be 	beq.w	80014b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <HAL_GPIO_Init+0x324>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800134e:	4a61      	ldr	r2, [pc, #388]	; (80014d4 <HAL_GPIO_Init+0x328>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <HAL_GPIO_Init+0x32c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d037      	beq.n	80013ea <HAL_GPIO_Init+0x23e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a57      	ldr	r2, [pc, #348]	; (80014dc <HAL_GPIO_Init+0x330>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d031      	beq.n	80013e6 <HAL_GPIO_Init+0x23a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a56      	ldr	r2, [pc, #344]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d02b      	beq.n	80013e2 <HAL_GPIO_Init+0x236>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a55      	ldr	r2, [pc, #340]	; (80014e4 <HAL_GPIO_Init+0x338>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x232>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a54      	ldr	r2, [pc, #336]	; (80014e8 <HAL_GPIO_Init+0x33c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x22e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a53      	ldr	r2, [pc, #332]	; (80014ec <HAL_GPIO_Init+0x340>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x22a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <HAL_GPIO_Init+0x344>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x226>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a51      	ldr	r2, [pc, #324]	; (80014f4 <HAL_GPIO_Init+0x348>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x222>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a50      	ldr	r2, [pc, #320]	; (80014f8 <HAL_GPIO_Init+0x34c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x21e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4f      	ldr	r2, [pc, #316]	; (80014fc <HAL_GPIO_Init+0x350>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x21a>
 80013c2:	2309      	movs	r3, #9
 80013c4:	e012      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013c6:	230a      	movs	r3, #10
 80013c8:	e010      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013ca:	2308      	movs	r3, #8
 80013cc:	e00e      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e00c      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013d2:	2306      	movs	r3, #6
 80013d4:	e00a      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013d6:	2305      	movs	r3, #5
 80013d8:	e008      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013da:	2304      	movs	r3, #4
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013de:	2303      	movs	r3, #3
 80013e0:	e004      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013ea:	2300      	movs	r3, #0
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	f002 0203 	and.w	r2, r2, #3
 80013f2:	0092      	lsls	r2, r2, #2
 80013f4:	4093      	lsls	r3, r2
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013fc:	4935      	ldr	r1, [pc, #212]	; (80014d4 <HAL_GPIO_Init+0x328>)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140a:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <HAL_GPIO_Init+0x354>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142e:	4a34      	ldr	r2, [pc, #208]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001458:	4a29      	ldr	r2, [pc, #164]	; (8001500 <HAL_GPIO_Init+0x354>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001482:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_GPIO_Init+0x354>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <HAL_GPIO_Init+0x354>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	f67f ae86 	bls.w	80011cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40021400 	.word	0x40021400
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40021c00 	.word	0x40021c00
 80014f8:	40022000 	.word	0x40022000
 80014fc:	40022400 	.word	0x40022400
 8001500:	40013c00 	.word	0x40013c00

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001520:	e003      	b.n	800152a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001536:	b480      	push	{r7}
 8001538:	b085      	sub	sp, #20
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001548:	887a      	ldrh	r2, [r7, #2]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4013      	ands	r3, r2
 800154e:	041a      	lsls	r2, r3, #16
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43d9      	mvns	r1, r3
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	400b      	ands	r3, r1
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	619a      	str	r2, [r3, #24]
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40007000 	.word	0x40007000

0800158c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e291      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8087 	beq.w	80016be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b0:	4b96      	ldr	r3, [pc, #600]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d00c      	beq.n	80015d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015bc:	4b93      	ldr	r3, [pc, #588]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d112      	bne.n	80015ee <HAL_RCC_OscConfig+0x62>
 80015c8:	4b90      	ldr	r3, [pc, #576]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015d4:	d10b      	bne.n	80015ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d6:	4b8d      	ldr	r3, [pc, #564]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d06c      	beq.n	80016bc <HAL_RCC_OscConfig+0x130>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d168      	bne.n	80016bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e26b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x7a>
 80015f8:	4b84      	ldr	r3, [pc, #528]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a83      	ldr	r2, [pc, #524]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80015fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	e02e      	b.n	8001664 <HAL_RCC_OscConfig+0xd8>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x9c>
 800160e:	4b7f      	ldr	r3, [pc, #508]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7e      	ldr	r2, [pc, #504]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b7c      	ldr	r3, [pc, #496]	; (800180c <HAL_RCC_OscConfig+0x280>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a7b      	ldr	r2, [pc, #492]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0xd8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0xc0>
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a75      	ldr	r2, [pc, #468]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b73      	ldr	r3, [pc, #460]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a72      	ldr	r2, [pc, #456]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0xd8>
 800164c:	4b6f      	ldr	r3, [pc, #444]	; (800180c <HAL_RCC_OscConfig+0x280>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a6e      	ldr	r2, [pc, #440]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b6c      	ldr	r3, [pc, #432]	; (800180c <HAL_RCC_OscConfig+0x280>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a6b      	ldr	r2, [pc, #428]	; (800180c <HAL_RCC_OscConfig+0x280>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fbc4 	bl	8000df8 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fbc0 	bl	8000df8 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e21f      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xe8>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fbb0 	bl	8000df8 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fbac 	bl	8000df8 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e20b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b57      	ldr	r3, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x110>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d069      	beq.n	800179e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ca:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d6:	4b4d      	ldr	r3, [pc, #308]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d11c      	bne.n	800171c <HAL_RCC_OscConfig+0x190>
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d116      	bne.n	800171c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <HAL_RCC_OscConfig+0x17a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d001      	beq.n	8001706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e1df      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	493d      	ldr	r1, [pc, #244]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	e040      	b.n	800179e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d023      	beq.n	800176c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001724:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a38      	ldr	r2, [pc, #224]	; (800180c <HAL_RCC_OscConfig+0x280>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff fb62 	bl	8000df8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff fb5e 	bl	8000df8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1bd      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_RCC_OscConfig+0x280>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4929      	ldr	r1, [pc, #164]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
 800176a:	e018      	b.n	800179e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176c:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x280>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a26      	ldr	r2, [pc, #152]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fb3e 	bl	8000df8 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff fb3a 	bl	8000df8 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e199      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	4b1e      	ldr	r3, [pc, #120]	; (800180c <HAL_RCC_OscConfig+0x280>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d038      	beq.n	800181c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d019      	beq.n	80017e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80017b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017be:	f7ff fb1b 	bl	8000df8 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c6:	f7ff fb17 	bl	8000df8 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e176      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80017da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x23a>
 80017e4:	e01a      	b.n	800181c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80017e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_RCC_OscConfig+0x280>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7ff fb01 	bl	8000df8 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fa:	f7ff fafd 	bl	8000df8 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d903      	bls.n	8001810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e15c      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
 800180c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	4b91      	ldr	r3, [pc, #580]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ee      	bne.n	80017fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80a4 	beq.w	8001972 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182a:	4b8b      	ldr	r3, [pc, #556]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10d      	bne.n	8001852 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b88      	ldr	r3, [pc, #544]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a87      	ldr	r2, [pc, #540]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b85      	ldr	r3, [pc, #532]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184e:	2301      	movs	r3, #1
 8001850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001852:	4b82      	ldr	r3, [pc, #520]	; (8001a5c <HAL_RCC_OscConfig+0x4d0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d118      	bne.n	8001890 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800185e:	4b7f      	ldr	r3, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x4d0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a7e      	ldr	r2, [pc, #504]	; (8001a5c <HAL_RCC_OscConfig+0x4d0>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7ff fac5 	bl	8000df8 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001872:	f7ff fac1 	bl	8000df8 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	; 0x64
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e120      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001884:	4b75      	ldr	r3, [pc, #468]	; (8001a5c <HAL_RCC_OscConfig+0x4d0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x31a>
 8001898:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	4a6e      	ldr	r2, [pc, #440]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
 80018a4:	e02d      	b.n	8001902 <HAL_RCC_OscConfig+0x376>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x33c>
 80018ae:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a69      	ldr	r2, [pc, #420]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a66      	ldr	r2, [pc, #408]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
 80018c6:	e01c      	b.n	8001902 <HAL_RCC_OscConfig+0x376>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d10c      	bne.n	80018ea <HAL_RCC_OscConfig+0x35e>
 80018d0:	4b61      	ldr	r3, [pc, #388]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a60      	ldr	r2, [pc, #384]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
 80018dc:	4b5e      	ldr	r3, [pc, #376]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a5d      	ldr	r2, [pc, #372]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
 80018e8:	e00b      	b.n	8001902 <HAL_RCC_OscConfig+0x376>
 80018ea:	4b5b      	ldr	r3, [pc, #364]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	4a57      	ldr	r2, [pc, #348]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d015      	beq.n	8001936 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190a:	f7ff fa75 	bl	8000df8 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff fa71 	bl	8000df8 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0ce      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ee      	beq.n	8001912 <HAL_RCC_OscConfig+0x386>
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001936:	f7ff fa5f 	bl	8000df8 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7ff fa5b 	bl	8000df8 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0b8      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ee      	bne.n	800193e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d105      	bne.n	8001972 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001966:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a3b      	ldr	r2, [pc, #236]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 800196c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80a4 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197c:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d06b      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d149      	bne.n	8001a24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a30      	ldr	r2, [pc, #192]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fa2c 	bl	8000df8 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff fa28 	bl	8000df8 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e087      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b6:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69da      	ldr	r2, [r3, #28]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	019b      	lsls	r3, r3, #6
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	085b      	lsrs	r3, r3, #1
 80019da:	3b01      	subs	r3, #1
 80019dc:	041b      	lsls	r3, r3, #16
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	061b      	lsls	r3, r3, #24
 80019e6:	4313      	orrs	r3, r2
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80019ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80019f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff f9fc 	bl	8000df8 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff f9f8 	bl	8000df8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e057      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x478>
 8001a22:	e04f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f9e2 	bl	8000df8 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff f9de 	bl	8000df8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e03d      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x4ac>
 8001a56:	e035      	b.n	8001ac4 <HAL_RCC_OscConfig+0x538>
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_RCC_OscConfig+0x544>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d028      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d121      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d11a      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a90:	4013      	ands	r3, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d111      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0d0      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d910      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 020f 	bic.w	r2, r3, #15
 8001b02:	4965      	ldr	r1, [pc, #404]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	494d      	ldr	r1, [pc, #308]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d040      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e073      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06b      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bb6:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f023 0203 	bic.w	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4936      	ldr	r1, [pc, #216]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc8:	f7ff f916 	bl	8000df8 <HAL_GetTick>
 8001bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd0:	f7ff f912 	bl	8000df8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e053      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 020c 	and.w	r2, r3, #12
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d1eb      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d210      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 020f 	bic.w	r2, r3, #15
 8001c0e:	4922      	ldr	r1, [pc, #136]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4916      	ldr	r1, [pc, #88]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c66:	f000 f821 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490a      	ldr	r1, [pc, #40]	; (8001ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1d4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f872 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	080054b8 	.word	0x080054b8
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb0:	b090      	sub	sp, #64	; 0x40
 8001cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc4:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d00d      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x40>
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	f200 80a1 	bhi.w	8001e18 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cde:	e09b      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ce2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ce4:	e09b      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce6:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cea:	e098      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cec:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cf6:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d028      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d02:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	099b      	lsrs	r3, r3, #6
 8001d08:	2200      	movs	r2, #0
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d14:	2100      	movs	r1, #0
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d18:	fb03 f201 	mul.w	r2, r3, r1
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	fb00 f303 	mul.w	r3, r0, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	4a43      	ldr	r2, [pc, #268]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d26:	fba0 1202 	umull	r1, r2, r0, r2
 8001d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d2c:	460a      	mov	r2, r1
 8001d2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d32:	4413      	add	r3, r2
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	61fa      	str	r2, [r7, #28]
 8001d3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d46:	f7fe fabb 	bl	80002c0 <__aeabi_uldivmod>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4613      	mov	r3, r2
 8001d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d52:	e053      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	617a      	str	r2, [r7, #20]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d66:	f04f 0b00 	mov.w	fp, #0
 8001d6a:	4652      	mov	r2, sl
 8001d6c:	465b      	mov	r3, fp
 8001d6e:	f04f 0000 	mov.w	r0, #0
 8001d72:	f04f 0100 	mov.w	r1, #0
 8001d76:	0159      	lsls	r1, r3, #5
 8001d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d7c:	0150      	lsls	r0, r2, #5
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	ebb2 080a 	subs.w	r8, r2, sl
 8001d86:	eb63 090b 	sbc.w	r9, r3, fp
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d9e:	ebb2 0408 	subs.w	r4, r2, r8
 8001da2:	eb63 0509 	sbc.w	r5, r3, r9
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	00eb      	lsls	r3, r5, #3
 8001db0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001db4:	00e2      	lsls	r2, r4, #3
 8001db6:	4614      	mov	r4, r2
 8001db8:	461d      	mov	r5, r3
 8001dba:	eb14 030a 	adds.w	r3, r4, sl
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	eb45 030b 	adc.w	r3, r5, fp
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	028b      	lsls	r3, r1, #10
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ddc:	4621      	mov	r1, r4
 8001dde:	028a      	lsls	r2, r1, #10
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de6:	2200      	movs	r2, #0
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	60fa      	str	r2, [r7, #12]
 8001dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001df0:	f7fe fa66 	bl	80002c0 <__aeabi_uldivmod>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	3301      	adds	r3, #1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e16:	e002      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3740      	adds	r7, #64	; 0x40
 8001e24:	46bd      	mov	sp, r7
 8001e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	00f42400 	.word	0x00f42400
 8001e34:	017d7840 	.word	0x017d7840

08001e38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000000 	.word	0x20000000

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0a9b      	lsrs	r3, r3, #10
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4903      	ldr	r1, [pc, #12]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	080054c8 	.word	0x080054c8

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e7c:	f7ff ffdc 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0b5b      	lsrs	r3, r3, #13
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	080054c8 	.word	0x080054c8

08001ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d012      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ec8:	4b69      	ldr	r3, [pc, #420]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a68      	ldr	r2, [pc, #416]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ece:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ed2:	6093      	str	r3, [r2, #8]
 8001ed4:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	4964      	ldr	r1, [pc, #400]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d017      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001efa:	4b5d      	ldr	r3, [pc, #372]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	4959      	ldr	r1, [pc, #356]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f18:	d101      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d017      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f36:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	494a      	ldr	r1, [pc, #296]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f54:	d101      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 808b 	beq.w	800209a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	4a39      	ldr	r2, [pc, #228]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f9c:	4b35      	ldr	r3, [pc, #212]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a34      	ldr	r2, [pc, #208]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa8:	f7fe ff26 	bl	8000df8 <HAL_GetTick>
 8001fac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe ff22 	bl	8000df8 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e357      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fc2:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d035      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d02e      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fec:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800200e:	4a18      	ldr	r2, [pc, #96]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d114      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe feea 	bl	8000df8 <HAL_GetTick>
 8002024:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	e00a      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe fee6 	bl	8000df8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e319      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ee      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002056:	d111      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002066:	400b      	ands	r3, r1
 8002068:	4901      	ldr	r1, [pc, #4]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
 800206e:	e00b      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002070:	40023800 	.word	0x40023800
 8002074:	40007000 	.word	0x40007000
 8002078:	0ffffcff 	.word	0x0ffffcff
 800207c:	4baa      	ldr	r3, [pc, #680]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4aa9      	ldr	r2, [pc, #676]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002082:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002086:	6093      	str	r3, [r2, #8]
 8002088:	4ba7      	ldr	r3, [pc, #668]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800208a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	49a4      	ldr	r1, [pc, #656]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002096:	4313      	orrs	r3, r2
 8002098:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020a6:	4ba0      	ldr	r3, [pc, #640]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ac:	4a9e      	ldr	r2, [pc, #632]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020b6:	4b9c      	ldr	r3, [pc, #624]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	4999      	ldr	r1, [pc, #612]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d4:	4b94      	ldr	r3, [pc, #592]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e2:	4991      	ldr	r1, [pc, #580]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020f6:	4b8c      	ldr	r3, [pc, #560]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002104:	4988      	ldr	r1, [pc, #544]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002118:	4b83      	ldr	r3, [pc, #524]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002126:	4980      	ldr	r1, [pc, #512]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800213a:	4b7b      	ldr	r3, [pc, #492]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4977      	ldr	r1, [pc, #476]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800215c:	4b72      	ldr	r3, [pc, #456]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	496f      	ldr	r1, [pc, #444]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800217e:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	f023 020c 	bic.w	r2, r3, #12
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218c:	4966      	ldr	r1, [pc, #408]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021a0:	4b61      	ldr	r3, [pc, #388]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	495e      	ldr	r1, [pc, #376]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021c2:	4b59      	ldr	r3, [pc, #356]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d0:	4955      	ldr	r1, [pc, #340]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021e4:	4b50      	ldr	r3, [pc, #320]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	494d      	ldr	r1, [pc, #308]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002206:	4b48      	ldr	r3, [pc, #288]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4944      	ldr	r1, [pc, #272]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002228:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	493c      	ldr	r1, [pc, #240]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800224a:	4b37      	ldr	r3, [pc, #220]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002258:	4933      	ldr	r1, [pc, #204]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800226c:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800227a:	492b      	ldr	r1, [pc, #172]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d011      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800229c:	4922      	ldr	r1, [pc, #136]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ac:	d101      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022dc:	4912      	ldr	r1, [pc, #72]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00b      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002300:	4909      	ldr	r1, [pc, #36]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d006      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80d9 	beq.w	80024ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800231c:	4b02      	ldr	r3, [pc, #8]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a01      	ldr	r2, [pc, #4]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002322:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002326:	e001      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002328:	40023800 	.word	0x40023800
 800232c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232e:	f7fe fd63 	bl	8000df8 <HAL_GetTick>
 8002332:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002336:	f7fe fd5f 	bl	8000df8 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	; 0x64
 8002342:	d901      	bls.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e194      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002348:	4b6c      	ldr	r3, [pc, #432]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d021      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11d      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002368:	4b64      	ldr	r3, [pc, #400]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800236a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800236e:	0c1b      	lsrs	r3, r3, #16
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002376:	4b61      	ldr	r3, [pc, #388]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237c:	0e1b      	lsrs	r3, r3, #24
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	019a      	lsls	r2, r3, #6
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	431a      	orrs	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	061b      	lsls	r3, r3, #24
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	071b      	lsls	r3, r3, #28
 800239c:	4957      	ldr	r1, [pc, #348]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d02e      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ce:	d129      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023d0:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d6:	0c1b      	lsrs	r3, r3, #16
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e4:	0f1b      	lsrs	r3, r3, #28
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	019a      	lsls	r2, r3, #6
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	431a      	orrs	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	071b      	lsls	r3, r3, #28
 8002404:	493d      	ldr	r1, [pc, #244]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800240c:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800240e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002412:	f023 021f 	bic.w	r2, r3, #31
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	3b01      	subs	r3, #1
 800241c:	4937      	ldr	r1, [pc, #220]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01d      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002430:	4b32      	ldr	r3, [pc, #200]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002436:	0e1b      	lsrs	r3, r3, #24
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800243e:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002444:	0f1b      	lsrs	r3, r3, #28
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	019a      	lsls	r2, r3, #6
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	431a      	orrs	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	431a      	orrs	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	071b      	lsls	r3, r3, #28
 8002464:	4925      	ldr	r1, [pc, #148]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d011      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	019a      	lsls	r2, r3, #6
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	041b      	lsls	r3, r3, #16
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	061b      	lsls	r3, r3, #24
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	071b      	lsls	r3, r3, #28
 8002494:	4919      	ldr	r1, [pc, #100]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a8:	f7fe fca6 	bl	8000df8 <HAL_GetTick>
 80024ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024b0:	f7fe fca2 	bl	8000df8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0d7      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	f040 80cd 	bne.w	8002670 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e2:	f7fe fc89 	bl	8000df8 <HAL_GetTick>
 80024e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024ea:	f7fe fc85 	bl	8000df8 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	; 0x64
 80024f6:	d903      	bls.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e0ba      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80024fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002500:	4b5e      	ldr	r3, [pc, #376]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800250c:	d0ed      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800252a:	2b00      	cmp	r3, #0
 800252c:	d02e      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d12a      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002536:	4b51      	ldr	r3, [pc, #324]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002544:	4b4d      	ldr	r3, [pc, #308]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	0f1b      	lsrs	r3, r3, #28
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	019a      	lsls	r2, r3, #6
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	041b      	lsls	r3, r3, #16
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	061b      	lsls	r3, r3, #24
 8002564:	431a      	orrs	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	071b      	lsls	r3, r3, #28
 800256a:	4944      	ldr	r1, [pc, #272]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002572:	4b42      	ldr	r3, [pc, #264]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002578:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	3b01      	subs	r3, #1
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	493d      	ldr	r1, [pc, #244]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d022      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800259c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a0:	d11d      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025a2:	4b36      	ldr	r3, [pc, #216]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	0e1b      	lsrs	r3, r3, #24
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025b0:	4b32      	ldr	r3, [pc, #200]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	0f1b      	lsrs	r3, r3, #28
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	019a      	lsls	r2, r3, #6
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	431a      	orrs	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	071b      	lsls	r3, r3, #28
 80025d6:	4929      	ldr	r1, [pc, #164]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d028      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	0e1b      	lsrs	r3, r3, #24
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025f8:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	0c1b      	lsrs	r3, r3, #16
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	019a      	lsls	r2, r3, #6
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	071b      	lsls	r3, r3, #28
 800261e:	4917      	ldr	r1, [pc, #92]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800262c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	4911      	ldr	r1, [pc, #68]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0e      	ldr	r2, [pc, #56]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002648:	f7fe fbd6 	bl	8000df8 <HAL_GetTick>
 800264c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002650:	f7fe fbd2 	bl	8000df8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e007      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800266a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800266e:	d1ef      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800

08002680 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e071      	b.n	800277a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7f5b      	ldrb	r3, [r3, #29]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe f9c0 	bl	8000a2c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d053      	beq.n	8002768 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	22ca      	movs	r2, #202	; 0xca
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2253      	movs	r2, #83	; 0x53
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f881 	bl	80027d8 <RTC_EnterInitMode>
 80026d6:	4603      	mov	r3, r0
 80026d8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d12a      	bne.n	8002736 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6899      	ldr	r1, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b26      	ldr	r3, [pc, #152]	; (8002784 <HAL_RTC_Init+0x104>)
 80026ec:	400b      	ands	r3, r1
 80026ee:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68d2      	ldr	r2, [r2, #12]
 8002716:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	041a      	lsls	r2, r3, #16
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f88a 	bl	8002846 <RTC_ExitInitMode>
 8002732:	4603      	mov	r3, r0
 8002734:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d110      	bne.n	800275e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0208 	bic.w	r2, r2, #8
 800274a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	22ff      	movs	r2, #255	; 0xff
 8002764:	625a      	str	r2, [r3, #36]	; 0x24
 8002766:	e001      	b.n	800276c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	ff8fffbf 	.word	0xff8fffbf

08002788 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a4:	f7fe fb28 	bl	8000df8 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027aa:	e009      	b.n	80027c0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027ac:	f7fe fb24 	bl	8000df8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ba:	d901      	bls.n	80027c0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e007      	b.n	80027d0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0ee      	beq.n	80027ac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d122      	bne.n	800283c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002804:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002806:	f7fe faf7 	bl	8000df8 <HAL_GetTick>
 800280a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800280c:	e00c      	b.n	8002828 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800280e:	f7fe faf3 	bl	8000df8 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800281c:	d904      	bls.n	8002828 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2204      	movs	r2, #4
 8002822:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <RTC_EnterInitMode+0x64>
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d1e8      	bne.n	800280e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002860:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff89 	bl	8002788 <HAL_RTC_WaitForSynchro>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d004      	beq.n	8002886 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2204      	movs	r2, #4
 8002880:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e049      	b.n	8002936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fe f8e6 	bl	8000a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 fb6e 	bl	8002fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e049      	b.n	80029e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f841 	bl	80029ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2202      	movs	r2, #2
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f000 fb17 	bl	8002fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_TIM_PWM_Start+0x24>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e03c      	b.n	8002a9e <HAL_TIM_PWM_Start+0x9e>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d109      	bne.n	8002a3e <HAL_TIM_PWM_Start+0x3e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	e02f      	b.n	8002a9e <HAL_TIM_PWM_Start+0x9e>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d109      	bne.n	8002a58 <HAL_TIM_PWM_Start+0x58>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e022      	b.n	8002a9e <HAL_TIM_PWM_Start+0x9e>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d109      	bne.n	8002a72 <HAL_TIM_PWM_Start+0x72>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	bf14      	ite	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	2300      	moveq	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	e015      	b.n	8002a9e <HAL_TIM_PWM_Start+0x9e>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b10      	cmp	r3, #16
 8002a76:	d109      	bne.n	8002a8c <HAL_TIM_PWM_Start+0x8c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e008      	b.n	8002a9e <HAL_TIM_PWM_Start+0x9e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e092      	b.n	8002bcc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <HAL_TIM_PWM_Start+0xb6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab4:	e023      	b.n	8002afe <HAL_TIM_PWM_Start+0xfe>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d104      	bne.n	8002ac6 <HAL_TIM_PWM_Start+0xc6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac4:	e01b      	b.n	8002afe <HAL_TIM_PWM_Start+0xfe>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d104      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0xd6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad4:	e013      	b.n	8002afe <HAL_TIM_PWM_Start+0xfe>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0xe6>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ae4:	e00b      	b.n	8002afe <HAL_TIM_PWM_Start+0xfe>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d104      	bne.n	8002af6 <HAL_TIM_PWM_Start+0xf6>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002af4:	e003      	b.n	8002afe <HAL_TIM_PWM_Start+0xfe>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2201      	movs	r2, #1
 8002b04:	6839      	ldr	r1, [r7, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fdea 	bl	80036e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a30      	ldr	r2, [pc, #192]	; (8002bd4 <HAL_TIM_PWM_Start+0x1d4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d004      	beq.n	8002b20 <HAL_TIM_PWM_Start+0x120>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <HAL_TIM_PWM_Start+0x1d8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_TIM_PWM_Start+0x124>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <HAL_TIM_PWM_Start+0x126>
 8002b24:	2300      	movs	r3, #0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <HAL_TIM_PWM_Start+0x1d4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d022      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x18a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4c:	d01d      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x18a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <HAL_TIM_PWM_Start+0x1dc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d018      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x18a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a20      	ldr	r2, [pc, #128]	; (8002be0 <HAL_TIM_PWM_Start+0x1e0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x18a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <HAL_TIM_PWM_Start+0x1e4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00e      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x18a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <HAL_TIM_PWM_Start+0x1d8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d009      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x18a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <HAL_TIM_PWM_Start+0x1e8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x18a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_TIM_PWM_Start+0x1ec>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d115      	bne.n	8002bb6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_TIM_PWM_Start+0x1f0>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b06      	cmp	r3, #6
 8002b9a:	d015      	beq.n	8002bc8 <HAL_TIM_PWM_Start+0x1c8>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba2:	d011      	beq.n	8002bc8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb4:	e008      	b.n	8002bc8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e000      	b.n	8002bca <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40010400 	.word	0x40010400
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800
 8002be4:	40000c00 	.word	0x40000c00
 8002be8:	40014000 	.word	0x40014000
 8002bec:	40001800 	.word	0x40001800
 8002bf0:	00010007 	.word	0x00010007

08002bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e0ff      	b.n	8002e12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b14      	cmp	r3, #20
 8002c1e:	f200 80f0 	bhi.w	8002e02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c7d 	.word	0x08002c7d
 8002c2c:	08002e03 	.word	0x08002e03
 8002c30:	08002e03 	.word	0x08002e03
 8002c34:	08002e03 	.word	0x08002e03
 8002c38:	08002cbd 	.word	0x08002cbd
 8002c3c:	08002e03 	.word	0x08002e03
 8002c40:	08002e03 	.word	0x08002e03
 8002c44:	08002e03 	.word	0x08002e03
 8002c48:	08002cff 	.word	0x08002cff
 8002c4c:	08002e03 	.word	0x08002e03
 8002c50:	08002e03 	.word	0x08002e03
 8002c54:	08002e03 	.word	0x08002e03
 8002c58:	08002d3f 	.word	0x08002d3f
 8002c5c:	08002e03 	.word	0x08002e03
 8002c60:	08002e03 	.word	0x08002e03
 8002c64:	08002e03 	.word	0x08002e03
 8002c68:	08002d81 	.word	0x08002d81
 8002c6c:	08002e03 	.word	0x08002e03
 8002c70:	08002e03 	.word	0x08002e03
 8002c74:	08002e03 	.word	0x08002e03
 8002c78:	08002dc1 	.word	0x08002dc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fa34 	bl	80030f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0208 	orr.w	r2, r2, #8
 8002c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0204 	bic.w	r2, r2, #4
 8002ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6999      	ldr	r1, [r3, #24]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	619a      	str	r2, [r3, #24]
      break;
 8002cba:	e0a5      	b.n	8002e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fa86 	bl	80031d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6999      	ldr	r1, [r3, #24]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	021a      	lsls	r2, r3, #8
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	619a      	str	r2, [r3, #24]
      break;
 8002cfc:	e084      	b.n	8002e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fadd 	bl	80032c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0208 	orr.w	r2, r2, #8
 8002d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69da      	ldr	r2, [r3, #28]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0204 	bic.w	r2, r2, #4
 8002d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69d9      	ldr	r1, [r3, #28]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	61da      	str	r2, [r3, #28]
      break;
 8002d3c:	e064      	b.n	8002e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fb33 	bl	80033b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69d9      	ldr	r1, [r3, #28]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	021a      	lsls	r2, r3, #8
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	61da      	str	r2, [r3, #28]
      break;
 8002d7e:	e043      	b.n	8002e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fb6a 	bl	8003460 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0208 	orr.w	r2, r2, #8
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0204 	bic.w	r2, r2, #4
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002dbe:	e023      	b.n	8002e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fb9c 	bl	8003504 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	021a      	lsls	r2, r3, #8
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e00:	e002      	b.n	8002e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	75fb      	strb	r3, [r7, #23]
      break;
 8002e06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop

08002e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_TIM_ConfigClockSource+0x1c>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e0b4      	b.n	8002fa2 <HAL_TIM_ConfigClockSource+0x186>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	4b56      	ldr	r3, [pc, #344]	; (8002fac <HAL_TIM_ConfigClockSource+0x190>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e70:	d03e      	beq.n	8002ef0 <HAL_TIM_ConfigClockSource+0xd4>
 8002e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e76:	f200 8087 	bhi.w	8002f88 <HAL_TIM_ConfigClockSource+0x16c>
 8002e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7e:	f000 8086 	beq.w	8002f8e <HAL_TIM_ConfigClockSource+0x172>
 8002e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e86:	d87f      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b70      	cmp	r3, #112	; 0x70
 8002e8a:	d01a      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0xa6>
 8002e8c:	2b70      	cmp	r3, #112	; 0x70
 8002e8e:	d87b      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b60      	cmp	r3, #96	; 0x60
 8002e92:	d050      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x11a>
 8002e94:	2b60      	cmp	r3, #96	; 0x60
 8002e96:	d877      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b50      	cmp	r3, #80	; 0x50
 8002e9a:	d03c      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0xfa>
 8002e9c:	2b50      	cmp	r3, #80	; 0x50
 8002e9e:	d873      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d058      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x13a>
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d86f      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b30      	cmp	r3, #48	; 0x30
 8002eaa:	d064      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	2b30      	cmp	r3, #48	; 0x30
 8002eae:	d86b      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d060      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d867      	bhi.n	8002f88 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d05c      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x15a>
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d05a      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x15a>
 8002ec0:	e062      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6899      	ldr	r1, [r3, #8]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f000 fbe5 	bl	80036a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	609a      	str	r2, [r3, #8]
      break;
 8002eee:	e04f      	b.n	8002f90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6899      	ldr	r1, [r3, #8]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f000 fbce 	bl	80036a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f12:	609a      	str	r2, [r3, #8]
      break;
 8002f14:	e03c      	b.n	8002f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f000 fb42 	bl	80035ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2150      	movs	r1, #80	; 0x50
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fb9b 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 8002f34:	e02c      	b.n	8002f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f000 fb61 	bl	800360a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2160      	movs	r1, #96	; 0x60
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fb8b 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 8002f54:	e01c      	b.n	8002f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f000 fb22 	bl	80035ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2140      	movs	r1, #64	; 0x40
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fb7b 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 8002f74:	e00c      	b.n	8002f90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4610      	mov	r0, r2
 8002f82:	f000 fb72 	bl	800366a <TIM_ITRx_SetConfig>
      break;
 8002f86:	e003      	b.n	8002f90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8c:	e000      	b.n	8002f90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	fffeff88 	.word	0xfffeff88

08002fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a40      	ldr	r2, [pc, #256]	; (80030c4 <TIM_Base_SetConfig+0x114>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <TIM_Base_SetConfig+0x40>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fce:	d00f      	beq.n	8002ff0 <TIM_Base_SetConfig+0x40>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a3d      	ldr	r2, [pc, #244]	; (80030c8 <TIM_Base_SetConfig+0x118>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00b      	beq.n	8002ff0 <TIM_Base_SetConfig+0x40>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a3c      	ldr	r2, [pc, #240]	; (80030cc <TIM_Base_SetConfig+0x11c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <TIM_Base_SetConfig+0x40>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a3b      	ldr	r2, [pc, #236]	; (80030d0 <TIM_Base_SetConfig+0x120>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d003      	beq.n	8002ff0 <TIM_Base_SetConfig+0x40>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a3a      	ldr	r2, [pc, #232]	; (80030d4 <TIM_Base_SetConfig+0x124>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d108      	bne.n	8003002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a2f      	ldr	r2, [pc, #188]	; (80030c4 <TIM_Base_SetConfig+0x114>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d02b      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d027      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a2c      	ldr	r2, [pc, #176]	; (80030c8 <TIM_Base_SetConfig+0x118>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d023      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a2b      	ldr	r2, [pc, #172]	; (80030cc <TIM_Base_SetConfig+0x11c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d01f      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a2a      	ldr	r2, [pc, #168]	; (80030d0 <TIM_Base_SetConfig+0x120>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01b      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <TIM_Base_SetConfig+0x124>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d017      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <TIM_Base_SetConfig+0x128>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a27      	ldr	r2, [pc, #156]	; (80030dc <TIM_Base_SetConfig+0x12c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00f      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <TIM_Base_SetConfig+0x130>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00b      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a25      	ldr	r2, [pc, #148]	; (80030e4 <TIM_Base_SetConfig+0x134>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d007      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a24      	ldr	r2, [pc, #144]	; (80030e8 <TIM_Base_SetConfig+0x138>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d003      	beq.n	8003062 <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a23      	ldr	r2, [pc, #140]	; (80030ec <TIM_Base_SetConfig+0x13c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d108      	bne.n	8003074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <TIM_Base_SetConfig+0x114>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <TIM_Base_SetConfig+0xf8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <TIM_Base_SetConfig+0x124>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d103      	bne.n	80030b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	615a      	str	r2, [r3, #20]
}
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40010000 	.word	0x40010000
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40000c00 	.word	0x40000c00
 80030d4:	40010400 	.word	0x40010400
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40014400 	.word	0x40014400
 80030e0:	40014800 	.word	0x40014800
 80030e4:	40001800 	.word	0x40001800
 80030e8:	40001c00 	.word	0x40001c00
 80030ec:	40002000 	.word	0x40002000

080030f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f023 0201 	bic.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <TIM_OC1_SetConfig+0xd8>)
 800311c:	4013      	ands	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0303 	bic.w	r3, r3, #3
 8003126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f023 0302 	bic.w	r3, r3, #2
 8003138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a21      	ldr	r2, [pc, #132]	; (80031cc <TIM_OC1_SetConfig+0xdc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_OC1_SetConfig+0x64>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <TIM_OC1_SetConfig+0xe0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10c      	bne.n	800316e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0308 	bic.w	r3, r3, #8
 800315a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a16      	ldr	r2, [pc, #88]	; (80031cc <TIM_OC1_SetConfig+0xdc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d003      	beq.n	800317e <TIM_OC1_SetConfig+0x8e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <TIM_OC1_SetConfig+0xe0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d111      	bne.n	80031a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800318c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	fffeff8f 	.word	0xfffeff8f
 80031cc:	40010000 	.word	0x40010000
 80031d0:	40010400 	.word	0x40010400

080031d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f023 0210 	bic.w	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4b2e      	ldr	r3, [pc, #184]	; (80032b8 <TIM_OC2_SetConfig+0xe4>)
 8003200:	4013      	ands	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f023 0320 	bic.w	r3, r3, #32
 800321e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a23      	ldr	r2, [pc, #140]	; (80032bc <TIM_OC2_SetConfig+0xe8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_OC2_SetConfig+0x68>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <TIM_OC2_SetConfig+0xec>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d10d      	bne.n	8003258 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a18      	ldr	r2, [pc, #96]	; (80032bc <TIM_OC2_SetConfig+0xe8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_OC2_SetConfig+0x94>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <TIM_OC2_SetConfig+0xec>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d113      	bne.n	8003290 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800326e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	621a      	str	r2, [r3, #32]
}
 80032aa:	bf00      	nop
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	feff8fff 	.word	0xfeff8fff
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40010400 	.word	0x40010400

080032c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <TIM_OC3_SetConfig+0xe0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0303 	bic.w	r3, r3, #3
 80032fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800330c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <TIM_OC3_SetConfig+0xe4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <TIM_OC3_SetConfig+0x66>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <TIM_OC3_SetConfig+0xe8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10d      	bne.n	8003346 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <TIM_OC3_SetConfig+0xe4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d003      	beq.n	8003356 <TIM_OC3_SetConfig+0x92>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a16      	ldr	r2, [pc, #88]	; (80033ac <TIM_OC3_SetConfig+0xe8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d113      	bne.n	800337e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800335c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	621a      	str	r2, [r3, #32]
}
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	fffeff8f 	.word	0xfffeff8f
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40010400 	.word	0x40010400

080033b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <TIM_OC4_SetConfig+0xa4>)
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	031b      	lsls	r3, r3, #12
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a13      	ldr	r2, [pc, #76]	; (8003458 <TIM_OC4_SetConfig+0xa8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_OC4_SetConfig+0x68>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <TIM_OC4_SetConfig+0xac>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d109      	bne.n	800342c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800341e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	019b      	lsls	r3, r3, #6
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	621a      	str	r2, [r3, #32]
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	feff8fff 	.word	0xfeff8fff
 8003458:	40010000 	.word	0x40010000
 800345c:	40010400 	.word	0x40010400

08003460 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <TIM_OC5_SetConfig+0x98>)
 800348c:	4013      	ands	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	041b      	lsls	r3, r3, #16
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <TIM_OC5_SetConfig+0x9c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_OC5_SetConfig+0x5e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a11      	ldr	r2, [pc, #68]	; (8003500 <TIM_OC5_SetConfig+0xa0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d109      	bne.n	80034d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	621a      	str	r2, [r3, #32]
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	fffeff8f 	.word	0xfffeff8f
 80034fc:	40010000 	.word	0x40010000
 8003500:	40010400 	.word	0x40010400

08003504 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <TIM_OC6_SetConfig+0x9c>)
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	051b      	lsls	r3, r3, #20
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <TIM_OC6_SetConfig+0xa0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_OC6_SetConfig+0x60>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <TIM_OC6_SetConfig+0xa4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d109      	bne.n	8003578 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	029b      	lsls	r3, r3, #10
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	feff8fff 	.word	0xfeff8fff
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40010400 	.word	0x40010400

080035ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0201 	bic.w	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f023 030a 	bic.w	r3, r3, #10
 80035e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800360a:	b480      	push	{r7}
 800360c:	b087      	sub	sp, #28
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0210 	bic.w	r2, r3, #16
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	031b      	lsls	r3, r3, #12
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003646:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	621a      	str	r2, [r3, #32]
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800366a:	b480      	push	{r7}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	f043 0307 	orr.w	r3, r3, #7
 800368c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	021a      	lsls	r2, r3, #8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	609a      	str	r2, [r3, #8]
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2201      	movs	r2, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1a      	ldr	r2, [r3, #32]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	43db      	mvns	r3, r3
 8003702:	401a      	ands	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003740:	2302      	movs	r3, #2
 8003742:	e06d      	b.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a30      	ldr	r2, [pc, #192]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2f      	ldr	r2, [pc, #188]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d108      	bne.n	800378a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800377e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003790:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a20      	ldr	r2, [pc, #128]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d022      	beq.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d01d      	beq.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d018      	beq.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1a      	ldr	r2, [pc, #104]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a15      	ldr	r2, [pc, #84]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d009      	beq.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a16      	ldr	r2, [pc, #88]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d10c      	bne.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	4313      	orrs	r3, r2
 8003804:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	40010000 	.word	0x40010000
 8003830:	40010400 	.word	0x40010400
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800
 800383c:	40000c00 	.word	0x40000c00
 8003840:	40014000 	.word	0x40014000
 8003844:	40001800 	.word	0x40001800

08003848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e040      	b.n	80038dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd f964 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2224      	movs	r2, #36	; 0x24
 8003874:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fc00 	bl	800408c <UART_SetConfig>
 800388c:	4603      	mov	r3, r0
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e022      	b.n	80038dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fe58 	bl	8004554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fedf 	bl	8004698 <UART_CheckIdleState>
 80038da:	4603      	mov	r3, r0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d171      	bne.n	80039e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_UART_Transmit+0x24>
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e06a      	b.n	80039e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2221      	movs	r2, #33	; 0x21
 8003918:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800391a:	f7fd fa6d 	bl	8000df8 <HAL_GetTick>
 800391e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	88fa      	ldrh	r2, [r7, #6]
 8003924:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003938:	d108      	bne.n	800394c <HAL_UART_Transmit+0x68>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d104      	bne.n	800394c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	e003      	b.n	8003954 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003954:	e02c      	b.n	80039b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	2180      	movs	r1, #128	; 0x80
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fed0 	bl	8004706 <UART_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e038      	b.n	80039e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003984:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	3302      	adds	r3, #2
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	e007      	b.n	800399e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	3301      	adds	r3, #1
 800399c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1cc      	bne.n	8003956 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2200      	movs	r2, #0
 80039c4:	2140      	movs	r1, #64	; 0x40
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fe9d 	bl	8004706 <UART_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e005      	b.n	80039e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b08b      	sub	sp, #44	; 0x2c
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d147      	bne.n	8003a92 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_UART_Transmit_IT+0x22>
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e040      	b.n	8003a94 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	88fa      	ldrh	r2, [r7, #6]
 8003a24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2221      	movs	r2, #33	; 0x21
 8003a3a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a44:	d107      	bne.n	8003a56 <HAL_UART_Transmit_IT+0x6a>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_UART_Transmit_IT+0xb4>)
 8003a52:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a54:	e002      	b.n	8003a5c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <HAL_UART_Transmit_IT+0xb8>)
 8003a5a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	623b      	str	r3, [r7, #32]
 8003a7c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	69f9      	ldr	r1, [r7, #28]
 8003a80:	6a3a      	ldr	r2, [r7, #32]
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e6      	bne.n	8003a5c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	372c      	adds	r7, #44	; 0x2c
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	08004a3d 	.word	0x08004a3d
 8003aa4:	08004987 	.word	0x08004987

08003aa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b0ba      	sub	sp, #232	; 0xe8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ace:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ad2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003adc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d115      	bne.n	8003b10 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00f      	beq.n	8003b10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8297 	beq.w	8004034 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
      }
      return;
 8003b0e:	e291      	b.n	8004034 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8117 	beq.w	8003d48 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b2a:	4b85      	ldr	r3, [pc, #532]	; (8003d40 <HAL_UART_IRQHandler+0x298>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 810a 	beq.w	8003d48 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d011      	beq.n	8003b64 <HAL_UART_IRQHandler+0xbc>
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2201      	movs	r2, #1
 8003b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d011      	beq.n	8003b94 <HAL_UART_IRQHandler+0xec>
 8003b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2202      	movs	r2, #2
 8003b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8a:	f043 0204 	orr.w	r2, r3, #4
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d011      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x11c>
 8003ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bba:	f043 0202 	orr.w	r2, r3, #2
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d017      	beq.n	8003c00 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2208      	movs	r2, #8
 8003bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf6:	f043 0208 	orr.w	r2, r3, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d012      	beq.n	8003c32 <HAL_UART_IRQHandler+0x18a>
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00c      	beq.n	8003c32 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 81fd 	beq.w	8004038 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d005      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d04f      	beq.n	8003d2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fe01 	bl	8004892 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d141      	bne.n	8003d22 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1d9      	bne.n	8003c9e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d013      	beq.n	8003d1a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <HAL_UART_IRQHandler+0x29c>)
 8003cf8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fd fa31 	bl	8001166 <HAL_DMA_Abort_IT>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d017      	beq.n	8003d3a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d14:	4610      	mov	r0, r2
 8003d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e00f      	b.n	8003d3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9a0 	bl	8004060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	e00b      	b.n	8003d3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f99c 	bl	8004060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	e007      	b.n	8003d3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f998 	bl	8004060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d38:	e17e      	b.n	8004038 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3a:	bf00      	nop
    return;
 8003d3c:	e17c      	b.n	8004038 <HAL_UART_IRQHandler+0x590>
 8003d3e:	bf00      	nop
 8003d40:	04000120 	.word	0x04000120
 8003d44:	0800495b 	.word	0x0800495b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	f040 814c 	bne.w	8003fea <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8145 	beq.w	8003fea <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 813e 	beq.w	8003fea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2210      	movs	r2, #16
 8003d74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	f040 80b6 	bne.w	8003ef2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8150 	beq.w	800403c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003da6:	429a      	cmp	r2, r3
 8003da8:	f080 8148 	bcs.w	800403c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003db2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc0:	f000 8086 	beq.w	8003ed0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003df2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1da      	bne.n	8003dc4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3308      	adds	r3, #8
 8003e14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e1      	bne.n	8003e0e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e3      	bne.n	8003e4a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea0:	f023 0310 	bic.w	r3, r3, #16
 8003ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eb4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e4      	bne.n	8003e90 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd f8db 	bl	8001086 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8c2 	bl	8004074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ef0:	e0a4      	b.n	800403c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8096 	beq.w	8004040 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003f14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8091 	beq.w	8004040 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f40:	647b      	str	r3, [r7, #68]	; 0x44
 8003f42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e4      	bne.n	8003f1e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	623b      	str	r3, [r7, #32]
   return(result);
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3308      	adds	r3, #8
 8003f74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f78:	633a      	str	r2, [r7, #48]	; 0x30
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e3      	bne.n	8003f54 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f023 0310 	bic.w	r3, r3, #16
 8003fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	69b9      	ldr	r1, [r7, #24]
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	617b      	str	r3, [r7, #20]
   return(result);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e4      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f846 	bl	8004074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fe8:	e02a      	b.n	8004040 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00e      	beq.n	8004014 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01c      	beq.n	8004044 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	4798      	blx	r3
    }
    return;
 8004012:	e017      	b.n	8004044 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d012      	beq.n	8004046 <HAL_UART_IRQHandler+0x59e>
 8004020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00c      	beq.n	8004046 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fd65 	bl	8004afc <UART_EndTransmit_IT>
    return;
 8004032:	e008      	b.n	8004046 <HAL_UART_IRQHandler+0x59e>
      return;
 8004034:	bf00      	nop
 8004036:	e006      	b.n	8004046 <HAL_UART_IRQHandler+0x59e>
    return;
 8004038:	bf00      	nop
 800403a:	e004      	b.n	8004046 <HAL_UART_IRQHandler+0x59e>
      return;
 800403c:	bf00      	nop
 800403e:	e002      	b.n	8004046 <HAL_UART_IRQHandler+0x59e>
      return;
 8004040:	bf00      	nop
 8004042:	e000      	b.n	8004046 <HAL_UART_IRQHandler+0x59e>
    return;
 8004044:	bf00      	nop
  }

}
 8004046:	37e8      	adds	r7, #232	; 0xe8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4ba6      	ldr	r3, [pc, #664]	; (8004350 <UART_SetConfig+0x2c4>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	6979      	ldr	r1, [r7, #20]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a94      	ldr	r2, [pc, #592]	; (8004354 <UART_SetConfig+0x2c8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d120      	bne.n	800414a <UART_SetConfig+0xbe>
 8004108:	4b93      	ldr	r3, [pc, #588]	; (8004358 <UART_SetConfig+0x2cc>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b03      	cmp	r3, #3
 8004114:	d816      	bhi.n	8004144 <UART_SetConfig+0xb8>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <UART_SetConfig+0x90>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	0800412d 	.word	0x0800412d
 8004120:	08004139 	.word	0x08004139
 8004124:	08004133 	.word	0x08004133
 8004128:	0800413f 	.word	0x0800413f
 800412c:	2301      	movs	r3, #1
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e150      	b.n	80043d4 <UART_SetConfig+0x348>
 8004132:	2302      	movs	r3, #2
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e14d      	b.n	80043d4 <UART_SetConfig+0x348>
 8004138:	2304      	movs	r3, #4
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e14a      	b.n	80043d4 <UART_SetConfig+0x348>
 800413e:	2308      	movs	r3, #8
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e147      	b.n	80043d4 <UART_SetConfig+0x348>
 8004144:	2310      	movs	r3, #16
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e144      	b.n	80043d4 <UART_SetConfig+0x348>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a83      	ldr	r2, [pc, #524]	; (800435c <UART_SetConfig+0x2d0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d132      	bne.n	80041ba <UART_SetConfig+0x12e>
 8004154:	4b80      	ldr	r3, [pc, #512]	; (8004358 <UART_SetConfig+0x2cc>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b0c      	cmp	r3, #12
 8004160:	d828      	bhi.n	80041b4 <UART_SetConfig+0x128>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <UART_SetConfig+0xdc>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	0800419d 	.word	0x0800419d
 800416c:	080041b5 	.word	0x080041b5
 8004170:	080041b5 	.word	0x080041b5
 8004174:	080041b5 	.word	0x080041b5
 8004178:	080041a9 	.word	0x080041a9
 800417c:	080041b5 	.word	0x080041b5
 8004180:	080041b5 	.word	0x080041b5
 8004184:	080041b5 	.word	0x080041b5
 8004188:	080041a3 	.word	0x080041a3
 800418c:	080041b5 	.word	0x080041b5
 8004190:	080041b5 	.word	0x080041b5
 8004194:	080041b5 	.word	0x080041b5
 8004198:	080041af 	.word	0x080041af
 800419c:	2300      	movs	r3, #0
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e118      	b.n	80043d4 <UART_SetConfig+0x348>
 80041a2:	2302      	movs	r3, #2
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e115      	b.n	80043d4 <UART_SetConfig+0x348>
 80041a8:	2304      	movs	r3, #4
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e112      	b.n	80043d4 <UART_SetConfig+0x348>
 80041ae:	2308      	movs	r3, #8
 80041b0:	77fb      	strb	r3, [r7, #31]
 80041b2:	e10f      	b.n	80043d4 <UART_SetConfig+0x348>
 80041b4:	2310      	movs	r3, #16
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e10c      	b.n	80043d4 <UART_SetConfig+0x348>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a68      	ldr	r2, [pc, #416]	; (8004360 <UART_SetConfig+0x2d4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d120      	bne.n	8004206 <UART_SetConfig+0x17a>
 80041c4:	4b64      	ldr	r3, [pc, #400]	; (8004358 <UART_SetConfig+0x2cc>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041ce:	2b30      	cmp	r3, #48	; 0x30
 80041d0:	d013      	beq.n	80041fa <UART_SetConfig+0x16e>
 80041d2:	2b30      	cmp	r3, #48	; 0x30
 80041d4:	d814      	bhi.n	8004200 <UART_SetConfig+0x174>
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d009      	beq.n	80041ee <UART_SetConfig+0x162>
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d810      	bhi.n	8004200 <UART_SetConfig+0x174>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <UART_SetConfig+0x15c>
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d006      	beq.n	80041f4 <UART_SetConfig+0x168>
 80041e6:	e00b      	b.n	8004200 <UART_SetConfig+0x174>
 80041e8:	2300      	movs	r3, #0
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e0f2      	b.n	80043d4 <UART_SetConfig+0x348>
 80041ee:	2302      	movs	r3, #2
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e0ef      	b.n	80043d4 <UART_SetConfig+0x348>
 80041f4:	2304      	movs	r3, #4
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e0ec      	b.n	80043d4 <UART_SetConfig+0x348>
 80041fa:	2308      	movs	r3, #8
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e0e9      	b.n	80043d4 <UART_SetConfig+0x348>
 8004200:	2310      	movs	r3, #16
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e0e6      	b.n	80043d4 <UART_SetConfig+0x348>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a56      	ldr	r2, [pc, #344]	; (8004364 <UART_SetConfig+0x2d8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d120      	bne.n	8004252 <UART_SetConfig+0x1c6>
 8004210:	4b51      	ldr	r3, [pc, #324]	; (8004358 <UART_SetConfig+0x2cc>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800421a:	2bc0      	cmp	r3, #192	; 0xc0
 800421c:	d013      	beq.n	8004246 <UART_SetConfig+0x1ba>
 800421e:	2bc0      	cmp	r3, #192	; 0xc0
 8004220:	d814      	bhi.n	800424c <UART_SetConfig+0x1c0>
 8004222:	2b80      	cmp	r3, #128	; 0x80
 8004224:	d009      	beq.n	800423a <UART_SetConfig+0x1ae>
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d810      	bhi.n	800424c <UART_SetConfig+0x1c0>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <UART_SetConfig+0x1a8>
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d006      	beq.n	8004240 <UART_SetConfig+0x1b4>
 8004232:	e00b      	b.n	800424c <UART_SetConfig+0x1c0>
 8004234:	2300      	movs	r3, #0
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e0cc      	b.n	80043d4 <UART_SetConfig+0x348>
 800423a:	2302      	movs	r3, #2
 800423c:	77fb      	strb	r3, [r7, #31]
 800423e:	e0c9      	b.n	80043d4 <UART_SetConfig+0x348>
 8004240:	2304      	movs	r3, #4
 8004242:	77fb      	strb	r3, [r7, #31]
 8004244:	e0c6      	b.n	80043d4 <UART_SetConfig+0x348>
 8004246:	2308      	movs	r3, #8
 8004248:	77fb      	strb	r3, [r7, #31]
 800424a:	e0c3      	b.n	80043d4 <UART_SetConfig+0x348>
 800424c:	2310      	movs	r3, #16
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e0c0      	b.n	80043d4 <UART_SetConfig+0x348>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a44      	ldr	r2, [pc, #272]	; (8004368 <UART_SetConfig+0x2dc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d125      	bne.n	80042a8 <UART_SetConfig+0x21c>
 800425c:	4b3e      	ldr	r3, [pc, #248]	; (8004358 <UART_SetConfig+0x2cc>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426a:	d017      	beq.n	800429c <UART_SetConfig+0x210>
 800426c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004270:	d817      	bhi.n	80042a2 <UART_SetConfig+0x216>
 8004272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004276:	d00b      	beq.n	8004290 <UART_SetConfig+0x204>
 8004278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800427c:	d811      	bhi.n	80042a2 <UART_SetConfig+0x216>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <UART_SetConfig+0x1fe>
 8004282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004286:	d006      	beq.n	8004296 <UART_SetConfig+0x20a>
 8004288:	e00b      	b.n	80042a2 <UART_SetConfig+0x216>
 800428a:	2300      	movs	r3, #0
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e0a1      	b.n	80043d4 <UART_SetConfig+0x348>
 8004290:	2302      	movs	r3, #2
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e09e      	b.n	80043d4 <UART_SetConfig+0x348>
 8004296:	2304      	movs	r3, #4
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	e09b      	b.n	80043d4 <UART_SetConfig+0x348>
 800429c:	2308      	movs	r3, #8
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e098      	b.n	80043d4 <UART_SetConfig+0x348>
 80042a2:	2310      	movs	r3, #16
 80042a4:	77fb      	strb	r3, [r7, #31]
 80042a6:	e095      	b.n	80043d4 <UART_SetConfig+0x348>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a2f      	ldr	r2, [pc, #188]	; (800436c <UART_SetConfig+0x2e0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d125      	bne.n	80042fe <UART_SetConfig+0x272>
 80042b2:	4b29      	ldr	r3, [pc, #164]	; (8004358 <UART_SetConfig+0x2cc>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c0:	d017      	beq.n	80042f2 <UART_SetConfig+0x266>
 80042c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c6:	d817      	bhi.n	80042f8 <UART_SetConfig+0x26c>
 80042c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042cc:	d00b      	beq.n	80042e6 <UART_SetConfig+0x25a>
 80042ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d2:	d811      	bhi.n	80042f8 <UART_SetConfig+0x26c>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <UART_SetConfig+0x254>
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042dc:	d006      	beq.n	80042ec <UART_SetConfig+0x260>
 80042de:	e00b      	b.n	80042f8 <UART_SetConfig+0x26c>
 80042e0:	2301      	movs	r3, #1
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e076      	b.n	80043d4 <UART_SetConfig+0x348>
 80042e6:	2302      	movs	r3, #2
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e073      	b.n	80043d4 <UART_SetConfig+0x348>
 80042ec:	2304      	movs	r3, #4
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e070      	b.n	80043d4 <UART_SetConfig+0x348>
 80042f2:	2308      	movs	r3, #8
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e06d      	b.n	80043d4 <UART_SetConfig+0x348>
 80042f8:	2310      	movs	r3, #16
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e06a      	b.n	80043d4 <UART_SetConfig+0x348>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <UART_SetConfig+0x2e4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d138      	bne.n	800437a <UART_SetConfig+0x2ee>
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <UART_SetConfig+0x2cc>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004312:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004316:	d017      	beq.n	8004348 <UART_SetConfig+0x2bc>
 8004318:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800431c:	d82a      	bhi.n	8004374 <UART_SetConfig+0x2e8>
 800431e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004322:	d00b      	beq.n	800433c <UART_SetConfig+0x2b0>
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004328:	d824      	bhi.n	8004374 <UART_SetConfig+0x2e8>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <UART_SetConfig+0x2aa>
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004332:	d006      	beq.n	8004342 <UART_SetConfig+0x2b6>
 8004334:	e01e      	b.n	8004374 <UART_SetConfig+0x2e8>
 8004336:	2300      	movs	r3, #0
 8004338:	77fb      	strb	r3, [r7, #31]
 800433a:	e04b      	b.n	80043d4 <UART_SetConfig+0x348>
 800433c:	2302      	movs	r3, #2
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	e048      	b.n	80043d4 <UART_SetConfig+0x348>
 8004342:	2304      	movs	r3, #4
 8004344:	77fb      	strb	r3, [r7, #31]
 8004346:	e045      	b.n	80043d4 <UART_SetConfig+0x348>
 8004348:	2308      	movs	r3, #8
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e042      	b.n	80043d4 <UART_SetConfig+0x348>
 800434e:	bf00      	nop
 8004350:	efff69f3 	.word	0xefff69f3
 8004354:	40011000 	.word	0x40011000
 8004358:	40023800 	.word	0x40023800
 800435c:	40004400 	.word	0x40004400
 8004360:	40004800 	.word	0x40004800
 8004364:	40004c00 	.word	0x40004c00
 8004368:	40005000 	.word	0x40005000
 800436c:	40011400 	.word	0x40011400
 8004370:	40007800 	.word	0x40007800
 8004374:	2310      	movs	r3, #16
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e02c      	b.n	80043d4 <UART_SetConfig+0x348>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a72      	ldr	r2, [pc, #456]	; (8004548 <UART_SetConfig+0x4bc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d125      	bne.n	80043d0 <UART_SetConfig+0x344>
 8004384:	4b71      	ldr	r3, [pc, #452]	; (800454c <UART_SetConfig+0x4c0>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800438e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004392:	d017      	beq.n	80043c4 <UART_SetConfig+0x338>
 8004394:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004398:	d817      	bhi.n	80043ca <UART_SetConfig+0x33e>
 800439a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439e:	d00b      	beq.n	80043b8 <UART_SetConfig+0x32c>
 80043a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a4:	d811      	bhi.n	80043ca <UART_SetConfig+0x33e>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <UART_SetConfig+0x326>
 80043aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ae:	d006      	beq.n	80043be <UART_SetConfig+0x332>
 80043b0:	e00b      	b.n	80043ca <UART_SetConfig+0x33e>
 80043b2:	2300      	movs	r3, #0
 80043b4:	77fb      	strb	r3, [r7, #31]
 80043b6:	e00d      	b.n	80043d4 <UART_SetConfig+0x348>
 80043b8:	2302      	movs	r3, #2
 80043ba:	77fb      	strb	r3, [r7, #31]
 80043bc:	e00a      	b.n	80043d4 <UART_SetConfig+0x348>
 80043be:	2304      	movs	r3, #4
 80043c0:	77fb      	strb	r3, [r7, #31]
 80043c2:	e007      	b.n	80043d4 <UART_SetConfig+0x348>
 80043c4:	2308      	movs	r3, #8
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	e004      	b.n	80043d4 <UART_SetConfig+0x348>
 80043ca:	2310      	movs	r3, #16
 80043cc:	77fb      	strb	r3, [r7, #31]
 80043ce:	e001      	b.n	80043d4 <UART_SetConfig+0x348>
 80043d0:	2310      	movs	r3, #16
 80043d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043dc:	d15b      	bne.n	8004496 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80043de:	7ffb      	ldrb	r3, [r7, #31]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d828      	bhi.n	8004436 <UART_SetConfig+0x3aa>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0x360>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004411 	.word	0x08004411
 80043f0:	08004419 	.word	0x08004419
 80043f4:	08004421 	.word	0x08004421
 80043f8:	08004437 	.word	0x08004437
 80043fc:	08004427 	.word	0x08004427
 8004400:	08004437 	.word	0x08004437
 8004404:	08004437 	.word	0x08004437
 8004408:	08004437 	.word	0x08004437
 800440c:	0800442f 	.word	0x0800442f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004410:	f7fd fd1e 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8004414:	61b8      	str	r0, [r7, #24]
        break;
 8004416:	e013      	b.n	8004440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004418:	f7fd fd2e 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 800441c:	61b8      	str	r0, [r7, #24]
        break;
 800441e:	e00f      	b.n	8004440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004420:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <UART_SetConfig+0x4c4>)
 8004422:	61bb      	str	r3, [r7, #24]
        break;
 8004424:	e00c      	b.n	8004440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004426:	f7fd fc41 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 800442a:	61b8      	str	r0, [r7, #24]
        break;
 800442c:	e008      	b.n	8004440 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004432:	61bb      	str	r3, [r7, #24]
        break;
 8004434:	e004      	b.n	8004440 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	77bb      	strb	r3, [r7, #30]
        break;
 800443e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d074      	beq.n	8004530 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	005a      	lsls	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	441a      	add	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b0f      	cmp	r3, #15
 8004460:	d916      	bls.n	8004490 <UART_SetConfig+0x404>
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d212      	bcs.n	8004490 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f023 030f 	bic.w	r3, r3, #15
 8004472:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	b29b      	uxth	r3, r3
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	b29a      	uxth	r2, r3
 8004480:	89fb      	ldrh	r3, [r7, #14]
 8004482:	4313      	orrs	r3, r2
 8004484:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	89fa      	ldrh	r2, [r7, #14]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	e04f      	b.n	8004530 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	77bb      	strb	r3, [r7, #30]
 8004494:	e04c      	b.n	8004530 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004496:	7ffb      	ldrb	r3, [r7, #31]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d828      	bhi.n	80044ee <UART_SetConfig+0x462>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <UART_SetConfig+0x418>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044d1 	.word	0x080044d1
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	080044ef 	.word	0x080044ef
 80044b4:	080044df 	.word	0x080044df
 80044b8:	080044ef 	.word	0x080044ef
 80044bc:	080044ef 	.word	0x080044ef
 80044c0:	080044ef 	.word	0x080044ef
 80044c4:	080044e7 	.word	0x080044e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c8:	f7fd fcc2 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 80044cc:	61b8      	str	r0, [r7, #24]
        break;
 80044ce:	e013      	b.n	80044f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d0:	f7fd fcd2 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 80044d4:	61b8      	str	r0, [r7, #24]
        break;
 80044d6:	e00f      	b.n	80044f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d8:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <UART_SetConfig+0x4c4>)
 80044da:	61bb      	str	r3, [r7, #24]
        break;
 80044dc:	e00c      	b.n	80044f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044de:	f7fd fbe5 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 80044e2:	61b8      	str	r0, [r7, #24]
        break;
 80044e4:	e008      	b.n	80044f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ea:	61bb      	str	r3, [r7, #24]
        break;
 80044ec:	e004      	b.n	80044f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	77bb      	strb	r3, [r7, #30]
        break;
 80044f6:	bf00      	nop
    }

    if (pclk != 0U)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d018      	beq.n	8004530 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	085a      	lsrs	r2, r3, #1
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	441a      	add	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b0f      	cmp	r3, #15
 8004516:	d909      	bls.n	800452c <UART_SetConfig+0x4a0>
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451e:	d205      	bcs.n	800452c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	e001      	b.n	8004530 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800453c:	7fbb      	ldrb	r3, [r7, #30]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40007c00 	.word	0x40007c00
 800454c:	40023800 	.word	0x40023800
 8004550:	00f42400 	.word	0x00f42400

08004554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01a      	beq.n	800466a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004652:	d10a      	bne.n	800466a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af02      	add	r7, sp, #8
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046a8:	f7fc fba6 	bl	8000df8 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d10e      	bne.n	80046da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f81b 	bl	8004706 <UART_WaitOnFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e011      	b.n	80046fe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b09c      	sub	sp, #112	; 0x70
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4613      	mov	r3, r2
 8004714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004716:	e0a7      	b.n	8004868 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800471e:	f000 80a3 	beq.w	8004868 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004722:	f7fc fb69 	bl	8000df8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800472e:	429a      	cmp	r2, r3
 8004730:	d302      	bcc.n	8004738 <UART_WaitOnFlagUntilTimeout+0x32>
 8004732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004734:	2b00      	cmp	r3, #0
 8004736:	d13f      	bne.n	80047b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004748:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800474c:	667b      	str	r3, [r7, #100]	; 0x64
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004758:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800475c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e6      	bne.n	8004738 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3308      	adds	r3, #8
 8004770:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	663b      	str	r3, [r7, #96]	; 0x60
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3308      	adds	r3, #8
 8004788:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800478a:	64ba      	str	r2, [r7, #72]	; 0x48
 800478c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e5      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e068      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d050      	beq.n	8004868 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d4:	d148      	bne.n	8004868 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004800:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e6      	bne.n	80047e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	613b      	str	r3, [r7, #16]
   return(result);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	66bb      	str	r3, [r7, #104]	; 0x68
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3308      	adds	r3, #8
 8004830:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004832:	623a      	str	r2, [r7, #32]
 8004834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	69f9      	ldr	r1, [r7, #28]
 8004838:	6a3a      	ldr	r2, [r7, #32]
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e5      	bne.n	8004812 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e010      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4013      	ands	r3, r2
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	429a      	cmp	r2, r3
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	429a      	cmp	r2, r3
 8004884:	f43f af48 	beq.w	8004718 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3770      	adds	r7, #112	; 0x70
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004892:	b480      	push	{r7}
 8004894:	b095      	sub	sp, #84	; 0x54
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b8:	643b      	str	r3, [r7, #64]	; 0x40
 80048ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e6      	bne.n	800489a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	61fb      	str	r3, [r7, #28]
   return(result);
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3308      	adds	r3, #8
 80048ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e5      	bne.n	80048cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	2b01      	cmp	r3, #1
 8004906:	d118      	bne.n	800493a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	60bb      	str	r3, [r7, #8]
   return(result);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f023 0310 	bic.w	r3, r3, #16
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6979      	ldr	r1, [r7, #20]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	613b      	str	r3, [r7, #16]
   return(result);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e6      	bne.n	8004908 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800494e:	bf00      	nop
 8004950:	3754      	adds	r7, #84	; 0x54
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f7ff fb71 	bl	8004060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004986:	b480      	push	{r7}
 8004988:	b08f      	sub	sp, #60	; 0x3c
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004992:	2b21      	cmp	r3, #33	; 0x21
 8004994:	d14c      	bne.n	8004a30 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d132      	bne.n	8004a08 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e6      	bne.n	80049a2 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6979      	ldr	r1, [r7, #20]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e6      	bne.n	80049d4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004a06:	e013      	b.n	8004a30 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0c:	781a      	ldrb	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004a30:	bf00      	nop
 8004a32:	373c      	adds	r7, #60	; 0x3c
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b091      	sub	sp, #68	; 0x44
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a48:	2b21      	cmp	r3, #33	; 0x21
 8004a4a:	d151      	bne.n	8004af0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d132      	bne.n	8004abe <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	623b      	str	r3, [r7, #32]
   return(result);
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	633b      	str	r3, [r7, #48]	; 0x30
 8004a78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a7e:	e841 2300 	strex	r3, r2, [r1]
 8004a82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1e6      	bne.n	8004a58 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	69b9      	ldr	r1, [r7, #24]
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e6      	bne.n	8004a8a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004abc:	e018      	b.n	8004af0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad8:	1c9a      	adds	r2, r3, #2
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004af0:	bf00      	nop
 8004af2:	3744      	adds	r7, #68	; 0x44
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	6979      	ldr	r1, [r7, #20]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e6      	bne.n	8004b04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff fa82 	bl	800404c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b48:	bf00      	nop
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <__errno>:
 8004b50:	4b01      	ldr	r3, [pc, #4]	; (8004b58 <__errno+0x8>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	2000000c 	.word	0x2000000c

08004b5c <__libc_init_array>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4d0d      	ldr	r5, [pc, #52]	; (8004b94 <__libc_init_array+0x38>)
 8004b60:	4c0d      	ldr	r4, [pc, #52]	; (8004b98 <__libc_init_array+0x3c>)
 8004b62:	1b64      	subs	r4, r4, r5
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	2600      	movs	r6, #0
 8004b68:	42a6      	cmp	r6, r4
 8004b6a:	d109      	bne.n	8004b80 <__libc_init_array+0x24>
 8004b6c:	4d0b      	ldr	r5, [pc, #44]	; (8004b9c <__libc_init_array+0x40>)
 8004b6e:	4c0c      	ldr	r4, [pc, #48]	; (8004ba0 <__libc_init_array+0x44>)
 8004b70:	f000 fc8e 	bl	8005490 <_init>
 8004b74:	1b64      	subs	r4, r4, r5
 8004b76:	10a4      	asrs	r4, r4, #2
 8004b78:	2600      	movs	r6, #0
 8004b7a:	42a6      	cmp	r6, r4
 8004b7c:	d105      	bne.n	8004b8a <__libc_init_array+0x2e>
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b84:	4798      	blx	r3
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7ee      	b.n	8004b68 <__libc_init_array+0xc>
 8004b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8e:	4798      	blx	r3
 8004b90:	3601      	adds	r6, #1
 8004b92:	e7f2      	b.n	8004b7a <__libc_init_array+0x1e>
 8004b94:	0800550c 	.word	0x0800550c
 8004b98:	0800550c 	.word	0x0800550c
 8004b9c:	0800550c 	.word	0x0800550c
 8004ba0:	08005510 	.word	0x08005510

08004ba4 <memset>:
 8004ba4:	4402      	add	r2, r0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d100      	bne.n	8004bae <memset+0xa>
 8004bac:	4770      	bx	lr
 8004bae:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb2:	e7f9      	b.n	8004ba8 <memset+0x4>

08004bb4 <siprintf>:
 8004bb4:	b40e      	push	{r1, r2, r3}
 8004bb6:	b500      	push	{lr}
 8004bb8:	b09c      	sub	sp, #112	; 0x70
 8004bba:	ab1d      	add	r3, sp, #116	; 0x74
 8004bbc:	9002      	str	r0, [sp, #8]
 8004bbe:	9006      	str	r0, [sp, #24]
 8004bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bc4:	4809      	ldr	r0, [pc, #36]	; (8004bec <siprintf+0x38>)
 8004bc6:	9107      	str	r1, [sp, #28]
 8004bc8:	9104      	str	r1, [sp, #16]
 8004bca:	4909      	ldr	r1, [pc, #36]	; (8004bf0 <siprintf+0x3c>)
 8004bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd0:	9105      	str	r1, [sp, #20]
 8004bd2:	6800      	ldr	r0, [r0, #0]
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	a902      	add	r1, sp, #8
 8004bd8:	f000 f868 	bl	8004cac <_svfiprintf_r>
 8004bdc:	9b02      	ldr	r3, [sp, #8]
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	b01c      	add	sp, #112	; 0x70
 8004be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be8:	b003      	add	sp, #12
 8004bea:	4770      	bx	lr
 8004bec:	2000000c 	.word	0x2000000c
 8004bf0:	ffff0208 	.word	0xffff0208

08004bf4 <__ssputs_r>:
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	688e      	ldr	r6, [r1, #8]
 8004bfa:	429e      	cmp	r6, r3
 8004bfc:	4682      	mov	sl, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	4690      	mov	r8, r2
 8004c02:	461f      	mov	r7, r3
 8004c04:	d838      	bhi.n	8004c78 <__ssputs_r+0x84>
 8004c06:	898a      	ldrh	r2, [r1, #12]
 8004c08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c0c:	d032      	beq.n	8004c74 <__ssputs_r+0x80>
 8004c0e:	6825      	ldr	r5, [r4, #0]
 8004c10:	6909      	ldr	r1, [r1, #16]
 8004c12:	eba5 0901 	sub.w	r9, r5, r1
 8004c16:	6965      	ldr	r5, [r4, #20]
 8004c18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c20:	3301      	adds	r3, #1
 8004c22:	444b      	add	r3, r9
 8004c24:	106d      	asrs	r5, r5, #1
 8004c26:	429d      	cmp	r5, r3
 8004c28:	bf38      	it	cc
 8004c2a:	461d      	movcc	r5, r3
 8004c2c:	0553      	lsls	r3, r2, #21
 8004c2e:	d531      	bpl.n	8004c94 <__ssputs_r+0xa0>
 8004c30:	4629      	mov	r1, r5
 8004c32:	f000 fb63 	bl	80052fc <_malloc_r>
 8004c36:	4606      	mov	r6, r0
 8004c38:	b950      	cbnz	r0, 8004c50 <__ssputs_r+0x5c>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	f8ca 3000 	str.w	r3, [sl]
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c46:	81a3      	strh	r3, [r4, #12]
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c50:	6921      	ldr	r1, [r4, #16]
 8004c52:	464a      	mov	r2, r9
 8004c54:	f000 fabe 	bl	80051d4 <memcpy>
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c62:	81a3      	strh	r3, [r4, #12]
 8004c64:	6126      	str	r6, [r4, #16]
 8004c66:	6165      	str	r5, [r4, #20]
 8004c68:	444e      	add	r6, r9
 8004c6a:	eba5 0509 	sub.w	r5, r5, r9
 8004c6e:	6026      	str	r6, [r4, #0]
 8004c70:	60a5      	str	r5, [r4, #8]
 8004c72:	463e      	mov	r6, r7
 8004c74:	42be      	cmp	r6, r7
 8004c76:	d900      	bls.n	8004c7a <__ssputs_r+0x86>
 8004c78:	463e      	mov	r6, r7
 8004c7a:	6820      	ldr	r0, [r4, #0]
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	4641      	mov	r1, r8
 8004c80:	f000 fab6 	bl	80051f0 <memmove>
 8004c84:	68a3      	ldr	r3, [r4, #8]
 8004c86:	1b9b      	subs	r3, r3, r6
 8004c88:	60a3      	str	r3, [r4, #8]
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	4433      	add	r3, r6
 8004c8e:	6023      	str	r3, [r4, #0]
 8004c90:	2000      	movs	r0, #0
 8004c92:	e7db      	b.n	8004c4c <__ssputs_r+0x58>
 8004c94:	462a      	mov	r2, r5
 8004c96:	f000 fba5 	bl	80053e4 <_realloc_r>
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d1e1      	bne.n	8004c64 <__ssputs_r+0x70>
 8004ca0:	6921      	ldr	r1, [r4, #16]
 8004ca2:	4650      	mov	r0, sl
 8004ca4:	f000 fabe 	bl	8005224 <_free_r>
 8004ca8:	e7c7      	b.n	8004c3a <__ssputs_r+0x46>
	...

08004cac <_svfiprintf_r>:
 8004cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb0:	4698      	mov	r8, r3
 8004cb2:	898b      	ldrh	r3, [r1, #12]
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	b09d      	sub	sp, #116	; 0x74
 8004cb8:	4607      	mov	r7, r0
 8004cba:	460d      	mov	r5, r1
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	d50e      	bpl.n	8004cde <_svfiprintf_r+0x32>
 8004cc0:	690b      	ldr	r3, [r1, #16]
 8004cc2:	b963      	cbnz	r3, 8004cde <_svfiprintf_r+0x32>
 8004cc4:	2140      	movs	r1, #64	; 0x40
 8004cc6:	f000 fb19 	bl	80052fc <_malloc_r>
 8004cca:	6028      	str	r0, [r5, #0]
 8004ccc:	6128      	str	r0, [r5, #16]
 8004cce:	b920      	cbnz	r0, 8004cda <_svfiprintf_r+0x2e>
 8004cd0:	230c      	movs	r3, #12
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cd8:	e0d1      	b.n	8004e7e <_svfiprintf_r+0x1d2>
 8004cda:	2340      	movs	r3, #64	; 0x40
 8004cdc:	616b      	str	r3, [r5, #20]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ce8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cec:	2330      	movs	r3, #48	; 0x30
 8004cee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e98 <_svfiprintf_r+0x1ec>
 8004cf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cf6:	f04f 0901 	mov.w	r9, #1
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	469a      	mov	sl, r3
 8004cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d02:	b10a      	cbz	r2, 8004d08 <_svfiprintf_r+0x5c>
 8004d04:	2a25      	cmp	r2, #37	; 0x25
 8004d06:	d1f9      	bne.n	8004cfc <_svfiprintf_r+0x50>
 8004d08:	ebba 0b04 	subs.w	fp, sl, r4
 8004d0c:	d00b      	beq.n	8004d26 <_svfiprintf_r+0x7a>
 8004d0e:	465b      	mov	r3, fp
 8004d10:	4622      	mov	r2, r4
 8004d12:	4629      	mov	r1, r5
 8004d14:	4638      	mov	r0, r7
 8004d16:	f7ff ff6d 	bl	8004bf4 <__ssputs_r>
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f000 80aa 	beq.w	8004e74 <_svfiprintf_r+0x1c8>
 8004d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d22:	445a      	add	r2, fp
 8004d24:	9209      	str	r2, [sp, #36]	; 0x24
 8004d26:	f89a 3000 	ldrb.w	r3, [sl]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80a2 	beq.w	8004e74 <_svfiprintf_r+0x1c8>
 8004d30:	2300      	movs	r3, #0
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d3a:	f10a 0a01 	add.w	sl, sl, #1
 8004d3e:	9304      	str	r3, [sp, #16]
 8004d40:	9307      	str	r3, [sp, #28]
 8004d42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d46:	931a      	str	r3, [sp, #104]	; 0x68
 8004d48:	4654      	mov	r4, sl
 8004d4a:	2205      	movs	r2, #5
 8004d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d50:	4851      	ldr	r0, [pc, #324]	; (8004e98 <_svfiprintf_r+0x1ec>)
 8004d52:	f7fb fa65 	bl	8000220 <memchr>
 8004d56:	9a04      	ldr	r2, [sp, #16]
 8004d58:	b9d8      	cbnz	r0, 8004d92 <_svfiprintf_r+0xe6>
 8004d5a:	06d0      	lsls	r0, r2, #27
 8004d5c:	bf44      	itt	mi
 8004d5e:	2320      	movmi	r3, #32
 8004d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d64:	0711      	lsls	r1, r2, #28
 8004d66:	bf44      	itt	mi
 8004d68:	232b      	movmi	r3, #43	; 0x2b
 8004d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d72:	2b2a      	cmp	r3, #42	; 0x2a
 8004d74:	d015      	beq.n	8004da2 <_svfiprintf_r+0xf6>
 8004d76:	9a07      	ldr	r2, [sp, #28]
 8004d78:	4654      	mov	r4, sl
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f04f 0c0a 	mov.w	ip, #10
 8004d80:	4621      	mov	r1, r4
 8004d82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d86:	3b30      	subs	r3, #48	; 0x30
 8004d88:	2b09      	cmp	r3, #9
 8004d8a:	d94e      	bls.n	8004e2a <_svfiprintf_r+0x17e>
 8004d8c:	b1b0      	cbz	r0, 8004dbc <_svfiprintf_r+0x110>
 8004d8e:	9207      	str	r2, [sp, #28]
 8004d90:	e014      	b.n	8004dbc <_svfiprintf_r+0x110>
 8004d92:	eba0 0308 	sub.w	r3, r0, r8
 8004d96:	fa09 f303 	lsl.w	r3, r9, r3
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	9304      	str	r3, [sp, #16]
 8004d9e:	46a2      	mov	sl, r4
 8004da0:	e7d2      	b.n	8004d48 <_svfiprintf_r+0x9c>
 8004da2:	9b03      	ldr	r3, [sp, #12]
 8004da4:	1d19      	adds	r1, r3, #4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	9103      	str	r1, [sp, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bfbb      	ittet	lt
 8004dae:	425b      	neglt	r3, r3
 8004db0:	f042 0202 	orrlt.w	r2, r2, #2
 8004db4:	9307      	strge	r3, [sp, #28]
 8004db6:	9307      	strlt	r3, [sp, #28]
 8004db8:	bfb8      	it	lt
 8004dba:	9204      	strlt	r2, [sp, #16]
 8004dbc:	7823      	ldrb	r3, [r4, #0]
 8004dbe:	2b2e      	cmp	r3, #46	; 0x2e
 8004dc0:	d10c      	bne.n	8004ddc <_svfiprintf_r+0x130>
 8004dc2:	7863      	ldrb	r3, [r4, #1]
 8004dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004dc6:	d135      	bne.n	8004e34 <_svfiprintf_r+0x188>
 8004dc8:	9b03      	ldr	r3, [sp, #12]
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	9203      	str	r2, [sp, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bfb8      	it	lt
 8004dd4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004dd8:	3402      	adds	r4, #2
 8004dda:	9305      	str	r3, [sp, #20]
 8004ddc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ea8 <_svfiprintf_r+0x1fc>
 8004de0:	7821      	ldrb	r1, [r4, #0]
 8004de2:	2203      	movs	r2, #3
 8004de4:	4650      	mov	r0, sl
 8004de6:	f7fb fa1b 	bl	8000220 <memchr>
 8004dea:	b140      	cbz	r0, 8004dfe <_svfiprintf_r+0x152>
 8004dec:	2340      	movs	r3, #64	; 0x40
 8004dee:	eba0 000a 	sub.w	r0, r0, sl
 8004df2:	fa03 f000 	lsl.w	r0, r3, r0
 8004df6:	9b04      	ldr	r3, [sp, #16]
 8004df8:	4303      	orrs	r3, r0
 8004dfa:	3401      	adds	r4, #1
 8004dfc:	9304      	str	r3, [sp, #16]
 8004dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e02:	4826      	ldr	r0, [pc, #152]	; (8004e9c <_svfiprintf_r+0x1f0>)
 8004e04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e08:	2206      	movs	r2, #6
 8004e0a:	f7fb fa09 	bl	8000220 <memchr>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d038      	beq.n	8004e84 <_svfiprintf_r+0x1d8>
 8004e12:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <_svfiprintf_r+0x1f4>)
 8004e14:	bb1b      	cbnz	r3, 8004e5e <_svfiprintf_r+0x1b2>
 8004e16:	9b03      	ldr	r3, [sp, #12]
 8004e18:	3307      	adds	r3, #7
 8004e1a:	f023 0307 	bic.w	r3, r3, #7
 8004e1e:	3308      	adds	r3, #8
 8004e20:	9303      	str	r3, [sp, #12]
 8004e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e24:	4433      	add	r3, r6
 8004e26:	9309      	str	r3, [sp, #36]	; 0x24
 8004e28:	e767      	b.n	8004cfa <_svfiprintf_r+0x4e>
 8004e2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e2e:	460c      	mov	r4, r1
 8004e30:	2001      	movs	r0, #1
 8004e32:	e7a5      	b.n	8004d80 <_svfiprintf_r+0xd4>
 8004e34:	2300      	movs	r3, #0
 8004e36:	3401      	adds	r4, #1
 8004e38:	9305      	str	r3, [sp, #20]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f04f 0c0a 	mov.w	ip, #10
 8004e40:	4620      	mov	r0, r4
 8004e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e46:	3a30      	subs	r2, #48	; 0x30
 8004e48:	2a09      	cmp	r2, #9
 8004e4a:	d903      	bls.n	8004e54 <_svfiprintf_r+0x1a8>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0c5      	beq.n	8004ddc <_svfiprintf_r+0x130>
 8004e50:	9105      	str	r1, [sp, #20]
 8004e52:	e7c3      	b.n	8004ddc <_svfiprintf_r+0x130>
 8004e54:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e58:	4604      	mov	r4, r0
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e7f0      	b.n	8004e40 <_svfiprintf_r+0x194>
 8004e5e:	ab03      	add	r3, sp, #12
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	462a      	mov	r2, r5
 8004e64:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <_svfiprintf_r+0x1f8>)
 8004e66:	a904      	add	r1, sp, #16
 8004e68:	4638      	mov	r0, r7
 8004e6a:	f3af 8000 	nop.w
 8004e6e:	1c42      	adds	r2, r0, #1
 8004e70:	4606      	mov	r6, r0
 8004e72:	d1d6      	bne.n	8004e22 <_svfiprintf_r+0x176>
 8004e74:	89ab      	ldrh	r3, [r5, #12]
 8004e76:	065b      	lsls	r3, r3, #25
 8004e78:	f53f af2c 	bmi.w	8004cd4 <_svfiprintf_r+0x28>
 8004e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e7e:	b01d      	add	sp, #116	; 0x74
 8004e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e84:	ab03      	add	r3, sp, #12
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	462a      	mov	r2, r5
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <_svfiprintf_r+0x1f8>)
 8004e8c:	a904      	add	r1, sp, #16
 8004e8e:	4638      	mov	r0, r7
 8004e90:	f000 f87a 	bl	8004f88 <_printf_i>
 8004e94:	e7eb      	b.n	8004e6e <_svfiprintf_r+0x1c2>
 8004e96:	bf00      	nop
 8004e98:	080054d0 	.word	0x080054d0
 8004e9c:	080054da 	.word	0x080054da
 8004ea0:	00000000 	.word	0x00000000
 8004ea4:	08004bf5 	.word	0x08004bf5
 8004ea8:	080054d6 	.word	0x080054d6

08004eac <_printf_common>:
 8004eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb0:	4616      	mov	r6, r2
 8004eb2:	4699      	mov	r9, r3
 8004eb4:	688a      	ldr	r2, [r1, #8]
 8004eb6:	690b      	ldr	r3, [r1, #16]
 8004eb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	bfb8      	it	lt
 8004ec0:	4613      	movlt	r3, r2
 8004ec2:	6033      	str	r3, [r6, #0]
 8004ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ec8:	4607      	mov	r7, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	b10a      	cbz	r2, 8004ed2 <_printf_common+0x26>
 8004ece:	3301      	adds	r3, #1
 8004ed0:	6033      	str	r3, [r6, #0]
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	0699      	lsls	r1, r3, #26
 8004ed6:	bf42      	ittt	mi
 8004ed8:	6833      	ldrmi	r3, [r6, #0]
 8004eda:	3302      	addmi	r3, #2
 8004edc:	6033      	strmi	r3, [r6, #0]
 8004ede:	6825      	ldr	r5, [r4, #0]
 8004ee0:	f015 0506 	ands.w	r5, r5, #6
 8004ee4:	d106      	bne.n	8004ef4 <_printf_common+0x48>
 8004ee6:	f104 0a19 	add.w	sl, r4, #25
 8004eea:	68e3      	ldr	r3, [r4, #12]
 8004eec:	6832      	ldr	r2, [r6, #0]
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	42ab      	cmp	r3, r5
 8004ef2:	dc26      	bgt.n	8004f42 <_printf_common+0x96>
 8004ef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ef8:	1e13      	subs	r3, r2, #0
 8004efa:	6822      	ldr	r2, [r4, #0]
 8004efc:	bf18      	it	ne
 8004efe:	2301      	movne	r3, #1
 8004f00:	0692      	lsls	r2, r2, #26
 8004f02:	d42b      	bmi.n	8004f5c <_printf_common+0xb0>
 8004f04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f08:	4649      	mov	r1, r9
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	47c0      	blx	r8
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d01e      	beq.n	8004f50 <_printf_common+0xa4>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	68e5      	ldr	r5, [r4, #12]
 8004f16:	6832      	ldr	r2, [r6, #0]
 8004f18:	f003 0306 	and.w	r3, r3, #6
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	bf08      	it	eq
 8004f20:	1aad      	subeq	r5, r5, r2
 8004f22:	68a3      	ldr	r3, [r4, #8]
 8004f24:	6922      	ldr	r2, [r4, #16]
 8004f26:	bf0c      	ite	eq
 8004f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f2c:	2500      	movne	r5, #0
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	bfc4      	itt	gt
 8004f32:	1a9b      	subgt	r3, r3, r2
 8004f34:	18ed      	addgt	r5, r5, r3
 8004f36:	2600      	movs	r6, #0
 8004f38:	341a      	adds	r4, #26
 8004f3a:	42b5      	cmp	r5, r6
 8004f3c:	d11a      	bne.n	8004f74 <_printf_common+0xc8>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	e008      	b.n	8004f54 <_printf_common+0xa8>
 8004f42:	2301      	movs	r3, #1
 8004f44:	4652      	mov	r2, sl
 8004f46:	4649      	mov	r1, r9
 8004f48:	4638      	mov	r0, r7
 8004f4a:	47c0      	blx	r8
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d103      	bne.n	8004f58 <_printf_common+0xac>
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f58:	3501      	adds	r5, #1
 8004f5a:	e7c6      	b.n	8004eea <_printf_common+0x3e>
 8004f5c:	18e1      	adds	r1, r4, r3
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	2030      	movs	r0, #48	; 0x30
 8004f62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f66:	4422      	add	r2, r4
 8004f68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f70:	3302      	adds	r3, #2
 8004f72:	e7c7      	b.n	8004f04 <_printf_common+0x58>
 8004f74:	2301      	movs	r3, #1
 8004f76:	4622      	mov	r2, r4
 8004f78:	4649      	mov	r1, r9
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	47c0      	blx	r8
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d0e6      	beq.n	8004f50 <_printf_common+0xa4>
 8004f82:	3601      	adds	r6, #1
 8004f84:	e7d9      	b.n	8004f3a <_printf_common+0x8e>
	...

08004f88 <_printf_i>:
 8004f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	7e0f      	ldrb	r7, [r1, #24]
 8004f8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f90:	2f78      	cmp	r7, #120	; 0x78
 8004f92:	4691      	mov	r9, r2
 8004f94:	4680      	mov	r8, r0
 8004f96:	460c      	mov	r4, r1
 8004f98:	469a      	mov	sl, r3
 8004f9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f9e:	d807      	bhi.n	8004fb0 <_printf_i+0x28>
 8004fa0:	2f62      	cmp	r7, #98	; 0x62
 8004fa2:	d80a      	bhi.n	8004fba <_printf_i+0x32>
 8004fa4:	2f00      	cmp	r7, #0
 8004fa6:	f000 80d8 	beq.w	800515a <_printf_i+0x1d2>
 8004faa:	2f58      	cmp	r7, #88	; 0x58
 8004fac:	f000 80a3 	beq.w	80050f6 <_printf_i+0x16e>
 8004fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fb8:	e03a      	b.n	8005030 <_printf_i+0xa8>
 8004fba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fbe:	2b15      	cmp	r3, #21
 8004fc0:	d8f6      	bhi.n	8004fb0 <_printf_i+0x28>
 8004fc2:	a101      	add	r1, pc, #4	; (adr r1, 8004fc8 <_printf_i+0x40>)
 8004fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fc8:	08005021 	.word	0x08005021
 8004fcc:	08005035 	.word	0x08005035
 8004fd0:	08004fb1 	.word	0x08004fb1
 8004fd4:	08004fb1 	.word	0x08004fb1
 8004fd8:	08004fb1 	.word	0x08004fb1
 8004fdc:	08004fb1 	.word	0x08004fb1
 8004fe0:	08005035 	.word	0x08005035
 8004fe4:	08004fb1 	.word	0x08004fb1
 8004fe8:	08004fb1 	.word	0x08004fb1
 8004fec:	08004fb1 	.word	0x08004fb1
 8004ff0:	08004fb1 	.word	0x08004fb1
 8004ff4:	08005141 	.word	0x08005141
 8004ff8:	08005065 	.word	0x08005065
 8004ffc:	08005123 	.word	0x08005123
 8005000:	08004fb1 	.word	0x08004fb1
 8005004:	08004fb1 	.word	0x08004fb1
 8005008:	08005163 	.word	0x08005163
 800500c:	08004fb1 	.word	0x08004fb1
 8005010:	08005065 	.word	0x08005065
 8005014:	08004fb1 	.word	0x08004fb1
 8005018:	08004fb1 	.word	0x08004fb1
 800501c:	0800512b 	.word	0x0800512b
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	1d1a      	adds	r2, r3, #4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	602a      	str	r2, [r5, #0]
 8005028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800502c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005030:	2301      	movs	r3, #1
 8005032:	e0a3      	b.n	800517c <_printf_i+0x1f4>
 8005034:	6820      	ldr	r0, [r4, #0]
 8005036:	6829      	ldr	r1, [r5, #0]
 8005038:	0606      	lsls	r6, r0, #24
 800503a:	f101 0304 	add.w	r3, r1, #4
 800503e:	d50a      	bpl.n	8005056 <_printf_i+0xce>
 8005040:	680e      	ldr	r6, [r1, #0]
 8005042:	602b      	str	r3, [r5, #0]
 8005044:	2e00      	cmp	r6, #0
 8005046:	da03      	bge.n	8005050 <_printf_i+0xc8>
 8005048:	232d      	movs	r3, #45	; 0x2d
 800504a:	4276      	negs	r6, r6
 800504c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005050:	485e      	ldr	r0, [pc, #376]	; (80051cc <_printf_i+0x244>)
 8005052:	230a      	movs	r3, #10
 8005054:	e019      	b.n	800508a <_printf_i+0x102>
 8005056:	680e      	ldr	r6, [r1, #0]
 8005058:	602b      	str	r3, [r5, #0]
 800505a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800505e:	bf18      	it	ne
 8005060:	b236      	sxthne	r6, r6
 8005062:	e7ef      	b.n	8005044 <_printf_i+0xbc>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	1d19      	adds	r1, r3, #4
 800506a:	6029      	str	r1, [r5, #0]
 800506c:	0601      	lsls	r1, r0, #24
 800506e:	d501      	bpl.n	8005074 <_printf_i+0xec>
 8005070:	681e      	ldr	r6, [r3, #0]
 8005072:	e002      	b.n	800507a <_printf_i+0xf2>
 8005074:	0646      	lsls	r6, r0, #25
 8005076:	d5fb      	bpl.n	8005070 <_printf_i+0xe8>
 8005078:	881e      	ldrh	r6, [r3, #0]
 800507a:	4854      	ldr	r0, [pc, #336]	; (80051cc <_printf_i+0x244>)
 800507c:	2f6f      	cmp	r7, #111	; 0x6f
 800507e:	bf0c      	ite	eq
 8005080:	2308      	moveq	r3, #8
 8005082:	230a      	movne	r3, #10
 8005084:	2100      	movs	r1, #0
 8005086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800508a:	6865      	ldr	r5, [r4, #4]
 800508c:	60a5      	str	r5, [r4, #8]
 800508e:	2d00      	cmp	r5, #0
 8005090:	bfa2      	ittt	ge
 8005092:	6821      	ldrge	r1, [r4, #0]
 8005094:	f021 0104 	bicge.w	r1, r1, #4
 8005098:	6021      	strge	r1, [r4, #0]
 800509a:	b90e      	cbnz	r6, 80050a0 <_printf_i+0x118>
 800509c:	2d00      	cmp	r5, #0
 800509e:	d04d      	beq.n	800513c <_printf_i+0x1b4>
 80050a0:	4615      	mov	r5, r2
 80050a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80050a6:	fb03 6711 	mls	r7, r3, r1, r6
 80050aa:	5dc7      	ldrb	r7, [r0, r7]
 80050ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050b0:	4637      	mov	r7, r6
 80050b2:	42bb      	cmp	r3, r7
 80050b4:	460e      	mov	r6, r1
 80050b6:	d9f4      	bls.n	80050a2 <_printf_i+0x11a>
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d10b      	bne.n	80050d4 <_printf_i+0x14c>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	07de      	lsls	r6, r3, #31
 80050c0:	d508      	bpl.n	80050d4 <_printf_i+0x14c>
 80050c2:	6923      	ldr	r3, [r4, #16]
 80050c4:	6861      	ldr	r1, [r4, #4]
 80050c6:	4299      	cmp	r1, r3
 80050c8:	bfde      	ittt	le
 80050ca:	2330      	movle	r3, #48	; 0x30
 80050cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050d4:	1b52      	subs	r2, r2, r5
 80050d6:	6122      	str	r2, [r4, #16]
 80050d8:	f8cd a000 	str.w	sl, [sp]
 80050dc:	464b      	mov	r3, r9
 80050de:	aa03      	add	r2, sp, #12
 80050e0:	4621      	mov	r1, r4
 80050e2:	4640      	mov	r0, r8
 80050e4:	f7ff fee2 	bl	8004eac <_printf_common>
 80050e8:	3001      	adds	r0, #1
 80050ea:	d14c      	bne.n	8005186 <_printf_i+0x1fe>
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050f0:	b004      	add	sp, #16
 80050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f6:	4835      	ldr	r0, [pc, #212]	; (80051cc <_printf_i+0x244>)
 80050f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050fc:	6829      	ldr	r1, [r5, #0]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	f851 6b04 	ldr.w	r6, [r1], #4
 8005104:	6029      	str	r1, [r5, #0]
 8005106:	061d      	lsls	r5, r3, #24
 8005108:	d514      	bpl.n	8005134 <_printf_i+0x1ac>
 800510a:	07df      	lsls	r7, r3, #31
 800510c:	bf44      	itt	mi
 800510e:	f043 0320 	orrmi.w	r3, r3, #32
 8005112:	6023      	strmi	r3, [r4, #0]
 8005114:	b91e      	cbnz	r6, 800511e <_printf_i+0x196>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	f023 0320 	bic.w	r3, r3, #32
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	2310      	movs	r3, #16
 8005120:	e7b0      	b.n	8005084 <_printf_i+0xfc>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	f043 0320 	orr.w	r3, r3, #32
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	2378      	movs	r3, #120	; 0x78
 800512c:	4828      	ldr	r0, [pc, #160]	; (80051d0 <_printf_i+0x248>)
 800512e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005132:	e7e3      	b.n	80050fc <_printf_i+0x174>
 8005134:	0659      	lsls	r1, r3, #25
 8005136:	bf48      	it	mi
 8005138:	b2b6      	uxthmi	r6, r6
 800513a:	e7e6      	b.n	800510a <_printf_i+0x182>
 800513c:	4615      	mov	r5, r2
 800513e:	e7bb      	b.n	80050b8 <_printf_i+0x130>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	6826      	ldr	r6, [r4, #0]
 8005144:	6961      	ldr	r1, [r4, #20]
 8005146:	1d18      	adds	r0, r3, #4
 8005148:	6028      	str	r0, [r5, #0]
 800514a:	0635      	lsls	r5, r6, #24
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	d501      	bpl.n	8005154 <_printf_i+0x1cc>
 8005150:	6019      	str	r1, [r3, #0]
 8005152:	e002      	b.n	800515a <_printf_i+0x1d2>
 8005154:	0670      	lsls	r0, r6, #25
 8005156:	d5fb      	bpl.n	8005150 <_printf_i+0x1c8>
 8005158:	8019      	strh	r1, [r3, #0]
 800515a:	2300      	movs	r3, #0
 800515c:	6123      	str	r3, [r4, #16]
 800515e:	4615      	mov	r5, r2
 8005160:	e7ba      	b.n	80050d8 <_printf_i+0x150>
 8005162:	682b      	ldr	r3, [r5, #0]
 8005164:	1d1a      	adds	r2, r3, #4
 8005166:	602a      	str	r2, [r5, #0]
 8005168:	681d      	ldr	r5, [r3, #0]
 800516a:	6862      	ldr	r2, [r4, #4]
 800516c:	2100      	movs	r1, #0
 800516e:	4628      	mov	r0, r5
 8005170:	f7fb f856 	bl	8000220 <memchr>
 8005174:	b108      	cbz	r0, 800517a <_printf_i+0x1f2>
 8005176:	1b40      	subs	r0, r0, r5
 8005178:	6060      	str	r0, [r4, #4]
 800517a:	6863      	ldr	r3, [r4, #4]
 800517c:	6123      	str	r3, [r4, #16]
 800517e:	2300      	movs	r3, #0
 8005180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005184:	e7a8      	b.n	80050d8 <_printf_i+0x150>
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	462a      	mov	r2, r5
 800518a:	4649      	mov	r1, r9
 800518c:	4640      	mov	r0, r8
 800518e:	47d0      	blx	sl
 8005190:	3001      	adds	r0, #1
 8005192:	d0ab      	beq.n	80050ec <_printf_i+0x164>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	079b      	lsls	r3, r3, #30
 8005198:	d413      	bmi.n	80051c2 <_printf_i+0x23a>
 800519a:	68e0      	ldr	r0, [r4, #12]
 800519c:	9b03      	ldr	r3, [sp, #12]
 800519e:	4298      	cmp	r0, r3
 80051a0:	bfb8      	it	lt
 80051a2:	4618      	movlt	r0, r3
 80051a4:	e7a4      	b.n	80050f0 <_printf_i+0x168>
 80051a6:	2301      	movs	r3, #1
 80051a8:	4632      	mov	r2, r6
 80051aa:	4649      	mov	r1, r9
 80051ac:	4640      	mov	r0, r8
 80051ae:	47d0      	blx	sl
 80051b0:	3001      	adds	r0, #1
 80051b2:	d09b      	beq.n	80050ec <_printf_i+0x164>
 80051b4:	3501      	adds	r5, #1
 80051b6:	68e3      	ldr	r3, [r4, #12]
 80051b8:	9903      	ldr	r1, [sp, #12]
 80051ba:	1a5b      	subs	r3, r3, r1
 80051bc:	42ab      	cmp	r3, r5
 80051be:	dcf2      	bgt.n	80051a6 <_printf_i+0x21e>
 80051c0:	e7eb      	b.n	800519a <_printf_i+0x212>
 80051c2:	2500      	movs	r5, #0
 80051c4:	f104 0619 	add.w	r6, r4, #25
 80051c8:	e7f5      	b.n	80051b6 <_printf_i+0x22e>
 80051ca:	bf00      	nop
 80051cc:	080054e1 	.word	0x080054e1
 80051d0:	080054f2 	.word	0x080054f2

080051d4 <memcpy>:
 80051d4:	440a      	add	r2, r1
 80051d6:	4291      	cmp	r1, r2
 80051d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80051dc:	d100      	bne.n	80051e0 <memcpy+0xc>
 80051de:	4770      	bx	lr
 80051e0:	b510      	push	{r4, lr}
 80051e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051ea:	4291      	cmp	r1, r2
 80051ec:	d1f9      	bne.n	80051e2 <memcpy+0xe>
 80051ee:	bd10      	pop	{r4, pc}

080051f0 <memmove>:
 80051f0:	4288      	cmp	r0, r1
 80051f2:	b510      	push	{r4, lr}
 80051f4:	eb01 0402 	add.w	r4, r1, r2
 80051f8:	d902      	bls.n	8005200 <memmove+0x10>
 80051fa:	4284      	cmp	r4, r0
 80051fc:	4623      	mov	r3, r4
 80051fe:	d807      	bhi.n	8005210 <memmove+0x20>
 8005200:	1e43      	subs	r3, r0, #1
 8005202:	42a1      	cmp	r1, r4
 8005204:	d008      	beq.n	8005218 <memmove+0x28>
 8005206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800520a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800520e:	e7f8      	b.n	8005202 <memmove+0x12>
 8005210:	4402      	add	r2, r0
 8005212:	4601      	mov	r1, r0
 8005214:	428a      	cmp	r2, r1
 8005216:	d100      	bne.n	800521a <memmove+0x2a>
 8005218:	bd10      	pop	{r4, pc}
 800521a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800521e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005222:	e7f7      	b.n	8005214 <memmove+0x24>

08005224 <_free_r>:
 8005224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005226:	2900      	cmp	r1, #0
 8005228:	d044      	beq.n	80052b4 <_free_r+0x90>
 800522a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522e:	9001      	str	r0, [sp, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f1a1 0404 	sub.w	r4, r1, #4
 8005236:	bfb8      	it	lt
 8005238:	18e4      	addlt	r4, r4, r3
 800523a:	f000 f913 	bl	8005464 <__malloc_lock>
 800523e:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <_free_r+0x94>)
 8005240:	9801      	ldr	r0, [sp, #4]
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	b933      	cbnz	r3, 8005254 <_free_r+0x30>
 8005246:	6063      	str	r3, [r4, #4]
 8005248:	6014      	str	r4, [r2, #0]
 800524a:	b003      	add	sp, #12
 800524c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005250:	f000 b90e 	b.w	8005470 <__malloc_unlock>
 8005254:	42a3      	cmp	r3, r4
 8005256:	d908      	bls.n	800526a <_free_r+0x46>
 8005258:	6825      	ldr	r5, [r4, #0]
 800525a:	1961      	adds	r1, r4, r5
 800525c:	428b      	cmp	r3, r1
 800525e:	bf01      	itttt	eq
 8005260:	6819      	ldreq	r1, [r3, #0]
 8005262:	685b      	ldreq	r3, [r3, #4]
 8005264:	1949      	addeq	r1, r1, r5
 8005266:	6021      	streq	r1, [r4, #0]
 8005268:	e7ed      	b.n	8005246 <_free_r+0x22>
 800526a:	461a      	mov	r2, r3
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b10b      	cbz	r3, 8005274 <_free_r+0x50>
 8005270:	42a3      	cmp	r3, r4
 8005272:	d9fa      	bls.n	800526a <_free_r+0x46>
 8005274:	6811      	ldr	r1, [r2, #0]
 8005276:	1855      	adds	r5, r2, r1
 8005278:	42a5      	cmp	r5, r4
 800527a:	d10b      	bne.n	8005294 <_free_r+0x70>
 800527c:	6824      	ldr	r4, [r4, #0]
 800527e:	4421      	add	r1, r4
 8005280:	1854      	adds	r4, r2, r1
 8005282:	42a3      	cmp	r3, r4
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	d1e0      	bne.n	800524a <_free_r+0x26>
 8005288:	681c      	ldr	r4, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	6053      	str	r3, [r2, #4]
 800528e:	4421      	add	r1, r4
 8005290:	6011      	str	r1, [r2, #0]
 8005292:	e7da      	b.n	800524a <_free_r+0x26>
 8005294:	d902      	bls.n	800529c <_free_r+0x78>
 8005296:	230c      	movs	r3, #12
 8005298:	6003      	str	r3, [r0, #0]
 800529a:	e7d6      	b.n	800524a <_free_r+0x26>
 800529c:	6825      	ldr	r5, [r4, #0]
 800529e:	1961      	adds	r1, r4, r5
 80052a0:	428b      	cmp	r3, r1
 80052a2:	bf04      	itt	eq
 80052a4:	6819      	ldreq	r1, [r3, #0]
 80052a6:	685b      	ldreq	r3, [r3, #4]
 80052a8:	6063      	str	r3, [r4, #4]
 80052aa:	bf04      	itt	eq
 80052ac:	1949      	addeq	r1, r1, r5
 80052ae:	6021      	streq	r1, [r4, #0]
 80052b0:	6054      	str	r4, [r2, #4]
 80052b2:	e7ca      	b.n	800524a <_free_r+0x26>
 80052b4:	b003      	add	sp, #12
 80052b6:	bd30      	pop	{r4, r5, pc}
 80052b8:	200001b0 	.word	0x200001b0

080052bc <sbrk_aligned>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4e0e      	ldr	r6, [pc, #56]	; (80052f8 <sbrk_aligned+0x3c>)
 80052c0:	460c      	mov	r4, r1
 80052c2:	6831      	ldr	r1, [r6, #0]
 80052c4:	4605      	mov	r5, r0
 80052c6:	b911      	cbnz	r1, 80052ce <sbrk_aligned+0x12>
 80052c8:	f000 f8bc 	bl	8005444 <_sbrk_r>
 80052cc:	6030      	str	r0, [r6, #0]
 80052ce:	4621      	mov	r1, r4
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 f8b7 	bl	8005444 <_sbrk_r>
 80052d6:	1c43      	adds	r3, r0, #1
 80052d8:	d00a      	beq.n	80052f0 <sbrk_aligned+0x34>
 80052da:	1cc4      	adds	r4, r0, #3
 80052dc:	f024 0403 	bic.w	r4, r4, #3
 80052e0:	42a0      	cmp	r0, r4
 80052e2:	d007      	beq.n	80052f4 <sbrk_aligned+0x38>
 80052e4:	1a21      	subs	r1, r4, r0
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 f8ac 	bl	8005444 <_sbrk_r>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d101      	bne.n	80052f4 <sbrk_aligned+0x38>
 80052f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80052f4:	4620      	mov	r0, r4
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	200001b4 	.word	0x200001b4

080052fc <_malloc_r>:
 80052fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005300:	1ccd      	adds	r5, r1, #3
 8005302:	f025 0503 	bic.w	r5, r5, #3
 8005306:	3508      	adds	r5, #8
 8005308:	2d0c      	cmp	r5, #12
 800530a:	bf38      	it	cc
 800530c:	250c      	movcc	r5, #12
 800530e:	2d00      	cmp	r5, #0
 8005310:	4607      	mov	r7, r0
 8005312:	db01      	blt.n	8005318 <_malloc_r+0x1c>
 8005314:	42a9      	cmp	r1, r5
 8005316:	d905      	bls.n	8005324 <_malloc_r+0x28>
 8005318:	230c      	movs	r3, #12
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	2600      	movs	r6, #0
 800531e:	4630      	mov	r0, r6
 8005320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005324:	4e2e      	ldr	r6, [pc, #184]	; (80053e0 <_malloc_r+0xe4>)
 8005326:	f000 f89d 	bl	8005464 <__malloc_lock>
 800532a:	6833      	ldr	r3, [r6, #0]
 800532c:	461c      	mov	r4, r3
 800532e:	bb34      	cbnz	r4, 800537e <_malloc_r+0x82>
 8005330:	4629      	mov	r1, r5
 8005332:	4638      	mov	r0, r7
 8005334:	f7ff ffc2 	bl	80052bc <sbrk_aligned>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	4604      	mov	r4, r0
 800533c:	d14d      	bne.n	80053da <_malloc_r+0xde>
 800533e:	6834      	ldr	r4, [r6, #0]
 8005340:	4626      	mov	r6, r4
 8005342:	2e00      	cmp	r6, #0
 8005344:	d140      	bne.n	80053c8 <_malloc_r+0xcc>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	4631      	mov	r1, r6
 800534a:	4638      	mov	r0, r7
 800534c:	eb04 0803 	add.w	r8, r4, r3
 8005350:	f000 f878 	bl	8005444 <_sbrk_r>
 8005354:	4580      	cmp	r8, r0
 8005356:	d13a      	bne.n	80053ce <_malloc_r+0xd2>
 8005358:	6821      	ldr	r1, [r4, #0]
 800535a:	3503      	adds	r5, #3
 800535c:	1a6d      	subs	r5, r5, r1
 800535e:	f025 0503 	bic.w	r5, r5, #3
 8005362:	3508      	adds	r5, #8
 8005364:	2d0c      	cmp	r5, #12
 8005366:	bf38      	it	cc
 8005368:	250c      	movcc	r5, #12
 800536a:	4629      	mov	r1, r5
 800536c:	4638      	mov	r0, r7
 800536e:	f7ff ffa5 	bl	80052bc <sbrk_aligned>
 8005372:	3001      	adds	r0, #1
 8005374:	d02b      	beq.n	80053ce <_malloc_r+0xd2>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	442b      	add	r3, r5
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	e00e      	b.n	800539c <_malloc_r+0xa0>
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	1b52      	subs	r2, r2, r5
 8005382:	d41e      	bmi.n	80053c2 <_malloc_r+0xc6>
 8005384:	2a0b      	cmp	r2, #11
 8005386:	d916      	bls.n	80053b6 <_malloc_r+0xba>
 8005388:	1961      	adds	r1, r4, r5
 800538a:	42a3      	cmp	r3, r4
 800538c:	6025      	str	r5, [r4, #0]
 800538e:	bf18      	it	ne
 8005390:	6059      	strne	r1, [r3, #4]
 8005392:	6863      	ldr	r3, [r4, #4]
 8005394:	bf08      	it	eq
 8005396:	6031      	streq	r1, [r6, #0]
 8005398:	5162      	str	r2, [r4, r5]
 800539a:	604b      	str	r3, [r1, #4]
 800539c:	4638      	mov	r0, r7
 800539e:	f104 060b 	add.w	r6, r4, #11
 80053a2:	f000 f865 	bl	8005470 <__malloc_unlock>
 80053a6:	f026 0607 	bic.w	r6, r6, #7
 80053aa:	1d23      	adds	r3, r4, #4
 80053ac:	1af2      	subs	r2, r6, r3
 80053ae:	d0b6      	beq.n	800531e <_malloc_r+0x22>
 80053b0:	1b9b      	subs	r3, r3, r6
 80053b2:	50a3      	str	r3, [r4, r2]
 80053b4:	e7b3      	b.n	800531e <_malloc_r+0x22>
 80053b6:	6862      	ldr	r2, [r4, #4]
 80053b8:	42a3      	cmp	r3, r4
 80053ba:	bf0c      	ite	eq
 80053bc:	6032      	streq	r2, [r6, #0]
 80053be:	605a      	strne	r2, [r3, #4]
 80053c0:	e7ec      	b.n	800539c <_malloc_r+0xa0>
 80053c2:	4623      	mov	r3, r4
 80053c4:	6864      	ldr	r4, [r4, #4]
 80053c6:	e7b2      	b.n	800532e <_malloc_r+0x32>
 80053c8:	4634      	mov	r4, r6
 80053ca:	6876      	ldr	r6, [r6, #4]
 80053cc:	e7b9      	b.n	8005342 <_malloc_r+0x46>
 80053ce:	230c      	movs	r3, #12
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	4638      	mov	r0, r7
 80053d4:	f000 f84c 	bl	8005470 <__malloc_unlock>
 80053d8:	e7a1      	b.n	800531e <_malloc_r+0x22>
 80053da:	6025      	str	r5, [r4, #0]
 80053dc:	e7de      	b.n	800539c <_malloc_r+0xa0>
 80053de:	bf00      	nop
 80053e0:	200001b0 	.word	0x200001b0

080053e4 <_realloc_r>:
 80053e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e8:	4680      	mov	r8, r0
 80053ea:	4614      	mov	r4, r2
 80053ec:	460e      	mov	r6, r1
 80053ee:	b921      	cbnz	r1, 80053fa <_realloc_r+0x16>
 80053f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053f4:	4611      	mov	r1, r2
 80053f6:	f7ff bf81 	b.w	80052fc <_malloc_r>
 80053fa:	b92a      	cbnz	r2, 8005408 <_realloc_r+0x24>
 80053fc:	f7ff ff12 	bl	8005224 <_free_r>
 8005400:	4625      	mov	r5, r4
 8005402:	4628      	mov	r0, r5
 8005404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005408:	f000 f838 	bl	800547c <_malloc_usable_size_r>
 800540c:	4284      	cmp	r4, r0
 800540e:	4607      	mov	r7, r0
 8005410:	d802      	bhi.n	8005418 <_realloc_r+0x34>
 8005412:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005416:	d812      	bhi.n	800543e <_realloc_r+0x5a>
 8005418:	4621      	mov	r1, r4
 800541a:	4640      	mov	r0, r8
 800541c:	f7ff ff6e 	bl	80052fc <_malloc_r>
 8005420:	4605      	mov	r5, r0
 8005422:	2800      	cmp	r0, #0
 8005424:	d0ed      	beq.n	8005402 <_realloc_r+0x1e>
 8005426:	42bc      	cmp	r4, r7
 8005428:	4622      	mov	r2, r4
 800542a:	4631      	mov	r1, r6
 800542c:	bf28      	it	cs
 800542e:	463a      	movcs	r2, r7
 8005430:	f7ff fed0 	bl	80051d4 <memcpy>
 8005434:	4631      	mov	r1, r6
 8005436:	4640      	mov	r0, r8
 8005438:	f7ff fef4 	bl	8005224 <_free_r>
 800543c:	e7e1      	b.n	8005402 <_realloc_r+0x1e>
 800543e:	4635      	mov	r5, r6
 8005440:	e7df      	b.n	8005402 <_realloc_r+0x1e>
	...

08005444 <_sbrk_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d06      	ldr	r5, [pc, #24]	; (8005460 <_sbrk_r+0x1c>)
 8005448:	2300      	movs	r3, #0
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	f7fb fc10 	bl	8000c74 <_sbrk>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_sbrk_r+0x1a>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_sbrk_r+0x1a>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	200001b8 	.word	0x200001b8

08005464 <__malloc_lock>:
 8005464:	4801      	ldr	r0, [pc, #4]	; (800546c <__malloc_lock+0x8>)
 8005466:	f000 b811 	b.w	800548c <__retarget_lock_acquire_recursive>
 800546a:	bf00      	nop
 800546c:	200001bc 	.word	0x200001bc

08005470 <__malloc_unlock>:
 8005470:	4801      	ldr	r0, [pc, #4]	; (8005478 <__malloc_unlock+0x8>)
 8005472:	f000 b80c 	b.w	800548e <__retarget_lock_release_recursive>
 8005476:	bf00      	nop
 8005478:	200001bc 	.word	0x200001bc

0800547c <_malloc_usable_size_r>:
 800547c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005480:	1f18      	subs	r0, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	bfbc      	itt	lt
 8005486:	580b      	ldrlt	r3, [r1, r0]
 8005488:	18c0      	addlt	r0, r0, r3
 800548a:	4770      	bx	lr

0800548c <__retarget_lock_acquire_recursive>:
 800548c:	4770      	bx	lr

0800548e <__retarget_lock_release_recursive>:
 800548e:	4770      	bx	lr

08005490 <_init>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr

0800549c <_fini>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	bf00      	nop
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr
