
stopwatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005110  08005110  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005118  08005118  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08005190  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08005190  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114dc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002127  00000000  00000000  0003157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  000336a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00034510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026226  00000000  00000000  000352a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001199c  00000000  00000000  0005b4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4641  00000000  00000000  0006ce62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001614a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  001614f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080050a4 	.word	0x080050a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080050a4 	.word	0x080050a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_SYSTICK_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char uart_buf[30];
volatile int second_count, timer_count;

void HAL_SYSTICK_Callback(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	if((timer_count%1000) == 0){
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <HAL_SYSTICK_Callback+0x80>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <HAL_SYSTICK_Callback+0x84>)
 80005be:	fb83 1302 	smull	r1, r3, r3, r2
 80005c2:	1199      	asrs	r1, r3, #6
 80005c4:	17d3      	asrs	r3, r2, #31
 80005c6:	1acb      	subs	r3, r1, r3
 80005c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005cc:	fb01 f303 	mul.w	r3, r1, r3
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d126      	bne.n	8000624 <HAL_SYSTICK_Callback+0x70>
		memset(uart_buf,0,30);
 80005d6:	221e      	movs	r2, #30
 80005d8:	2100      	movs	r1, #0
 80005da:	4818      	ldr	r0, [pc, #96]	; (800063c <HAL_SYSTICK_Callback+0x88>)
 80005dc:	f004 f8ec 	bl	80047b8 <memset>
		sprintf(uart_buf, "%d,%d\r\n", second_count, timer_count);
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <HAL_SYSTICK_Callback+0x8c>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <HAL_SYSTICK_Callback+0x80>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4916      	ldr	r1, [pc, #88]	; (8000644 <HAL_SYSTICK_Callback+0x90>)
 80005ea:	4814      	ldr	r0, [pc, #80]	; (800063c <HAL_SYSTICK_Callback+0x88>)
 80005ec:	f004 f8ec 	bl	80047c8 <siprintf>
		HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 80005f0:	221e      	movs	r2, #30
 80005f2:	4912      	ldr	r1, [pc, #72]	; (800063c <HAL_SYSTICK_Callback+0x88>)
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <HAL_SYSTICK_Callback+0x94>)
 80005f6:	f003 f803 	bl	8003600 <HAL_UART_Transmit_IT>

		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2101      	movs	r1, #1
 80005fe:	4813      	ldr	r0, [pc, #76]	; (800064c <HAL_SYSTICK_Callback+0x98>)
 8000600:	f000 ff48 	bl	8001494 <HAL_GPIO_WritePin>
		HAL_Delay(100) ;
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f000 fbcb 	bl	8000da0 <HAL_Delay>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2101      	movs	r1, #1
 800060e:	480f      	ldr	r0, [pc, #60]	; (800064c <HAL_SYSTICK_Callback+0x98>)
 8000610:	f000 ff40 	bl	8001494 <HAL_GPIO_WritePin>
		HAL_Delay(100) ;
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f000 fbc3 	bl	8000da0 <HAL_Delay>
		second_count++;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_SYSTICK_Callback+0x8c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <HAL_SYSTICK_Callback+0x8c>)
 8000622:	6013      	str	r3, [r2, #0]
	}
	timer_count++;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_SYSTICK_Callback+0x80>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a02      	ldr	r2, [pc, #8]	; (8000634 <HAL_SYSTICK_Callback+0x80>)
 800062c:	6013      	str	r3, [r2, #0]
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200001a4 	.word	0x200001a4
 8000638:	10624dd3 	.word	0x10624dd3
 800063c:	20000180 	.word	0x20000180
 8000640:	200001a0 	.word	0x200001a0
 8000644:	080050bc 	.word	0x080050bc
 8000648:	200000f8 	.word	0x200000f8
 800064c:	40020400 	.word	0x40020400

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fb47 	bl	8000ce6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f80a 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f946 	bl	80008ec <MX_GPIO_Init>
  MX_RTC_Init();
 8000660:	f000 f876 	bl	8000750 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000664:	f000 f912 	bl	800088c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000668:	f000 f898 	bl	800079c <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x1c>
	...

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	; 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 f89a 	bl	80047b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000694:	f000 ff18 	bl	80014c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <SystemClock_Config+0xd8>)
 800069a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800069c:	4a2a      	ldr	r2, [pc, #168]	; (8000748 <SystemClock_Config+0xd8>)
 800069e:	f023 0318 	bic.w	r3, r3, #24
 80006a2:	6713      	str	r3, [r2, #112]	; 0x70

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xd8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xd8>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xd8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xdc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a22      	ldr	r2, [pc, #136]	; (800074c <SystemClock_Config+0xdc>)
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <SystemClock_Config+0xdc>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006d4:	2306      	movs	r3, #6
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006f0:	23b4      	movs	r3, #180	; 0xb4
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fef1 	bl	80014e8 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800070c:	f000 f92c 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2105      	movs	r1, #5
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f97e 	bl	8001a30 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800073a:	f000 f915 	bl	8000968 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_RTC_Init+0x44>)
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <MX_RTC_Init+0x48>)
 8000758:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_RTC_Init+0x44>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_RTC_Init+0x44>)
 8000762:	227f      	movs	r2, #127	; 0x7f
 8000764:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_RTC_Init+0x44>)
 8000768:	22ff      	movs	r2, #255	; 0xff
 800076a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_RTC_Init+0x44>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_RTC_Init+0x44>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_RTC_Init+0x44>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_RTC_Init+0x44>)
 8000780:	f001 ff2c 	bl	80025dc <HAL_RTC_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800078a:	f000 f8ed 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000008c 	.word	0x2000008c
 8000798:	40002800 	.word	0x40002800

0800079c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08e      	sub	sp, #56	; 0x38
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
 80007ca:	615a      	str	r2, [r3, #20]
 80007cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <MX_TIM4_Init+0xe8>)
 80007d0:	4a2d      	ldr	r2, [pc, #180]	; (8000888 <MX_TIM4_Init+0xec>)
 80007d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80007d4:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MX_TIM4_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_TIM4_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_TIM4_Init+0xe8>)
 80007e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_TIM4_Init+0xe8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_TIM4_Init+0xe8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007f4:	4823      	ldr	r0, [pc, #140]	; (8000884 <MX_TIM4_Init+0xe8>)
 80007f6:	f001 fff9 	bl	80027ec <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000800:	f000 f8b2 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080e:	4619      	mov	r1, r3
 8000810:	481c      	ldr	r0, [pc, #112]	; (8000884 <MX_TIM4_Init+0xe8>)
 8000812:	f002 f9b7 	bl	8002b84 <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800081c:	f000 f8a4 	bl	8000968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000820:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_TIM4_Init+0xe8>)
 8000822:	f002 f83a 	bl	800289a <HAL_TIM_PWM_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800082c:	f000 f89c 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4811      	ldr	r0, [pc, #68]	; (8000884 <MX_TIM4_Init+0xe8>)
 8000840:	f002 fe02 	bl	8003448 <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800084a:	f000 f88d 	bl	8000968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084e:	2360      	movs	r3, #96	; 0x60
 8000850:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	2204      	movs	r2, #4
 8000862:	4619      	mov	r1, r3
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <MX_TIM4_Init+0xe8>)
 8000866:	f002 f879 	bl	800295c <HAL_TIM_PWM_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000870:	f000 f87a 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <MX_TIM4_Init+0xe8>)
 8000876:	f000 f8ef 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 800087a:	bf00      	nop
 800087c:	3738      	adds	r7, #56	; 0x38
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000ac 	.word	0x200000ac
 8000888:	40000800 	.word	0x40000800

0800088c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_USART3_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008d0:	f002 fe48 	bl	8003564 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f845 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000f8 	.word	0x200000f8
 80008e8:	40004800 	.word	0x40004800

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_GPIO_Init+0x74>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <MX_GPIO_Init+0x74>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_GPIO_Init+0x74>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_GPIO_Init+0x74>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a10      	ldr	r2, [pc, #64]	; (8000960 <MX_GPIO_Init+0x74>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_GPIO_Init+0x74>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2101      	movs	r1, #1
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <MX_GPIO_Init+0x78>)
 8000938:	f000 fdac 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 800093c:	2301      	movs	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_GPIO_Init+0x78>)
 8000954:	f000 fbf2 	bl	800113c <HAL_GPIO_Init>

}
 8000958:	bf00      	nop
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	40020400 	.word	0x40020400

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0a4      	sub	sp, #144	; 0x90
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2284      	movs	r2, #132	; 0x84
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 fef3 	bl	80047b8 <memset>
  if(hrtc->Instance==RTC)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_RTC_MspInit+0x54>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d114      	bne.n	8000a06 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009dc:	2320      	movs	r3, #32
 80009de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 fa06 	bl	8001dfc <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80009f6:	f7ff ffb7 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_RTC_MspInit+0x58>)
 80009fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <HAL_RTC_MspInit+0x58>)
 8000a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a04:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a06:	bf00      	nop
 8000a08:	3790      	adds	r7, #144	; 0x90
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40002800 	.word	0x40002800
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_TIM_Base_MspInit+0x38>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10b      	bne.n	8000a42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_TIM_Base_MspInit+0x3c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <HAL_TIM_Base_MspInit+0x3c>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <HAL_TIM_Base_MspInit+0x3c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40000800 	.word	0x40000800
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a11      	ldr	r2, [pc, #68]	; (8000abc <HAL_TIM_MspPostInit+0x64>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d11b      	bne.n	8000ab2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_TIM_MspPostInit+0x6c>)
 8000aae:	f000 fb45 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40000800 	.word	0x40000800
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0aa      	sub	sp, #168	; 0xa8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	2284      	movs	r2, #132	; 0x84
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fe65 	bl	80047b8 <memset>
  if(huart->Instance==USART3)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <HAL_UART_MspInit+0xc4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d144      	bne.n	8000b82 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 f978 	bl	8001dfc <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b12:	f7ff ff29 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <HAL_UART_MspInit+0xc8>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <HAL_UART_MspInit+0xc8>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_UART_MspInit+0xc8>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_UART_MspInit+0xc8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0xc8>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_UART_MspInit+0xc8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b60:	2307      	movs	r3, #7
 8000b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_UART_MspInit+0xcc>)
 8000b6e:	f000 fae5 	bl	800113c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2027      	movs	r0, #39	; 0x27
 8000b78:	f000 fa11 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b7c:	2027      	movs	r0, #39	; 0x27
 8000b7e:	f000 fa2a 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	37a8      	adds	r7, #168	; 0xa8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40004800 	.word	0x40004800
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020400 	.word	0x40020400

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f8bc 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000be8:	f000 fa0f 	bl	800100a <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <USART3_IRQHandler+0x10>)
 8000bf6:	f002 fd61 	bl	80036bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000f8 	.word	0x200000f8

08000c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <_sbrk+0x5c>)
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <_sbrk+0x60>)
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <_sbrk+0x64>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <_sbrk+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d207      	bcs.n	8000c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c34:	f003 fd96 	bl	8004764 <__errno>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20050000 	.word	0x20050000
 8000c64:	00000400 	.word	0x00000400
 8000c68:	200001a8 	.word	0x200001a8
 8000c6c:	200001c0 	.word	0x200001c0

08000c70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ccc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9a:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cbe:	f7ff ffd7 	bl	8000c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f003 fd55 	bl	8004770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fcc3 	bl	8000650 <main>
  bx  lr    
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ccc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cd8:	08005120 	.word	0x08005120
  ldr r2, =_sbss
 8000cdc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ce0:	200001c0 	.word	0x200001c0

08000ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>

08000ce6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cea:	2003      	movs	r0, #3
 8000cec:	f000 f94c 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	f000 f805 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf6:	f7ff fe3d 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x54>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f967 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 f92f 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <HAL_InitTick+0x5c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	200001ac 	.word	0x200001ac

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200001ac 	.word	0x200001ac

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ffee 	bl	8000d88 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffde 	bl	8000d88 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	05fa0000 	.word	0x05fa0000

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db0b      	blt.n	8000e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f003 021f 	and.w	r2, r3, #31
 8000e64:	4907      	ldr	r1, [pc, #28]	; (8000e84 <__NVIC_EnableIRQ+0x38>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff29 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff3e 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff8e 	bl	8000edc <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5d 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff31 	bl	8000e4c <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffa2 	bl	8000f44 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800100e:	f7ff fad1 	bl	80005b4 <HAL_SYSTICK_Callback>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff feb0 	bl	8000d88 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d008      	beq.n	8001048 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e052      	b.n	80010ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0216 	bic.w	r2, r2, #22
 8001056:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001066:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <HAL_DMA_Abort+0x62>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001074:	2b00      	cmp	r3, #0
 8001076:	d007      	beq.n	8001088 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0208 	bic.w	r2, r2, #8
 8001086:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001098:	e013      	b.n	80010c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800109a:	f7ff fe75 	bl	8000d88 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d90c      	bls.n	80010c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2220      	movs	r2, #32
 80010ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e015      	b.n	80010ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1e4      	bne.n	800109a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d4:	223f      	movs	r2, #63	; 0x3f
 80010d6:	409a      	lsls	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d004      	beq.n	8001114 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e00c      	b.n	800112e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2205      	movs	r2, #5
 8001118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e175      	b.n	8001448 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8164 	bne.w	8001442 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d005      	beq.n	8001192 <HAL_GPIO_Init+0x56>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d130      	bne.n	80011f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 0201 	and.w	r2, r3, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d017      	beq.n	8001230 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80be 	beq.w	8001442 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b66      	ldr	r3, [pc, #408]	; (8001460 <HAL_GPIO_Init+0x324>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a65      	ldr	r2, [pc, #404]	; (8001460 <HAL_GPIO_Init+0x324>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b63      	ldr	r3, [pc, #396]	; (8001460 <HAL_GPIO_Init+0x324>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012de:	4a61      	ldr	r2, [pc, #388]	; (8001464 <HAL_GPIO_Init+0x328>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a58      	ldr	r2, [pc, #352]	; (8001468 <HAL_GPIO_Init+0x32c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d037      	beq.n	800137a <HAL_GPIO_Init+0x23e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a57      	ldr	r2, [pc, #348]	; (800146c <HAL_GPIO_Init+0x330>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d031      	beq.n	8001376 <HAL_GPIO_Init+0x23a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a56      	ldr	r2, [pc, #344]	; (8001470 <HAL_GPIO_Init+0x334>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d02b      	beq.n	8001372 <HAL_GPIO_Init+0x236>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a55      	ldr	r2, [pc, #340]	; (8001474 <HAL_GPIO_Init+0x338>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x232>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a54      	ldr	r2, [pc, #336]	; (8001478 <HAL_GPIO_Init+0x33c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x22e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a53      	ldr	r2, [pc, #332]	; (800147c <HAL_GPIO_Init+0x340>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x22a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	; (8001480 <HAL_GPIO_Init+0x344>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x226>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a51      	ldr	r2, [pc, #324]	; (8001484 <HAL_GPIO_Init+0x348>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x222>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a50      	ldr	r2, [pc, #320]	; (8001488 <HAL_GPIO_Init+0x34c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x21e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4f      	ldr	r2, [pc, #316]	; (800148c <HAL_GPIO_Init+0x350>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x21a>
 8001352:	2309      	movs	r3, #9
 8001354:	e012      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001356:	230a      	movs	r3, #10
 8001358:	e010      	b.n	800137c <HAL_GPIO_Init+0x240>
 800135a:	2308      	movs	r3, #8
 800135c:	e00e      	b.n	800137c <HAL_GPIO_Init+0x240>
 800135e:	2307      	movs	r3, #7
 8001360:	e00c      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001362:	2306      	movs	r3, #6
 8001364:	e00a      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001366:	2305      	movs	r3, #5
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x240>
 800136a:	2304      	movs	r3, #4
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x240>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x240>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x240>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800138c:	4935      	ldr	r1, [pc, #212]	; (8001464 <HAL_GPIO_Init+0x328>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_GPIO_Init+0x354>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a34      	ldr	r2, [pc, #208]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b32      	ldr	r3, [pc, #200]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a29      	ldr	r2, [pc, #164]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_GPIO_Init+0x354>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001412:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <HAL_GPIO_Init+0x354>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_GPIO_Init+0x354>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_GPIO_Init+0x354>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f ae86 	bls.w	800115c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40021400 	.word	0x40021400
 8001480:	40021800 	.word	0x40021800
 8001484:	40021c00 	.word	0x40021c00
 8001488:	40022000 	.word	0x40022000
 800148c:	40022400 	.word	0x40022400
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40007000 	.word	0x40007000

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e291      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8087 	beq.w	800161a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800150c:	4b96      	ldr	r3, [pc, #600]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b04      	cmp	r3, #4
 8001516:	d00c      	beq.n	8001532 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001518:	4b93      	ldr	r3, [pc, #588]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b08      	cmp	r3, #8
 8001522:	d112      	bne.n	800154a <HAL_RCC_OscConfig+0x62>
 8001524:	4b90      	ldr	r3, [pc, #576]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001530:	d10b      	bne.n	800154a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001532:	4b8d      	ldr	r3, [pc, #564]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d06c      	beq.n	8001618 <HAL_RCC_OscConfig+0x130>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d168      	bne.n	8001618 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e26b      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x7a>
 8001554:	4b84      	ldr	r3, [pc, #528]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a83      	ldr	r2, [pc, #524]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800155a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e02e      	b.n	80015c0 <HAL_RCC_OscConfig+0xd8>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x9c>
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a7e      	ldr	r2, [pc, #504]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b7c      	ldr	r3, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a7b      	ldr	r2, [pc, #492]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800157c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e01d      	b.n	80015c0 <HAL_RCC_OscConfig+0xd8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0xc0>
 800158e:	4b76      	ldr	r3, [pc, #472]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a75      	ldr	r2, [pc, #468]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b73      	ldr	r3, [pc, #460]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a72      	ldr	r2, [pc, #456]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e00b      	b.n	80015c0 <HAL_RCC_OscConfig+0xd8>
 80015a8:	4b6f      	ldr	r3, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b6c      	ldr	r3, [pc, #432]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a6b      	ldr	r2, [pc, #428]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fbde 	bl	8000d88 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fbda 	bl	8000d88 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	; 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e21f      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b61      	ldr	r3, [pc, #388]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0xe8>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fbca 	bl	8000d88 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbc6 	bl	8000d88 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e20b      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	4b57      	ldr	r3, [pc, #348]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x110>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d069      	beq.n	80016fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001626:	4b50      	ldr	r3, [pc, #320]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001632:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b08      	cmp	r3, #8
 800163c:	d11c      	bne.n	8001678 <HAL_RCC_OscConfig+0x190>
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d116      	bne.n	8001678 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_RCC_OscConfig+0x17a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e1df      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	493d      	ldr	r1, [pc, #244]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	e040      	b.n	80016fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d023      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a38      	ldr	r2, [pc, #224]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fb7c 	bl	8000d88 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fb78 	bl	8000d88 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1bd      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4929      	ldr	r1, [pc, #164]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
 80016c6:	e018      	b.n	80016fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a26      	ldr	r2, [pc, #152]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb58 	bl	8000d88 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fb54 	bl	8000d88 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e199      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d038      	beq.n	8001778 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d019      	beq.n	8001742 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7ff fb35 	bl	8000d88 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff fb31 	bl	8000d88 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e176      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x23a>
 8001740:	e01a      	b.n	8001778 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fb1b 	bl	8000d88 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fb17 	bl	8000d88 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d903      	bls.n	800176c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e15c      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
 8001768:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	4b91      	ldr	r3, [pc, #580]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800176e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ee      	bne.n	8001756 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80a4 	beq.w	80018ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b8b      	ldr	r3, [pc, #556]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10d      	bne.n	80017ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b88      	ldr	r3, [pc, #544]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a87      	ldr	r2, [pc, #540]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b85      	ldr	r3, [pc, #532]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ae:	4b82      	ldr	r3, [pc, #520]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017ba:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a7e      	ldr	r2, [pc, #504]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fadf 	bl	8000d88 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fadb 	bl	8000d88 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e120      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <HAL_RCC_OscConfig+0x4d0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x31a>
 80017f4:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	4a6e      	ldr	r2, [pc, #440]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001800:	e02d      	b.n	800185e <HAL_RCC_OscConfig+0x376>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x33c>
 800180a:	4b6a      	ldr	r3, [pc, #424]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a69      	ldr	r2, [pc, #420]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a66      	ldr	r2, [pc, #408]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
 8001822:	e01c      	b.n	800185e <HAL_RCC_OscConfig+0x376>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x35e>
 800182c:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	4a60      	ldr	r2, [pc, #384]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6713      	str	r3, [r2, #112]	; 0x70
 8001838:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	4a5d      	ldr	r2, [pc, #372]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
 8001844:	e00b      	b.n	800185e <HAL_RCC_OscConfig+0x376>
 8001846:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	4a5a      	ldr	r2, [pc, #360]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6713      	str	r3, [r2, #112]	; 0x70
 8001852:	4b58      	ldr	r3, [pc, #352]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001856:	4a57      	ldr	r2, [pc, #348]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d015      	beq.n	8001892 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001866:	f7ff fa8f 	bl	8000d88 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff fa8b 	bl	8000d88 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0ce      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ee      	beq.n	800186e <HAL_RCC_OscConfig+0x386>
 8001890:	e014      	b.n	80018bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff fa79 	bl	8000d88 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff fa75 	bl	8000d88 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0b8      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	4b40      	ldr	r3, [pc, #256]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ee      	bne.n	800189a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c2:	4b3c      	ldr	r3, [pc, #240]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a3b      	ldr	r2, [pc, #236]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80a4 	beq.w	8001a20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d8:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d06b      	beq.n	80019bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d149      	bne.n	8001980 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ec:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a30      	ldr	r2, [pc, #192]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fa46 	bl	8000d88 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fa42 	bl	8000d88 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e087      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	019b      	lsls	r3, r3, #6
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	3b01      	subs	r3, #1
 8001938:	041b      	lsls	r3, r3, #16
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	4313      	orrs	r3, r2
 8001944:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800194a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fa16 	bl	8000d88 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff fa12 	bl	8000d88 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e057      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x478>
 800197e:	e04f      	b.n	8001a20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f9fc 	bl	8000d88 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff f9f8 	bl	8000d88 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e03d      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x4ac>
 80019b2:	e035      	b.n	8001a20 <HAL_RCC_OscConfig+0x538>
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x544>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d028      	beq.n	8001a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d121      	bne.n	8001a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d11a      	bne.n	8001a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019ec:	4013      	ands	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d111      	bne.n	8001a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	3b01      	subs	r3, #1
 8001a06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0d0      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a48:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d910      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 020f 	bic.w	r2, r3, #15
 8001a5e:	4965      	ldr	r1, [pc, #404]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0b8      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	494d      	ldr	r1, [pc, #308]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d040      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d115      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e07f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e073      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e06b      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f023 0203 	bic.w	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4936      	ldr	r1, [pc, #216]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b24:	f7ff f930 	bl	8000d88 <HAL_GetTick>
 8001b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2c:	f7ff f92c 	bl	8000d88 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e053      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 020c 	and.w	r2, r3, #12
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1eb      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d210      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 020f 	bic.w	r2, r3, #15
 8001b6a:	4922      	ldr	r1, [pc, #136]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e032      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bc2:	f000 f821 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	490a      	ldr	r1, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x1cc>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1d0>)
 8001bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1d4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f88c 	bl	8000d00 <HAL_InitTick>

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	080050c4 	.word	0x080050c4
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c0c:	b090      	sub	sp, #64	; 0x40
 8001c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
 8001c14:	2300      	movs	r3, #0
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c18:	2300      	movs	r3, #0
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c20:	4b59      	ldr	r3, [pc, #356]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d00d      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x40>
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	f200 80a1 	bhi.w	8001d74 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x34>
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c3a:	e09b      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c40:	e09b      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c42:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c46:	e098      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c48:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c52:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d028      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5e:	4b4a      	ldr	r3, [pc, #296]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	099b      	lsrs	r3, r3, #6
 8001c64:	2200      	movs	r2, #0
 8001c66:	623b      	str	r3, [r7, #32]
 8001c68:	627a      	str	r2, [r7, #36]	; 0x24
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c70:	2100      	movs	r1, #0
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c74:	fb03 f201 	mul.w	r2, r3, r1
 8001c78:	2300      	movs	r3, #0
 8001c7a:	fb00 f303 	mul.w	r3, r0, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a43      	ldr	r2, [pc, #268]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c82:	fba0 1202 	umull	r1, r2, r0, r2
 8001c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c88:	460a      	mov	r2, r1
 8001c8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c8e:	4413      	add	r3, r2
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c94:	2200      	movs	r2, #0
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	61fa      	str	r2, [r7, #28]
 8001c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ca2:	f7fe fb05 	bl	80002b0 <__aeabi_uldivmod>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4613      	mov	r3, r2
 8001cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cae:	e053      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb0:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	099b      	lsrs	r3, r3, #6
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	617a      	str	r2, [r7, #20]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cc2:	f04f 0b00 	mov.w	fp, #0
 8001cc6:	4652      	mov	r2, sl
 8001cc8:	465b      	mov	r3, fp
 8001cca:	f04f 0000 	mov.w	r0, #0
 8001cce:	f04f 0100 	mov.w	r1, #0
 8001cd2:	0159      	lsls	r1, r3, #5
 8001cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd8:	0150      	lsls	r0, r2, #5
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	ebb2 080a 	subs.w	r8, r2, sl
 8001ce2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cfa:	ebb2 0408 	subs.w	r4, r2, r8
 8001cfe:	eb63 0509 	sbc.w	r5, r3, r9
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	00eb      	lsls	r3, r5, #3
 8001d0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d10:	00e2      	lsls	r2, r4, #3
 8001d12:	4614      	mov	r4, r2
 8001d14:	461d      	mov	r5, r3
 8001d16:	eb14 030a 	adds.w	r3, r4, sl
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	eb45 030b 	adc.w	r3, r5, fp
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d2e:	4629      	mov	r1, r5
 8001d30:	028b      	lsls	r3, r1, #10
 8001d32:	4621      	mov	r1, r4
 8001d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d38:	4621      	mov	r1, r4
 8001d3a:	028a      	lsls	r2, r1, #10
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d42:	2200      	movs	r2, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	60fa      	str	r2, [r7, #12]
 8001d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d4c:	f7fe fab0 	bl	80002b0 <__aeabi_uldivmod>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4613      	mov	r3, r2
 8001d56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d72:	e002      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8001d76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3740      	adds	r7, #64	; 0x40
 8001d80:	46bd      	mov	sp, r7
 8001d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	00f42400 	.word	0x00f42400
 8001d90:	017d7840 	.word	0x017d7840

08001d94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000000 	.word	0x20000000

08001dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001db0:	f7ff fff0 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0a9b      	lsrs	r3, r3, #10
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4903      	ldr	r1, [pc, #12]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	080050d4 	.word	0x080050d4

08001dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dd8:	f7ff ffdc 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0b5b      	lsrs	r3, r3, #13
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4903      	ldr	r1, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	080050d4 	.word	0x080050d4

08001dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d012      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e24:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a68      	ldr	r2, [pc, #416]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e2e:	6093      	str	r3, [r2, #8]
 8001e30:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e38:	4964      	ldr	r1, [pc, #400]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d017      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e56:	4b5d      	ldr	r3, [pc, #372]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	4959      	ldr	r1, [pc, #356]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e74:	d101      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d017      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e92:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	494a      	ldr	r1, [pc, #296]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 808b 	beq.w	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	4a39      	ldr	r2, [pc, #228]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eea:	6413      	str	r3, [r2, #64]	; 0x40
 8001eec:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a34      	ldr	r2, [pc, #208]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f04:	f7fe ff40 	bl	8000d88 <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0c:	f7fe ff3c 	bl	8000d88 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e357      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d035      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d02e      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f6a:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d114      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff04 	bl	8000d88 <HAL_GetTick>
 8001f80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7fe ff00 	bl	8000d88 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e319      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ee      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fb2:	d111      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	4901      	ldr	r1, [pc, #4]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	0ffffcff 	.word	0x0ffffcff
 8001fd8:	4baa      	ldr	r3, [pc, #680]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4aa9      	ldr	r2, [pc, #676]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fe2:	6093      	str	r3, [r2, #8]
 8001fe4:	4ba7      	ldr	r3, [pc, #668]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fe6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff0:	49a4      	ldr	r1, [pc, #656]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d010      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002002:	4ba0      	ldr	r3, [pc, #640]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002008:	4a9e      	ldr	r2, [pc, #632]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800200a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800200e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002012:	4b9c      	ldr	r3, [pc, #624]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002014:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	4999      	ldr	r1, [pc, #612]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002030:	4b94      	ldr	r3, [pc, #592]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800203e:	4991      	ldr	r1, [pc, #580]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002052:	4b8c      	ldr	r3, [pc, #560]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002060:	4988      	ldr	r1, [pc, #544]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002074:	4b83      	ldr	r3, [pc, #524]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002082:	4980      	ldr	r1, [pc, #512]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002096:	4b7b      	ldr	r3, [pc, #492]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4977      	ldr	r1, [pc, #476]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020b8:	4b72      	ldr	r3, [pc, #456]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	496f      	ldr	r1, [pc, #444]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020da:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f023 020c 	bic.w	r2, r3, #12
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	4966      	ldr	r1, [pc, #408]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020fc:	4b61      	ldr	r3, [pc, #388]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	495e      	ldr	r1, [pc, #376]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800211e:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212c:	4955      	ldr	r1, [pc, #340]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002140:	4b50      	ldr	r3, [pc, #320]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	494d      	ldr	r1, [pc, #308]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002162:	4b48      	ldr	r3, [pc, #288]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	4944      	ldr	r1, [pc, #272]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	493c      	ldr	r1, [pc, #240]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021a6:	4b37      	ldr	r3, [pc, #220]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b4:	4933      	ldr	r1, [pc, #204]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021c8:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021d6:	492b      	ldr	r1, [pc, #172]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d011      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021f8:	4922      	ldr	r1, [pc, #136]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002208:	d101      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002230:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002238:	4912      	ldr	r1, [pc, #72]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225c:	4909      	ldr	r1, [pc, #36]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d006      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80d9 	beq.w	800242a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002278:	4b02      	ldr	r3, [pc, #8]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a01      	ldr	r2, [pc, #4]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002282:	e001      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002284:	40023800 	.word	0x40023800
 8002288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228a:	f7fe fd7d 	bl	8000d88 <HAL_GetTick>
 800228e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002292:	f7fe fd79 	bl	8000d88 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d901      	bls.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e194      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022a4:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d021      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11d      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022c4:	4b64      	ldr	r3, [pc, #400]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ca:	0c1b      	lsrs	r3, r3, #16
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022d2:	4b61      	ldr	r3, [pc, #388]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022d8:	0e1b      	lsrs	r3, r3, #24
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	019a      	lsls	r2, r3, #6
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	431a      	orrs	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	061b      	lsls	r3, r3, #24
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	071b      	lsls	r3, r3, #28
 80022f8:	4957      	ldr	r1, [pc, #348]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d004      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800231e:	2b00      	cmp	r3, #0
 8002320:	d02e      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232a:	d129      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800232c:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800232e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002332:	0c1b      	lsrs	r3, r3, #16
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800233a:	4b47      	ldr	r3, [pc, #284]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800233c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002340:	0f1b      	lsrs	r3, r3, #28
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	019a      	lsls	r2, r3, #6
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	041b      	lsls	r3, r3, #16
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	061b      	lsls	r3, r3, #24
 800235a:	431a      	orrs	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	071b      	lsls	r3, r3, #28
 8002360:	493d      	ldr	r1, [pc, #244]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002368:	4b3b      	ldr	r3, [pc, #236]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800236a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800236e:	f023 021f 	bic.w	r2, r3, #31
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	3b01      	subs	r3, #1
 8002378:	4937      	ldr	r1, [pc, #220]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01d      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800238c:	4b32      	ldr	r3, [pc, #200]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800238e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002392:	0e1b      	lsrs	r3, r3, #24
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800239a:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800239c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a0:	0f1b      	lsrs	r3, r3, #28
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	019a      	lsls	r2, r3, #6
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	431a      	orrs	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	431a      	orrs	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	071b      	lsls	r3, r3, #28
 80023c0:	4925      	ldr	r1, [pc, #148]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d011      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	019a      	lsls	r2, r3, #6
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	071b      	lsls	r3, r3, #28
 80023f0:	4919      	ldr	r1, [pc, #100]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a16      	ldr	r2, [pc, #88]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002404:	f7fe fcc0 	bl	8000d88 <HAL_GetTick>
 8002408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800240c:	f7fe fcbc 	bl	8000d88 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e0d7      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b01      	cmp	r3, #1
 800242e:	f040 80cd 	bne.w	80025cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800243e:	f7fe fca3 	bl	8000d88 <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002446:	f7fe fc9f 	bl	8000d88 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b64      	cmp	r3, #100	; 0x64
 8002452:	d903      	bls.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e0ba      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002458:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800245c:	4b5e      	ldr	r3, [pc, #376]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002468:	d0ed      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002486:	2b00      	cmp	r3, #0
 8002488:	d02e      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d12a      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024a0:	4b4d      	ldr	r3, [pc, #308]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	0f1b      	lsrs	r3, r3, #28
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	019a      	lsls	r2, r3, #6
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	041b      	lsls	r3, r3, #16
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	061b      	lsls	r3, r3, #24
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	071b      	lsls	r3, r3, #28
 80024c6:	4944      	ldr	r1, [pc, #272]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024ce:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	3b01      	subs	r3, #1
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	493d      	ldr	r1, [pc, #244]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d022      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024fc:	d11d      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024fe:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002504:	0e1b      	lsrs	r3, r3, #24
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800250c:	4b32      	ldr	r3, [pc, #200]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	0f1b      	lsrs	r3, r3, #28
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	019a      	lsls	r2, r3, #6
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	041b      	lsls	r3, r3, #16
 8002526:	431a      	orrs	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	061b      	lsls	r3, r3, #24
 800252c:	431a      	orrs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	071b      	lsls	r3, r3, #28
 8002532:	4929      	ldr	r1, [pc, #164]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d028      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	0e1b      	lsrs	r3, r3, #24
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	0c1b      	lsrs	r3, r3, #16
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	019a      	lsls	r2, r3, #6
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	041b      	lsls	r3, r3, #16
 800256c:	431a      	orrs	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	071b      	lsls	r3, r3, #28
 800257a:	4917      	ldr	r1, [pc, #92]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	4911      	ldr	r1, [pc, #68]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a4:	f7fe fbf0 	bl	8000d88 <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025ac:	f7fe fbec 	bl	8000d88 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e007      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ca:	d1ef      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800

080025dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e071      	b.n	80026d6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7f5b      	ldrb	r3, [r3, #29]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe f9da 	bl	80009bc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b10      	cmp	r3, #16
 800261a:	d053      	beq.n	80026c4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	22ca      	movs	r2, #202	; 0xca
 8002622:	625a      	str	r2, [r3, #36]	; 0x24
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2253      	movs	r2, #83	; 0x53
 800262a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f881 	bl	8002734 <RTC_EnterInitMode>
 8002632:	4603      	mov	r3, r0
 8002634:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d12a      	bne.n	8002692 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6899      	ldr	r1, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_RTC_Init+0x104>)
 8002648:	400b      	ands	r3, r1
 800264a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6899      	ldr	r1, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68d2      	ldr	r2, [r2, #12]
 8002672:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6919      	ldr	r1, [r3, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	041a      	lsls	r2, r3, #16
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f88a 	bl	80027a2 <RTC_ExitInitMode>
 800268e:	4603      	mov	r3, r0
 8002690:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d110      	bne.n	80026ba <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0208 	bic.w	r2, r2, #8
 80026a6:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	22ff      	movs	r2, #255	; 0xff
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
 80026c2:	e001      	b.n	80026c8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	ff8fffbf 	.word	0xff8fffbf

080026e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026fe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002700:	f7fe fb42 	bl	8000d88 <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002706:	e009      	b.n	800271c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002708:	f7fe fb3e 	bl	8000d88 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002716:	d901      	bls.n	800271c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e007      	b.n	800272c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0ee      	beq.n	8002708 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d122      	bne.n	8002798 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002760:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002762:	f7fe fb11 	bl	8000d88 <HAL_GetTick>
 8002766:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002768:	e00c      	b.n	8002784 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800276a:	f7fe fb0d 	bl	8000d88 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002778:	d904      	bls.n	8002784 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2204      	movs	r2, #4
 800277e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <RTC_EnterInitMode+0x64>
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d1e8      	bne.n	800276a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027bc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff89 	bl	80026e4 <HAL_RTC_WaitForSynchro>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d004      	beq.n	80027e2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2204      	movs	r2, #4
 80027dc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e049      	b.n	8002892 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe f900 	bl	8000a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f000 fa74 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e049      	b.n	8002940 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f841 	bl	8002948 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4610      	mov	r0, r2
 80028da:	f000 fa1d 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002976:	2302      	movs	r3, #2
 8002978:	e0ff      	b.n	8002b7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b14      	cmp	r3, #20
 8002986:	f200 80f0 	bhi.w	8002b6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800298a:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	080029e5 	.word	0x080029e5
 8002994:	08002b6b 	.word	0x08002b6b
 8002998:	08002b6b 	.word	0x08002b6b
 800299c:	08002b6b 	.word	0x08002b6b
 80029a0:	08002a25 	.word	0x08002a25
 80029a4:	08002b6b 	.word	0x08002b6b
 80029a8:	08002b6b 	.word	0x08002b6b
 80029ac:	08002b6b 	.word	0x08002b6b
 80029b0:	08002a67 	.word	0x08002a67
 80029b4:	08002b6b 	.word	0x08002b6b
 80029b8:	08002b6b 	.word	0x08002b6b
 80029bc:	08002b6b 	.word	0x08002b6b
 80029c0:	08002aa7 	.word	0x08002aa7
 80029c4:	08002b6b 	.word	0x08002b6b
 80029c8:	08002b6b 	.word	0x08002b6b
 80029cc:	08002b6b 	.word	0x08002b6b
 80029d0:	08002ae9 	.word	0x08002ae9
 80029d4:	08002b6b 	.word	0x08002b6b
 80029d8:	08002b6b 	.word	0x08002b6b
 80029dc:	08002b6b 	.word	0x08002b6b
 80029e0:	08002b29 	.word	0x08002b29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fa34 	bl	8002e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0208 	orr.w	r2, r2, #8
 80029fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0204 	bic.w	r2, r2, #4
 8002a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6999      	ldr	r1, [r3, #24]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	619a      	str	r2, [r3, #24]
      break;
 8002a22:	e0a5      	b.n	8002b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fa86 	bl	8002f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6999      	ldr	r1, [r3, #24]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	021a      	lsls	r2, r3, #8
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	619a      	str	r2, [r3, #24]
      break;
 8002a64:	e084      	b.n	8002b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fadd 	bl	800302c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69da      	ldr	r2, [r3, #28]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0208 	orr.w	r2, r2, #8
 8002a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0204 	bic.w	r2, r2, #4
 8002a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69d9      	ldr	r1, [r3, #28]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	61da      	str	r2, [r3, #28]
      break;
 8002aa4:	e064      	b.n	8002b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fb33 	bl	8003118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69d9      	ldr	r1, [r3, #28]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	021a      	lsls	r2, r3, #8
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	61da      	str	r2, [r3, #28]
      break;
 8002ae6:	e043      	b.n	8002b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fb6a 	bl	80031c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0208 	orr.w	r2, r2, #8
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0204 	bic.w	r2, r2, #4
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b26:	e023      	b.n	8002b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fb9c 	bl	800326c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	021a      	lsls	r2, r3, #8
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b68:	e002      	b.n	8002b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop

08002b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_TIM_ConfigClockSource+0x1c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e0b4      	b.n	8002d0a <HAL_TIM_ConfigClockSource+0x186>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <HAL_TIM_ConfigClockSource+0x190>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd8:	d03e      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0xd4>
 8002bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bde:	f200 8087 	bhi.w	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be6:	f000 8086 	beq.w	8002cf6 <HAL_TIM_ConfigClockSource+0x172>
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bee:	d87f      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b70      	cmp	r3, #112	; 0x70
 8002bf2:	d01a      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0xa6>
 8002bf4:	2b70      	cmp	r3, #112	; 0x70
 8002bf6:	d87b      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b60      	cmp	r3, #96	; 0x60
 8002bfa:	d050      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x11a>
 8002bfc:	2b60      	cmp	r3, #96	; 0x60
 8002bfe:	d877      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b50      	cmp	r3, #80	; 0x50
 8002c02:	d03c      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0xfa>
 8002c04:	2b50      	cmp	r3, #80	; 0x50
 8002c06:	d873      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d058      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x13a>
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d86f      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b30      	cmp	r3, #48	; 0x30
 8002c12:	d064      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c14:	2b30      	cmp	r3, #48	; 0x30
 8002c16:	d86b      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d060      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d867      	bhi.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05c      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d05a      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x15a>
 8002c28:	e062      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f000 fbe5 	bl	8003408 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	609a      	str	r2, [r3, #8]
      break;
 8002c56:	e04f      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6899      	ldr	r1, [r3, #8]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f000 fbce 	bl	8003408 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c7a:	609a      	str	r2, [r3, #8]
      break;
 8002c7c:	e03c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f000 fb42 	bl	8003314 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2150      	movs	r1, #80	; 0x50
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fb9b 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002c9c:	e02c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f000 fb61 	bl	8003372 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2160      	movs	r1, #96	; 0x60
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fb8b 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002cbc:	e01c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f000 fb22 	bl	8003314 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2140      	movs	r1, #64	; 0x40
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fb7b 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e00c      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4610      	mov	r0, r2
 8002cea:	f000 fb72 	bl	80033d2 <TIM_ITRx_SetConfig>
      break;
 8002cee:	e003      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e000      	b.n	8002cf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	fffeff88 	.word	0xfffeff88

08002d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a40      	ldr	r2, [pc, #256]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d00f      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <TIM_Base_SetConfig+0x118>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <TIM_Base_SetConfig+0x11c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3a      	ldr	r2, [pc, #232]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d027      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <TIM_Base_SetConfig+0x118>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d023      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2b      	ldr	r2, [pc, #172]	; (8002e34 <TIM_Base_SetConfig+0x11c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01f      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d017      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a28      	ldr	r2, [pc, #160]	; (8002e40 <TIM_Base_SetConfig+0x128>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <TIM_Base_SetConfig+0x12c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00f      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <TIM_Base_SetConfig+0x130>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <TIM_Base_SetConfig+0x134>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <TIM_Base_SetConfig+0x138>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d003      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <TIM_Base_SetConfig+0x13c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0xf8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d103      	bne.n	8002e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	615a      	str	r2, [r3, #20]
}
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	40010400 	.word	0x40010400
 8002e40:	40014000 	.word	0x40014000
 8002e44:	40014400 	.word	0x40014400
 8002e48:	40014800 	.word	0x40014800
 8002e4c:	40001800 	.word	0x40001800
 8002e50:	40001c00 	.word	0x40001c00
 8002e54:	40002000 	.word	0x40002000

08002e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0201 	bic.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <TIM_OC1_SetConfig+0xd8>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f023 0302 	bic.w	r3, r3, #2
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <TIM_OC1_SetConfig+0xdc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d003      	beq.n	8002ebc <TIM_OC1_SetConfig+0x64>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <TIM_OC1_SetConfig+0xe0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d10c      	bne.n	8002ed6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f023 0308 	bic.w	r3, r3, #8
 8002ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <TIM_OC1_SetConfig+0xdc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_OC1_SetConfig+0x8e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <TIM_OC1_SetConfig+0xe0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d111      	bne.n	8002f0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	621a      	str	r2, [r3, #32]
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	fffeff8f 	.word	0xfffeff8f
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40010400 	.word	0x40010400

08002f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f023 0210 	bic.w	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <TIM_OC2_SetConfig+0xe4>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0320 	bic.w	r3, r3, #32
 8002f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a23      	ldr	r2, [pc, #140]	; (8003024 <TIM_OC2_SetConfig+0xe8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <TIM_OC2_SetConfig+0x68>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a22      	ldr	r2, [pc, #136]	; (8003028 <TIM_OC2_SetConfig+0xec>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d10d      	bne.n	8002fc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a18      	ldr	r2, [pc, #96]	; (8003024 <TIM_OC2_SetConfig+0xe8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d003      	beq.n	8002fd0 <TIM_OC2_SetConfig+0x94>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a17      	ldr	r2, [pc, #92]	; (8003028 <TIM_OC2_SetConfig+0xec>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d113      	bne.n	8002ff8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	621a      	str	r2, [r3, #32]
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	feff8fff 	.word	0xfeff8fff
 8003024:	40010000 	.word	0x40010000
 8003028:	40010400 	.word	0x40010400

0800302c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4b2d      	ldr	r3, [pc, #180]	; (800310c <TIM_OC3_SetConfig+0xe0>)
 8003058:	4013      	ands	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0303 	bic.w	r3, r3, #3
 8003062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <TIM_OC3_SetConfig+0xe4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <TIM_OC3_SetConfig+0x66>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a21      	ldr	r2, [pc, #132]	; (8003114 <TIM_OC3_SetConfig+0xe8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d10d      	bne.n	80030ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a17      	ldr	r2, [pc, #92]	; (8003110 <TIM_OC3_SetConfig+0xe4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <TIM_OC3_SetConfig+0x92>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a16      	ldr	r2, [pc, #88]	; (8003114 <TIM_OC3_SetConfig+0xe8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d113      	bne.n	80030e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	fffeff8f 	.word	0xfffeff8f
 8003110:	40010000 	.word	0x40010000
 8003114:	40010400 	.word	0x40010400

08003118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <TIM_OC4_SetConfig+0xa4>)
 8003144:	4013      	ands	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	031b      	lsls	r3, r3, #12
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <TIM_OC4_SetConfig+0xa8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_OC4_SetConfig+0x68>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <TIM_OC4_SetConfig+0xac>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d109      	bne.n	8003194 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	feff8fff 	.word	0xfeff8fff
 80031c0:	40010000 	.word	0x40010000
 80031c4:	40010400 	.word	0x40010400

080031c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <TIM_OC5_SetConfig+0x98>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003208:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	041b      	lsls	r3, r3, #16
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a12      	ldr	r2, [pc, #72]	; (8003264 <TIM_OC5_SetConfig+0x9c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_OC5_SetConfig+0x5e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a11      	ldr	r2, [pc, #68]	; (8003268 <TIM_OC5_SetConfig+0xa0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d109      	bne.n	800323a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	621a      	str	r2, [r3, #32]
}
 8003254:	bf00      	nop
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	fffeff8f 	.word	0xfffeff8f
 8003264:	40010000 	.word	0x40010000
 8003268:	40010400 	.word	0x40010400

0800326c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <TIM_OC6_SetConfig+0x9c>)
 8003298:	4013      	ands	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	051b      	lsls	r3, r3, #20
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <TIM_OC6_SetConfig+0xa0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d003      	beq.n	80032cc <TIM_OC6_SetConfig+0x60>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a12      	ldr	r2, [pc, #72]	; (8003310 <TIM_OC6_SetConfig+0xa4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d109      	bne.n	80032e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	029b      	lsls	r3, r3, #10
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	621a      	str	r2, [r3, #32]
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	feff8fff 	.word	0xfeff8fff
 800330c:	40010000 	.word	0x40010000
 8003310:	40010400 	.word	0x40010400

08003314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f023 0201 	bic.w	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800333e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f023 030a 	bic.w	r3, r3, #10
 8003350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003372:	b480      	push	{r7}
 8003374:	b087      	sub	sp, #28
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f023 0210 	bic.w	r2, r3, #16
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800339c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	031b      	lsls	r3, r3, #12
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	621a      	str	r2, [r3, #32]
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f043 0307 	orr.w	r3, r3, #7
 80033f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	609a      	str	r2, [r3, #8]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003422:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	021a      	lsls	r2, r3, #8
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	431a      	orrs	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4313      	orrs	r3, r2
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	609a      	str	r2, [r3, #8]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800345c:	2302      	movs	r3, #2
 800345e:	e06d      	b.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a30      	ldr	r2, [pc, #192]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2f      	ldr	r2, [pc, #188]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d108      	bne.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800349a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a20      	ldr	r2, [pc, #128]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d022      	beq.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d2:	d01d      	beq.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1d      	ldr	r2, [pc, #116]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d018      	beq.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1c      	ldr	r2, [pc, #112]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d013      	beq.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00e      	beq.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a15      	ldr	r2, [pc, #84]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d009      	beq.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a16      	ldr	r2, [pc, #88]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d004      	beq.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d10c      	bne.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	4313      	orrs	r3, r2
 8003520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40010000 	.word	0x40010000
 800354c:	40010400 	.word	0x40010400
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40014000 	.word	0x40014000
 8003560:	40001800 	.word	0x40001800

08003564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e040      	b.n	80035f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fd fa9e 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2224      	movs	r2, #36	; 0x24
 8003590:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fb7c 	bl	8003ca0 <UART_SetConfig>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e022      	b.n	80035f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fdd4 	bl	8004168 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fe5b 	bl	80042ac <UART_CheckIdleState>
 80035f6:	4603      	mov	r3, r0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003600:	b480      	push	{r7}
 8003602:	b08b      	sub	sp, #44	; 0x2c
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003612:	2b20      	cmp	r3, #32
 8003614:	d147      	bne.n	80036a6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_UART_Transmit_IT+0x22>
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e040      	b.n	80036a8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	88fa      	ldrh	r2, [r7, #6]
 8003638:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2221      	movs	r2, #33	; 0x21
 800364e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003658:	d107      	bne.n	800366a <HAL_UART_Transmit_IT+0x6a>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d103      	bne.n	800366a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <HAL_UART_Transmit_IT+0xb4>)
 8003666:	66da      	str	r2, [r3, #108]	; 0x6c
 8003668:	e002      	b.n	8003670 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <HAL_UART_Transmit_IT+0xb8>)
 800366e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	613b      	str	r3, [r7, #16]
   return(result);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	623b      	str	r3, [r7, #32]
 8003690:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	69f9      	ldr	r1, [r7, #28]
 8003694:	6a3a      	ldr	r2, [r7, #32]
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	61bb      	str	r3, [r7, #24]
   return(result);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e6      	bne.n	8003670 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	372c      	adds	r7, #44	; 0x2c
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	08004651 	.word	0x08004651
 80036b8:	0800459b 	.word	0x0800459b

080036bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b0ba      	sub	sp, #232	; 0xe8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80036e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80036ea:	4013      	ands	r3, r2
 80036ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80036f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d115      	bne.n	8003724 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00f      	beq.n	8003724 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8297 	beq.w	8003c48 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
      }
      return;
 8003722:	e291      	b.n	8003c48 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8117 	beq.w	800395c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800372e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800373a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800373e:	4b85      	ldr	r3, [pc, #532]	; (8003954 <HAL_UART_IRQHandler+0x298>)
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 810a 	beq.w	800395c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d011      	beq.n	8003778 <HAL_UART_IRQHandler+0xbc>
 8003754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2201      	movs	r2, #1
 8003766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376e:	f043 0201 	orr.w	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d011      	beq.n	80037a8 <HAL_UART_IRQHandler+0xec>
 8003784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00b      	beq.n	80037a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2202      	movs	r2, #2
 8003796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d011      	beq.n	80037d8 <HAL_UART_IRQHandler+0x11c>
 80037b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2204      	movs	r2, #4
 80037c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ce:	f043 0202 	orr.w	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d017      	beq.n	8003814 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2208      	movs	r2, #8
 8003802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800380a:	f043 0208 	orr.w	r2, r3, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381c:	2b00      	cmp	r3, #0
 800381e:	d012      	beq.n	8003846 <HAL_UART_IRQHandler+0x18a>
 8003820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003824:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00c      	beq.n	8003846 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003834:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 81fd 	beq.w	8003c4c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800385e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003880:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d005      	beq.n	800389e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003896:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800389a:	2b00      	cmp	r3, #0
 800389c:	d04f      	beq.n	800393e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fe01 	bl	80044a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b40      	cmp	r3, #64	; 0x40
 80038b0:	d141      	bne.n	8003936 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3308      	adds	r3, #8
 80038b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3308      	adds	r3, #8
 80038da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1d9      	bne.n	80038b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003902:	2b00      	cmp	r3, #0
 8003904:	d013      	beq.n	800392e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390a:	4a13      	ldr	r2, [pc, #76]	; (8003958 <HAL_UART_IRQHandler+0x29c>)
 800390c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fbef 	bl	80010f6 <HAL_DMA_Abort_IT>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d017      	beq.n	800394e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003928:	4610      	mov	r0, r2
 800392a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392c:	e00f      	b.n	800394e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9a0 	bl	8003c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	e00b      	b.n	800394e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f99c 	bl	8003c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393c:	e007      	b.n	800394e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f998 	bl	8003c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800394c:	e17e      	b.n	8003c4c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394e:	bf00      	nop
    return;
 8003950:	e17c      	b.n	8003c4c <HAL_UART_IRQHandler+0x590>
 8003952:	bf00      	nop
 8003954:	04000120 	.word	0x04000120
 8003958:	0800456f 	.word	0x0800456f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003960:	2b01      	cmp	r3, #1
 8003962:	f040 814c 	bne.w	8003bfe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8145 	beq.w	8003bfe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 813e 	beq.w	8003bfe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2210      	movs	r2, #16
 8003988:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	f040 80b6 	bne.w	8003b06 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8150 	beq.w	8003c50 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80039b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039ba:	429a      	cmp	r2, r3
 80039bc:	f080 8148 	bcs.w	8003c50 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d4:	f000 8086 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1da      	bne.n	80039d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3308      	adds	r3, #8
 8003a28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3308      	adds	r3, #8
 8003a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e1      	bne.n	8003a22 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3308      	adds	r3, #8
 8003a64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e3      	bne.n	8003a5e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab4:	f023 0310 	bic.w	r3, r3, #16
 8003ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ac6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ac8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003acc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e4      	bne.n	8003aa4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fd fa99 	bl	8001016 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8c2 	bl	8003c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b04:	e0a4      	b.n	8003c50 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8096 	beq.w	8003c54 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8091 	beq.w	8003c54 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b54:	647b      	str	r3, [r7, #68]	; 0x44
 8003b56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e4      	bne.n	8003b32 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	623b      	str	r3, [r7, #32]
   return(result);
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3308      	adds	r3, #8
 8003b88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b8c:	633a      	str	r2, [r7, #48]	; 0x30
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e3      	bne.n	8003b68 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f023 0310 	bic.w	r3, r3, #16
 8003bc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	69b9      	ldr	r1, [r7, #24]
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	617b      	str	r3, [r7, #20]
   return(result);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e4      	bne.n	8003bb4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f846 	bl	8003c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bfc:	e02a      	b.n	8003c54 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00e      	beq.n	8003c28 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01c      	beq.n	8003c58 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
    }
    return;
 8003c26:	e017      	b.n	8003c58 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d012      	beq.n	8003c5a <HAL_UART_IRQHandler+0x59e>
 8003c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00c      	beq.n	8003c5a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fd65 	bl	8004710 <UART_EndTransmit_IT>
    return;
 8003c46:	e008      	b.n	8003c5a <HAL_UART_IRQHandler+0x59e>
      return;
 8003c48:	bf00      	nop
 8003c4a:	e006      	b.n	8003c5a <HAL_UART_IRQHandler+0x59e>
    return;
 8003c4c:	bf00      	nop
 8003c4e:	e004      	b.n	8003c5a <HAL_UART_IRQHandler+0x59e>
      return;
 8003c50:	bf00      	nop
 8003c52:	e002      	b.n	8003c5a <HAL_UART_IRQHandler+0x59e>
      return;
 8003c54:	bf00      	nop
 8003c56:	e000      	b.n	8003c5a <HAL_UART_IRQHandler+0x59e>
    return;
 8003c58:	bf00      	nop
  }

}
 8003c5a:	37e8      	adds	r7, #232	; 0xe8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4ba6      	ldr	r3, [pc, #664]	; (8003f64 <UART_SetConfig+0x2c4>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	6979      	ldr	r1, [r7, #20]
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a94      	ldr	r2, [pc, #592]	; (8003f68 <UART_SetConfig+0x2c8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d120      	bne.n	8003d5e <UART_SetConfig+0xbe>
 8003d1c:	4b93      	ldr	r3, [pc, #588]	; (8003f6c <UART_SetConfig+0x2cc>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d816      	bhi.n	8003d58 <UART_SetConfig+0xb8>
 8003d2a:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <UART_SetConfig+0x90>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d4d 	.word	0x08003d4d
 8003d38:	08003d47 	.word	0x08003d47
 8003d3c:	08003d53 	.word	0x08003d53
 8003d40:	2301      	movs	r3, #1
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e150      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003d46:	2302      	movs	r3, #2
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e14d      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e14a      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003d52:	2308      	movs	r3, #8
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e147      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e144      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a83      	ldr	r2, [pc, #524]	; (8003f70 <UART_SetConfig+0x2d0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d132      	bne.n	8003dce <UART_SetConfig+0x12e>
 8003d68:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <UART_SetConfig+0x2cc>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d828      	bhi.n	8003dc8 <UART_SetConfig+0x128>
 8003d76:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <UART_SetConfig+0xdc>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003db1 	.word	0x08003db1
 8003d80:	08003dc9 	.word	0x08003dc9
 8003d84:	08003dc9 	.word	0x08003dc9
 8003d88:	08003dc9 	.word	0x08003dc9
 8003d8c:	08003dbd 	.word	0x08003dbd
 8003d90:	08003dc9 	.word	0x08003dc9
 8003d94:	08003dc9 	.word	0x08003dc9
 8003d98:	08003dc9 	.word	0x08003dc9
 8003d9c:	08003db7 	.word	0x08003db7
 8003da0:	08003dc9 	.word	0x08003dc9
 8003da4:	08003dc9 	.word	0x08003dc9
 8003da8:	08003dc9 	.word	0x08003dc9
 8003dac:	08003dc3 	.word	0x08003dc3
 8003db0:	2300      	movs	r3, #0
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e118      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003db6:	2302      	movs	r3, #2
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e115      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e112      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e10f      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e10c      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a68      	ldr	r2, [pc, #416]	; (8003f74 <UART_SetConfig+0x2d4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d120      	bne.n	8003e1a <UART_SetConfig+0x17a>
 8003dd8:	4b64      	ldr	r3, [pc, #400]	; (8003f6c <UART_SetConfig+0x2cc>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003de2:	2b30      	cmp	r3, #48	; 0x30
 8003de4:	d013      	beq.n	8003e0e <UART_SetConfig+0x16e>
 8003de6:	2b30      	cmp	r3, #48	; 0x30
 8003de8:	d814      	bhi.n	8003e14 <UART_SetConfig+0x174>
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d009      	beq.n	8003e02 <UART_SetConfig+0x162>
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d810      	bhi.n	8003e14 <UART_SetConfig+0x174>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <UART_SetConfig+0x15c>
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d006      	beq.n	8003e08 <UART_SetConfig+0x168>
 8003dfa:	e00b      	b.n	8003e14 <UART_SetConfig+0x174>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e0f2      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003e02:	2302      	movs	r3, #2
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e0ef      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e0ec      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003e0e:	2308      	movs	r3, #8
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e0e9      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003e14:	2310      	movs	r3, #16
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e0e6      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a56      	ldr	r2, [pc, #344]	; (8003f78 <UART_SetConfig+0x2d8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d120      	bne.n	8003e66 <UART_SetConfig+0x1c6>
 8003e24:	4b51      	ldr	r3, [pc, #324]	; (8003f6c <UART_SetConfig+0x2cc>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e30:	d013      	beq.n	8003e5a <UART_SetConfig+0x1ba>
 8003e32:	2bc0      	cmp	r3, #192	; 0xc0
 8003e34:	d814      	bhi.n	8003e60 <UART_SetConfig+0x1c0>
 8003e36:	2b80      	cmp	r3, #128	; 0x80
 8003e38:	d009      	beq.n	8003e4e <UART_SetConfig+0x1ae>
 8003e3a:	2b80      	cmp	r3, #128	; 0x80
 8003e3c:	d810      	bhi.n	8003e60 <UART_SetConfig+0x1c0>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <UART_SetConfig+0x1a8>
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d006      	beq.n	8003e54 <UART_SetConfig+0x1b4>
 8003e46:	e00b      	b.n	8003e60 <UART_SetConfig+0x1c0>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e0cc      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e0c9      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003e54:	2304      	movs	r3, #4
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e0c6      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e0c3      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003e60:	2310      	movs	r3, #16
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e0c0      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a44      	ldr	r2, [pc, #272]	; (8003f7c <UART_SetConfig+0x2dc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d125      	bne.n	8003ebc <UART_SetConfig+0x21c>
 8003e70:	4b3e      	ldr	r3, [pc, #248]	; (8003f6c <UART_SetConfig+0x2cc>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e7e:	d017      	beq.n	8003eb0 <UART_SetConfig+0x210>
 8003e80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e84:	d817      	bhi.n	8003eb6 <UART_SetConfig+0x216>
 8003e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8a:	d00b      	beq.n	8003ea4 <UART_SetConfig+0x204>
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e90:	d811      	bhi.n	8003eb6 <UART_SetConfig+0x216>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <UART_SetConfig+0x1fe>
 8003e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9a:	d006      	beq.n	8003eaa <UART_SetConfig+0x20a>
 8003e9c:	e00b      	b.n	8003eb6 <UART_SetConfig+0x216>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	77fb      	strb	r3, [r7, #31]
 8003ea2:	e0a1      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e09e      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003eaa:	2304      	movs	r3, #4
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e09b      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e098      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e095      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2f      	ldr	r2, [pc, #188]	; (8003f80 <UART_SetConfig+0x2e0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d125      	bne.n	8003f12 <UART_SetConfig+0x272>
 8003ec6:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <UART_SetConfig+0x2cc>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ed0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ed4:	d017      	beq.n	8003f06 <UART_SetConfig+0x266>
 8003ed6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eda:	d817      	bhi.n	8003f0c <UART_SetConfig+0x26c>
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee0:	d00b      	beq.n	8003efa <UART_SetConfig+0x25a>
 8003ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee6:	d811      	bhi.n	8003f0c <UART_SetConfig+0x26c>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <UART_SetConfig+0x254>
 8003eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef0:	d006      	beq.n	8003f00 <UART_SetConfig+0x260>
 8003ef2:	e00b      	b.n	8003f0c <UART_SetConfig+0x26c>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e076      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003efa:	2302      	movs	r3, #2
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e073      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003f00:	2304      	movs	r3, #4
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e070      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003f06:	2308      	movs	r3, #8
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e06d      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e06a      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <UART_SetConfig+0x2e4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d138      	bne.n	8003f8e <UART_SetConfig+0x2ee>
 8003f1c:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <UART_SetConfig+0x2cc>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f2a:	d017      	beq.n	8003f5c <UART_SetConfig+0x2bc>
 8003f2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f30:	d82a      	bhi.n	8003f88 <UART_SetConfig+0x2e8>
 8003f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f36:	d00b      	beq.n	8003f50 <UART_SetConfig+0x2b0>
 8003f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3c:	d824      	bhi.n	8003f88 <UART_SetConfig+0x2e8>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <UART_SetConfig+0x2aa>
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f46:	d006      	beq.n	8003f56 <UART_SetConfig+0x2b6>
 8003f48:	e01e      	b.n	8003f88 <UART_SetConfig+0x2e8>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	77fb      	strb	r3, [r7, #31]
 8003f4e:	e04b      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003f50:	2302      	movs	r3, #2
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e048      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003f56:	2304      	movs	r3, #4
 8003f58:	77fb      	strb	r3, [r7, #31]
 8003f5a:	e045      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e042      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003f62:	bf00      	nop
 8003f64:	efff69f3 	.word	0xefff69f3
 8003f68:	40011000 	.word	0x40011000
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40004400 	.word	0x40004400
 8003f74:	40004800 	.word	0x40004800
 8003f78:	40004c00 	.word	0x40004c00
 8003f7c:	40005000 	.word	0x40005000
 8003f80:	40011400 	.word	0x40011400
 8003f84:	40007800 	.word	0x40007800
 8003f88:	2310      	movs	r3, #16
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e02c      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a72      	ldr	r2, [pc, #456]	; (800415c <UART_SetConfig+0x4bc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d125      	bne.n	8003fe4 <UART_SetConfig+0x344>
 8003f98:	4b71      	ldr	r3, [pc, #452]	; (8004160 <UART_SetConfig+0x4c0>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fa2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fa6:	d017      	beq.n	8003fd8 <UART_SetConfig+0x338>
 8003fa8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fac:	d817      	bhi.n	8003fde <UART_SetConfig+0x33e>
 8003fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb2:	d00b      	beq.n	8003fcc <UART_SetConfig+0x32c>
 8003fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb8:	d811      	bhi.n	8003fde <UART_SetConfig+0x33e>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <UART_SetConfig+0x326>
 8003fbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fc2:	d006      	beq.n	8003fd2 <UART_SetConfig+0x332>
 8003fc4:	e00b      	b.n	8003fde <UART_SetConfig+0x33e>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e00d      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e00a      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e007      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003fd8:	2308      	movs	r3, #8
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e004      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003fde:	2310      	movs	r3, #16
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e001      	b.n	8003fe8 <UART_SetConfig+0x348>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff0:	d15b      	bne.n	80040aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003ff2:	7ffb      	ldrb	r3, [r7, #31]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d828      	bhi.n	800404a <UART_SetConfig+0x3aa>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <UART_SetConfig+0x360>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004025 	.word	0x08004025
 8004004:	0800402d 	.word	0x0800402d
 8004008:	08004035 	.word	0x08004035
 800400c:	0800404b 	.word	0x0800404b
 8004010:	0800403b 	.word	0x0800403b
 8004014:	0800404b 	.word	0x0800404b
 8004018:	0800404b 	.word	0x0800404b
 800401c:	0800404b 	.word	0x0800404b
 8004020:	08004043 	.word	0x08004043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7fd fec2 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8004028:	61b8      	str	r0, [r7, #24]
        break;
 800402a:	e013      	b.n	8004054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800402c:	f7fd fed2 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 8004030:	61b8      	str	r0, [r7, #24]
        break;
 8004032:	e00f      	b.n	8004054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004034:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <UART_SetConfig+0x4c4>)
 8004036:	61bb      	str	r3, [r7, #24]
        break;
 8004038:	e00c      	b.n	8004054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403a:	f7fd fde5 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 800403e:	61b8      	str	r0, [r7, #24]
        break;
 8004040:	e008      	b.n	8004054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	61bb      	str	r3, [r7, #24]
        break;
 8004048:	e004      	b.n	8004054 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	77bb      	strb	r3, [r7, #30]
        break;
 8004052:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d074      	beq.n	8004144 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	005a      	lsls	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	441a      	add	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b0f      	cmp	r3, #15
 8004074:	d916      	bls.n	80040a4 <UART_SetConfig+0x404>
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407c:	d212      	bcs.n	80040a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	b29b      	uxth	r3, r3
 8004082:	f023 030f 	bic.w	r3, r3, #15
 8004086:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	b29b      	uxth	r3, r3
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	b29a      	uxth	r2, r3
 8004094:	89fb      	ldrh	r3, [r7, #14]
 8004096:	4313      	orrs	r3, r2
 8004098:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	89fa      	ldrh	r2, [r7, #14]
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	e04f      	b.n	8004144 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	77bb      	strb	r3, [r7, #30]
 80040a8:	e04c      	b.n	8004144 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040aa:	7ffb      	ldrb	r3, [r7, #31]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d828      	bhi.n	8004102 <UART_SetConfig+0x462>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <UART_SetConfig+0x418>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	080040e5 	.word	0x080040e5
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	08004103 	.word	0x08004103
 80040c8:	080040f3 	.word	0x080040f3
 80040cc:	08004103 	.word	0x08004103
 80040d0:	08004103 	.word	0x08004103
 80040d4:	08004103 	.word	0x08004103
 80040d8:	080040fb 	.word	0x080040fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040dc:	f7fd fe66 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 80040e0:	61b8      	str	r0, [r7, #24]
        break;
 80040e2:	e013      	b.n	800410c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e4:	f7fd fe76 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 80040e8:	61b8      	str	r0, [r7, #24]
        break;
 80040ea:	e00f      	b.n	800410c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ec:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <UART_SetConfig+0x4c4>)
 80040ee:	61bb      	str	r3, [r7, #24]
        break;
 80040f0:	e00c      	b.n	800410c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f2:	f7fd fd89 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 80040f6:	61b8      	str	r0, [r7, #24]
        break;
 80040f8:	e008      	b.n	800410c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fe:	61bb      	str	r3, [r7, #24]
        break;
 8004100:	e004      	b.n	800410c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	77bb      	strb	r3, [r7, #30]
        break;
 800410a:	bf00      	nop
    }

    if (pclk != 0U)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d018      	beq.n	8004144 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	085a      	lsrs	r2, r3, #1
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	441a      	add	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	fbb2 f3f3 	udiv	r3, r2, r3
 8004124:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b0f      	cmp	r3, #15
 800412a:	d909      	bls.n	8004140 <UART_SetConfig+0x4a0>
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004132:	d205      	bcs.n	8004140 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	b29a      	uxth	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	e001      	b.n	8004144 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004150:	7fbb      	ldrb	r3, [r7, #30]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40007c00 	.word	0x40007c00
 8004160:	40023800 	.word	0x40023800
 8004164:	00f42400 	.word	0x00f42400

08004168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01a      	beq.n	800427e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004266:	d10a      	bne.n	800427e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
  }
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042bc:	f7fc fd64 	bl	8000d88 <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d10e      	bne.n	80042ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f81b 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e011      	b.n	8004312 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b09c      	sub	sp, #112	; 0x70
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432a:	e0a7      	b.n	800447c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004332:	f000 80a3 	beq.w	800447c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fc fd27 	bl	8000d88 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <UART_WaitOnFlagUntilTimeout+0x32>
 8004346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004348:	2b00      	cmp	r3, #0
 800434a:	d13f      	bne.n	80043cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004360:	667b      	str	r3, [r7, #100]	; 0x64
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e6      	bne.n	800434c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3308      	adds	r3, #8
 8004384:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	663b      	str	r3, [r7, #96]	; 0x60
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3308      	adds	r3, #8
 800439c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800439e:	64ba      	str	r2, [r7, #72]	; 0x48
 80043a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e5      	bne.n	800437e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e068      	b.n	800449e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d050      	beq.n	800447c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e8:	d148      	bne.n	800447c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004408:	66fb      	str	r3, [r7, #108]	; 0x6c
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
 8004414:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e6      	bne.n	80043f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	613b      	str	r3, [r7, #16]
   return(result);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	66bb      	str	r3, [r7, #104]	; 0x68
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3308      	adds	r3, #8
 8004444:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004446:	623a      	str	r2, [r7, #32]
 8004448:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	69f9      	ldr	r1, [r7, #28]
 800444c:	6a3a      	ldr	r2, [r7, #32]
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	61bb      	str	r3, [r7, #24]
   return(result);
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e5      	bne.n	8004426 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e010      	b.n	800449e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	429a      	cmp	r2, r3
 8004498:	f43f af48 	beq.w	800432c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3770      	adds	r7, #112	; 0x70
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b095      	sub	sp, #84	; 0x54
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044cc:	643b      	str	r3, [r7, #64]	; 0x40
 80044ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e6      	bne.n	80044ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3308      	adds	r3, #8
 80044e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3308      	adds	r3, #8
 80044fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004500:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e5      	bne.n	80044e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004518:	2b01      	cmp	r3, #1
 800451a:	d118      	bne.n	800454e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	60bb      	str	r3, [r7, #8]
   return(result);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	647b      	str	r3, [r7, #68]	; 0x44
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6979      	ldr	r1, [r7, #20]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	613b      	str	r3, [r7, #16]
   return(result);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e6      	bne.n	800451c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004562:	bf00      	nop
 8004564:	3754      	adds	r7, #84	; 0x54
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff fb71 	bl	8003c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800459a:	b480      	push	{r7}
 800459c:	b08f      	sub	sp, #60	; 0x3c
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a6:	2b21      	cmp	r3, #33	; 0x21
 80045a8:	d14c      	bne.n	8004644 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d132      	bne.n	800461c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ca:	637b      	str	r3, [r7, #52]	; 0x34
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e6      	bne.n	80045b6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045fc:	633b      	str	r3, [r7, #48]	; 0x30
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460a:	6979      	ldr	r1, [r7, #20]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	613b      	str	r3, [r7, #16]
   return(result);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e6      	bne.n	80045e8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800461a:	e013      	b.n	8004644 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004644:	bf00      	nop
 8004646:	373c      	adds	r7, #60	; 0x3c
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004650:	b480      	push	{r7}
 8004652:	b091      	sub	sp, #68	; 0x44
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465c:	2b21      	cmp	r3, #33	; 0x21
 800465e:	d151      	bne.n	8004704 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d132      	bne.n	80046d2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	623b      	str	r3, [r7, #32]
   return(result);
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004680:	63bb      	str	r3, [r7, #56]	; 0x38
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	633b      	str	r3, [r7, #48]	; 0x30
 800468c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e6      	bne.n	800466c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	69b9      	ldr	r1, [r7, #24]
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e6      	bne.n	800469e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80046d0:	e018      	b.n	8004704 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ec:	1c9a      	adds	r2, r3, #2
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004704:	bf00      	nop
 8004706:	3744      	adds	r7, #68	; 0x44
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	60bb      	str	r3, [r7, #8]
   return(result);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6979      	ldr	r1, [r7, #20]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	613b      	str	r3, [r7, #16]
   return(result);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e6      	bne.n	8004718 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff fa82 	bl	8003c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800475c:	bf00      	nop
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <__errno>:
 8004764:	4b01      	ldr	r3, [pc, #4]	; (800476c <__errno+0x8>)
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	2000000c 	.word	0x2000000c

08004770 <__libc_init_array>:
 8004770:	b570      	push	{r4, r5, r6, lr}
 8004772:	4d0d      	ldr	r5, [pc, #52]	; (80047a8 <__libc_init_array+0x38>)
 8004774:	4c0d      	ldr	r4, [pc, #52]	; (80047ac <__libc_init_array+0x3c>)
 8004776:	1b64      	subs	r4, r4, r5
 8004778:	10a4      	asrs	r4, r4, #2
 800477a:	2600      	movs	r6, #0
 800477c:	42a6      	cmp	r6, r4
 800477e:	d109      	bne.n	8004794 <__libc_init_array+0x24>
 8004780:	4d0b      	ldr	r5, [pc, #44]	; (80047b0 <__libc_init_array+0x40>)
 8004782:	4c0c      	ldr	r4, [pc, #48]	; (80047b4 <__libc_init_array+0x44>)
 8004784:	f000 fc8e 	bl	80050a4 <_init>
 8004788:	1b64      	subs	r4, r4, r5
 800478a:	10a4      	asrs	r4, r4, #2
 800478c:	2600      	movs	r6, #0
 800478e:	42a6      	cmp	r6, r4
 8004790:	d105      	bne.n	800479e <__libc_init_array+0x2e>
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	f855 3b04 	ldr.w	r3, [r5], #4
 8004798:	4798      	blx	r3
 800479a:	3601      	adds	r6, #1
 800479c:	e7ee      	b.n	800477c <__libc_init_array+0xc>
 800479e:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a2:	4798      	blx	r3
 80047a4:	3601      	adds	r6, #1
 80047a6:	e7f2      	b.n	800478e <__libc_init_array+0x1e>
 80047a8:	08005118 	.word	0x08005118
 80047ac:	08005118 	.word	0x08005118
 80047b0:	08005118 	.word	0x08005118
 80047b4:	0800511c 	.word	0x0800511c

080047b8 <memset>:
 80047b8:	4402      	add	r2, r0
 80047ba:	4603      	mov	r3, r0
 80047bc:	4293      	cmp	r3, r2
 80047be:	d100      	bne.n	80047c2 <memset+0xa>
 80047c0:	4770      	bx	lr
 80047c2:	f803 1b01 	strb.w	r1, [r3], #1
 80047c6:	e7f9      	b.n	80047bc <memset+0x4>

080047c8 <siprintf>:
 80047c8:	b40e      	push	{r1, r2, r3}
 80047ca:	b500      	push	{lr}
 80047cc:	b09c      	sub	sp, #112	; 0x70
 80047ce:	ab1d      	add	r3, sp, #116	; 0x74
 80047d0:	9002      	str	r0, [sp, #8]
 80047d2:	9006      	str	r0, [sp, #24]
 80047d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047d8:	4809      	ldr	r0, [pc, #36]	; (8004800 <siprintf+0x38>)
 80047da:	9107      	str	r1, [sp, #28]
 80047dc:	9104      	str	r1, [sp, #16]
 80047de:	4909      	ldr	r1, [pc, #36]	; (8004804 <siprintf+0x3c>)
 80047e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80047e4:	9105      	str	r1, [sp, #20]
 80047e6:	6800      	ldr	r0, [r0, #0]
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	a902      	add	r1, sp, #8
 80047ec:	f000 f868 	bl	80048c0 <_svfiprintf_r>
 80047f0:	9b02      	ldr	r3, [sp, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	b01c      	add	sp, #112	; 0x70
 80047f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047fc:	b003      	add	sp, #12
 80047fe:	4770      	bx	lr
 8004800:	2000000c 	.word	0x2000000c
 8004804:	ffff0208 	.word	0xffff0208

08004808 <__ssputs_r>:
 8004808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480c:	688e      	ldr	r6, [r1, #8]
 800480e:	429e      	cmp	r6, r3
 8004810:	4682      	mov	sl, r0
 8004812:	460c      	mov	r4, r1
 8004814:	4690      	mov	r8, r2
 8004816:	461f      	mov	r7, r3
 8004818:	d838      	bhi.n	800488c <__ssputs_r+0x84>
 800481a:	898a      	ldrh	r2, [r1, #12]
 800481c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004820:	d032      	beq.n	8004888 <__ssputs_r+0x80>
 8004822:	6825      	ldr	r5, [r4, #0]
 8004824:	6909      	ldr	r1, [r1, #16]
 8004826:	eba5 0901 	sub.w	r9, r5, r1
 800482a:	6965      	ldr	r5, [r4, #20]
 800482c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004834:	3301      	adds	r3, #1
 8004836:	444b      	add	r3, r9
 8004838:	106d      	asrs	r5, r5, #1
 800483a:	429d      	cmp	r5, r3
 800483c:	bf38      	it	cc
 800483e:	461d      	movcc	r5, r3
 8004840:	0553      	lsls	r3, r2, #21
 8004842:	d531      	bpl.n	80048a8 <__ssputs_r+0xa0>
 8004844:	4629      	mov	r1, r5
 8004846:	f000 fb63 	bl	8004f10 <_malloc_r>
 800484a:	4606      	mov	r6, r0
 800484c:	b950      	cbnz	r0, 8004864 <__ssputs_r+0x5c>
 800484e:	230c      	movs	r3, #12
 8004850:	f8ca 3000 	str.w	r3, [sl]
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800485a:	81a3      	strh	r3, [r4, #12]
 800485c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004864:	6921      	ldr	r1, [r4, #16]
 8004866:	464a      	mov	r2, r9
 8004868:	f000 fabe 	bl	8004de8 <memcpy>
 800486c:	89a3      	ldrh	r3, [r4, #12]
 800486e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004876:	81a3      	strh	r3, [r4, #12]
 8004878:	6126      	str	r6, [r4, #16]
 800487a:	6165      	str	r5, [r4, #20]
 800487c:	444e      	add	r6, r9
 800487e:	eba5 0509 	sub.w	r5, r5, r9
 8004882:	6026      	str	r6, [r4, #0]
 8004884:	60a5      	str	r5, [r4, #8]
 8004886:	463e      	mov	r6, r7
 8004888:	42be      	cmp	r6, r7
 800488a:	d900      	bls.n	800488e <__ssputs_r+0x86>
 800488c:	463e      	mov	r6, r7
 800488e:	6820      	ldr	r0, [r4, #0]
 8004890:	4632      	mov	r2, r6
 8004892:	4641      	mov	r1, r8
 8004894:	f000 fab6 	bl	8004e04 <memmove>
 8004898:	68a3      	ldr	r3, [r4, #8]
 800489a:	1b9b      	subs	r3, r3, r6
 800489c:	60a3      	str	r3, [r4, #8]
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	4433      	add	r3, r6
 80048a2:	6023      	str	r3, [r4, #0]
 80048a4:	2000      	movs	r0, #0
 80048a6:	e7db      	b.n	8004860 <__ssputs_r+0x58>
 80048a8:	462a      	mov	r2, r5
 80048aa:	f000 fba5 	bl	8004ff8 <_realloc_r>
 80048ae:	4606      	mov	r6, r0
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d1e1      	bne.n	8004878 <__ssputs_r+0x70>
 80048b4:	6921      	ldr	r1, [r4, #16]
 80048b6:	4650      	mov	r0, sl
 80048b8:	f000 fabe 	bl	8004e38 <_free_r>
 80048bc:	e7c7      	b.n	800484e <__ssputs_r+0x46>
	...

080048c0 <_svfiprintf_r>:
 80048c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c4:	4698      	mov	r8, r3
 80048c6:	898b      	ldrh	r3, [r1, #12]
 80048c8:	061b      	lsls	r3, r3, #24
 80048ca:	b09d      	sub	sp, #116	; 0x74
 80048cc:	4607      	mov	r7, r0
 80048ce:	460d      	mov	r5, r1
 80048d0:	4614      	mov	r4, r2
 80048d2:	d50e      	bpl.n	80048f2 <_svfiprintf_r+0x32>
 80048d4:	690b      	ldr	r3, [r1, #16]
 80048d6:	b963      	cbnz	r3, 80048f2 <_svfiprintf_r+0x32>
 80048d8:	2140      	movs	r1, #64	; 0x40
 80048da:	f000 fb19 	bl	8004f10 <_malloc_r>
 80048de:	6028      	str	r0, [r5, #0]
 80048e0:	6128      	str	r0, [r5, #16]
 80048e2:	b920      	cbnz	r0, 80048ee <_svfiprintf_r+0x2e>
 80048e4:	230c      	movs	r3, #12
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ec:	e0d1      	b.n	8004a92 <_svfiprintf_r+0x1d2>
 80048ee:	2340      	movs	r3, #64	; 0x40
 80048f0:	616b      	str	r3, [r5, #20]
 80048f2:	2300      	movs	r3, #0
 80048f4:	9309      	str	r3, [sp, #36]	; 0x24
 80048f6:	2320      	movs	r3, #32
 80048f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004900:	2330      	movs	r3, #48	; 0x30
 8004902:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004aac <_svfiprintf_r+0x1ec>
 8004906:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800490a:	f04f 0901 	mov.w	r9, #1
 800490e:	4623      	mov	r3, r4
 8004910:	469a      	mov	sl, r3
 8004912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004916:	b10a      	cbz	r2, 800491c <_svfiprintf_r+0x5c>
 8004918:	2a25      	cmp	r2, #37	; 0x25
 800491a:	d1f9      	bne.n	8004910 <_svfiprintf_r+0x50>
 800491c:	ebba 0b04 	subs.w	fp, sl, r4
 8004920:	d00b      	beq.n	800493a <_svfiprintf_r+0x7a>
 8004922:	465b      	mov	r3, fp
 8004924:	4622      	mov	r2, r4
 8004926:	4629      	mov	r1, r5
 8004928:	4638      	mov	r0, r7
 800492a:	f7ff ff6d 	bl	8004808 <__ssputs_r>
 800492e:	3001      	adds	r0, #1
 8004930:	f000 80aa 	beq.w	8004a88 <_svfiprintf_r+0x1c8>
 8004934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004936:	445a      	add	r2, fp
 8004938:	9209      	str	r2, [sp, #36]	; 0x24
 800493a:	f89a 3000 	ldrb.w	r3, [sl]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80a2 	beq.w	8004a88 <_svfiprintf_r+0x1c8>
 8004944:	2300      	movs	r3, #0
 8004946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800494a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800494e:	f10a 0a01 	add.w	sl, sl, #1
 8004952:	9304      	str	r3, [sp, #16]
 8004954:	9307      	str	r3, [sp, #28]
 8004956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800495a:	931a      	str	r3, [sp, #104]	; 0x68
 800495c:	4654      	mov	r4, sl
 800495e:	2205      	movs	r2, #5
 8004960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004964:	4851      	ldr	r0, [pc, #324]	; (8004aac <_svfiprintf_r+0x1ec>)
 8004966:	f7fb fc53 	bl	8000210 <memchr>
 800496a:	9a04      	ldr	r2, [sp, #16]
 800496c:	b9d8      	cbnz	r0, 80049a6 <_svfiprintf_r+0xe6>
 800496e:	06d0      	lsls	r0, r2, #27
 8004970:	bf44      	itt	mi
 8004972:	2320      	movmi	r3, #32
 8004974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004978:	0711      	lsls	r1, r2, #28
 800497a:	bf44      	itt	mi
 800497c:	232b      	movmi	r3, #43	; 0x2b
 800497e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004982:	f89a 3000 	ldrb.w	r3, [sl]
 8004986:	2b2a      	cmp	r3, #42	; 0x2a
 8004988:	d015      	beq.n	80049b6 <_svfiprintf_r+0xf6>
 800498a:	9a07      	ldr	r2, [sp, #28]
 800498c:	4654      	mov	r4, sl
 800498e:	2000      	movs	r0, #0
 8004990:	f04f 0c0a 	mov.w	ip, #10
 8004994:	4621      	mov	r1, r4
 8004996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800499a:	3b30      	subs	r3, #48	; 0x30
 800499c:	2b09      	cmp	r3, #9
 800499e:	d94e      	bls.n	8004a3e <_svfiprintf_r+0x17e>
 80049a0:	b1b0      	cbz	r0, 80049d0 <_svfiprintf_r+0x110>
 80049a2:	9207      	str	r2, [sp, #28]
 80049a4:	e014      	b.n	80049d0 <_svfiprintf_r+0x110>
 80049a6:	eba0 0308 	sub.w	r3, r0, r8
 80049aa:	fa09 f303 	lsl.w	r3, r9, r3
 80049ae:	4313      	orrs	r3, r2
 80049b0:	9304      	str	r3, [sp, #16]
 80049b2:	46a2      	mov	sl, r4
 80049b4:	e7d2      	b.n	800495c <_svfiprintf_r+0x9c>
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	1d19      	adds	r1, r3, #4
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	9103      	str	r1, [sp, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	bfbb      	ittet	lt
 80049c2:	425b      	neglt	r3, r3
 80049c4:	f042 0202 	orrlt.w	r2, r2, #2
 80049c8:	9307      	strge	r3, [sp, #28]
 80049ca:	9307      	strlt	r3, [sp, #28]
 80049cc:	bfb8      	it	lt
 80049ce:	9204      	strlt	r2, [sp, #16]
 80049d0:	7823      	ldrb	r3, [r4, #0]
 80049d2:	2b2e      	cmp	r3, #46	; 0x2e
 80049d4:	d10c      	bne.n	80049f0 <_svfiprintf_r+0x130>
 80049d6:	7863      	ldrb	r3, [r4, #1]
 80049d8:	2b2a      	cmp	r3, #42	; 0x2a
 80049da:	d135      	bne.n	8004a48 <_svfiprintf_r+0x188>
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	1d1a      	adds	r2, r3, #4
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	9203      	str	r2, [sp, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bfb8      	it	lt
 80049e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80049ec:	3402      	adds	r4, #2
 80049ee:	9305      	str	r3, [sp, #20]
 80049f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004abc <_svfiprintf_r+0x1fc>
 80049f4:	7821      	ldrb	r1, [r4, #0]
 80049f6:	2203      	movs	r2, #3
 80049f8:	4650      	mov	r0, sl
 80049fa:	f7fb fc09 	bl	8000210 <memchr>
 80049fe:	b140      	cbz	r0, 8004a12 <_svfiprintf_r+0x152>
 8004a00:	2340      	movs	r3, #64	; 0x40
 8004a02:	eba0 000a 	sub.w	r0, r0, sl
 8004a06:	fa03 f000 	lsl.w	r0, r3, r0
 8004a0a:	9b04      	ldr	r3, [sp, #16]
 8004a0c:	4303      	orrs	r3, r0
 8004a0e:	3401      	adds	r4, #1
 8004a10:	9304      	str	r3, [sp, #16]
 8004a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a16:	4826      	ldr	r0, [pc, #152]	; (8004ab0 <_svfiprintf_r+0x1f0>)
 8004a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a1c:	2206      	movs	r2, #6
 8004a1e:	f7fb fbf7 	bl	8000210 <memchr>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d038      	beq.n	8004a98 <_svfiprintf_r+0x1d8>
 8004a26:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <_svfiprintf_r+0x1f4>)
 8004a28:	bb1b      	cbnz	r3, 8004a72 <_svfiprintf_r+0x1b2>
 8004a2a:	9b03      	ldr	r3, [sp, #12]
 8004a2c:	3307      	adds	r3, #7
 8004a2e:	f023 0307 	bic.w	r3, r3, #7
 8004a32:	3308      	adds	r3, #8
 8004a34:	9303      	str	r3, [sp, #12]
 8004a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a38:	4433      	add	r3, r6
 8004a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3c:	e767      	b.n	800490e <_svfiprintf_r+0x4e>
 8004a3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a42:	460c      	mov	r4, r1
 8004a44:	2001      	movs	r0, #1
 8004a46:	e7a5      	b.n	8004994 <_svfiprintf_r+0xd4>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	3401      	adds	r4, #1
 8004a4c:	9305      	str	r3, [sp, #20]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f04f 0c0a 	mov.w	ip, #10
 8004a54:	4620      	mov	r0, r4
 8004a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a5a:	3a30      	subs	r2, #48	; 0x30
 8004a5c:	2a09      	cmp	r2, #9
 8004a5e:	d903      	bls.n	8004a68 <_svfiprintf_r+0x1a8>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0c5      	beq.n	80049f0 <_svfiprintf_r+0x130>
 8004a64:	9105      	str	r1, [sp, #20]
 8004a66:	e7c3      	b.n	80049f0 <_svfiprintf_r+0x130>
 8004a68:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e7f0      	b.n	8004a54 <_svfiprintf_r+0x194>
 8004a72:	ab03      	add	r3, sp, #12
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	462a      	mov	r2, r5
 8004a78:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <_svfiprintf_r+0x1f8>)
 8004a7a:	a904      	add	r1, sp, #16
 8004a7c:	4638      	mov	r0, r7
 8004a7e:	f3af 8000 	nop.w
 8004a82:	1c42      	adds	r2, r0, #1
 8004a84:	4606      	mov	r6, r0
 8004a86:	d1d6      	bne.n	8004a36 <_svfiprintf_r+0x176>
 8004a88:	89ab      	ldrh	r3, [r5, #12]
 8004a8a:	065b      	lsls	r3, r3, #25
 8004a8c:	f53f af2c 	bmi.w	80048e8 <_svfiprintf_r+0x28>
 8004a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a92:	b01d      	add	sp, #116	; 0x74
 8004a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a98:	ab03      	add	r3, sp, #12
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <_svfiprintf_r+0x1f8>)
 8004aa0:	a904      	add	r1, sp, #16
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	f000 f87a 	bl	8004b9c <_printf_i>
 8004aa8:	e7eb      	b.n	8004a82 <_svfiprintf_r+0x1c2>
 8004aaa:	bf00      	nop
 8004aac:	080050dc 	.word	0x080050dc
 8004ab0:	080050e6 	.word	0x080050e6
 8004ab4:	00000000 	.word	0x00000000
 8004ab8:	08004809 	.word	0x08004809
 8004abc:	080050e2 	.word	0x080050e2

08004ac0 <_printf_common>:
 8004ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	4616      	mov	r6, r2
 8004ac6:	4699      	mov	r9, r3
 8004ac8:	688a      	ldr	r2, [r1, #8]
 8004aca:	690b      	ldr	r3, [r1, #16]
 8004acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	bfb8      	it	lt
 8004ad4:	4613      	movlt	r3, r2
 8004ad6:	6033      	str	r3, [r6, #0]
 8004ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004adc:	4607      	mov	r7, r0
 8004ade:	460c      	mov	r4, r1
 8004ae0:	b10a      	cbz	r2, 8004ae6 <_printf_common+0x26>
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	6033      	str	r3, [r6, #0]
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	0699      	lsls	r1, r3, #26
 8004aea:	bf42      	ittt	mi
 8004aec:	6833      	ldrmi	r3, [r6, #0]
 8004aee:	3302      	addmi	r3, #2
 8004af0:	6033      	strmi	r3, [r6, #0]
 8004af2:	6825      	ldr	r5, [r4, #0]
 8004af4:	f015 0506 	ands.w	r5, r5, #6
 8004af8:	d106      	bne.n	8004b08 <_printf_common+0x48>
 8004afa:	f104 0a19 	add.w	sl, r4, #25
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	6832      	ldr	r2, [r6, #0]
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	42ab      	cmp	r3, r5
 8004b06:	dc26      	bgt.n	8004b56 <_printf_common+0x96>
 8004b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b0c:	1e13      	subs	r3, r2, #0
 8004b0e:	6822      	ldr	r2, [r4, #0]
 8004b10:	bf18      	it	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	0692      	lsls	r2, r2, #26
 8004b16:	d42b      	bmi.n	8004b70 <_printf_common+0xb0>
 8004b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	4638      	mov	r0, r7
 8004b20:	47c0      	blx	r8
 8004b22:	3001      	adds	r0, #1
 8004b24:	d01e      	beq.n	8004b64 <_printf_common+0xa4>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	68e5      	ldr	r5, [r4, #12]
 8004b2a:	6832      	ldr	r2, [r6, #0]
 8004b2c:	f003 0306 	and.w	r3, r3, #6
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	bf08      	it	eq
 8004b34:	1aad      	subeq	r5, r5, r2
 8004b36:	68a3      	ldr	r3, [r4, #8]
 8004b38:	6922      	ldr	r2, [r4, #16]
 8004b3a:	bf0c      	ite	eq
 8004b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b40:	2500      	movne	r5, #0
 8004b42:	4293      	cmp	r3, r2
 8004b44:	bfc4      	itt	gt
 8004b46:	1a9b      	subgt	r3, r3, r2
 8004b48:	18ed      	addgt	r5, r5, r3
 8004b4a:	2600      	movs	r6, #0
 8004b4c:	341a      	adds	r4, #26
 8004b4e:	42b5      	cmp	r5, r6
 8004b50:	d11a      	bne.n	8004b88 <_printf_common+0xc8>
 8004b52:	2000      	movs	r0, #0
 8004b54:	e008      	b.n	8004b68 <_printf_common+0xa8>
 8004b56:	2301      	movs	r3, #1
 8004b58:	4652      	mov	r2, sl
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	47c0      	blx	r8
 8004b60:	3001      	adds	r0, #1
 8004b62:	d103      	bne.n	8004b6c <_printf_common+0xac>
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6c:	3501      	adds	r5, #1
 8004b6e:	e7c6      	b.n	8004afe <_printf_common+0x3e>
 8004b70:	18e1      	adds	r1, r4, r3
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	2030      	movs	r0, #48	; 0x30
 8004b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b7a:	4422      	add	r2, r4
 8004b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b84:	3302      	adds	r3, #2
 8004b86:	e7c7      	b.n	8004b18 <_printf_common+0x58>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	4638      	mov	r0, r7
 8004b90:	47c0      	blx	r8
 8004b92:	3001      	adds	r0, #1
 8004b94:	d0e6      	beq.n	8004b64 <_printf_common+0xa4>
 8004b96:	3601      	adds	r6, #1
 8004b98:	e7d9      	b.n	8004b4e <_printf_common+0x8e>
	...

08004b9c <_printf_i>:
 8004b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	7e0f      	ldrb	r7, [r1, #24]
 8004ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ba4:	2f78      	cmp	r7, #120	; 0x78
 8004ba6:	4691      	mov	r9, r2
 8004ba8:	4680      	mov	r8, r0
 8004baa:	460c      	mov	r4, r1
 8004bac:	469a      	mov	sl, r3
 8004bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bb2:	d807      	bhi.n	8004bc4 <_printf_i+0x28>
 8004bb4:	2f62      	cmp	r7, #98	; 0x62
 8004bb6:	d80a      	bhi.n	8004bce <_printf_i+0x32>
 8004bb8:	2f00      	cmp	r7, #0
 8004bba:	f000 80d8 	beq.w	8004d6e <_printf_i+0x1d2>
 8004bbe:	2f58      	cmp	r7, #88	; 0x58
 8004bc0:	f000 80a3 	beq.w	8004d0a <_printf_i+0x16e>
 8004bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bcc:	e03a      	b.n	8004c44 <_printf_i+0xa8>
 8004bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bd2:	2b15      	cmp	r3, #21
 8004bd4:	d8f6      	bhi.n	8004bc4 <_printf_i+0x28>
 8004bd6:	a101      	add	r1, pc, #4	; (adr r1, 8004bdc <_printf_i+0x40>)
 8004bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bdc:	08004c35 	.word	0x08004c35
 8004be0:	08004c49 	.word	0x08004c49
 8004be4:	08004bc5 	.word	0x08004bc5
 8004be8:	08004bc5 	.word	0x08004bc5
 8004bec:	08004bc5 	.word	0x08004bc5
 8004bf0:	08004bc5 	.word	0x08004bc5
 8004bf4:	08004c49 	.word	0x08004c49
 8004bf8:	08004bc5 	.word	0x08004bc5
 8004bfc:	08004bc5 	.word	0x08004bc5
 8004c00:	08004bc5 	.word	0x08004bc5
 8004c04:	08004bc5 	.word	0x08004bc5
 8004c08:	08004d55 	.word	0x08004d55
 8004c0c:	08004c79 	.word	0x08004c79
 8004c10:	08004d37 	.word	0x08004d37
 8004c14:	08004bc5 	.word	0x08004bc5
 8004c18:	08004bc5 	.word	0x08004bc5
 8004c1c:	08004d77 	.word	0x08004d77
 8004c20:	08004bc5 	.word	0x08004bc5
 8004c24:	08004c79 	.word	0x08004c79
 8004c28:	08004bc5 	.word	0x08004bc5
 8004c2c:	08004bc5 	.word	0x08004bc5
 8004c30:	08004d3f 	.word	0x08004d3f
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	1d1a      	adds	r2, r3, #4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	602a      	str	r2, [r5, #0]
 8004c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0a3      	b.n	8004d90 <_printf_i+0x1f4>
 8004c48:	6820      	ldr	r0, [r4, #0]
 8004c4a:	6829      	ldr	r1, [r5, #0]
 8004c4c:	0606      	lsls	r6, r0, #24
 8004c4e:	f101 0304 	add.w	r3, r1, #4
 8004c52:	d50a      	bpl.n	8004c6a <_printf_i+0xce>
 8004c54:	680e      	ldr	r6, [r1, #0]
 8004c56:	602b      	str	r3, [r5, #0]
 8004c58:	2e00      	cmp	r6, #0
 8004c5a:	da03      	bge.n	8004c64 <_printf_i+0xc8>
 8004c5c:	232d      	movs	r3, #45	; 0x2d
 8004c5e:	4276      	negs	r6, r6
 8004c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c64:	485e      	ldr	r0, [pc, #376]	; (8004de0 <_printf_i+0x244>)
 8004c66:	230a      	movs	r3, #10
 8004c68:	e019      	b.n	8004c9e <_printf_i+0x102>
 8004c6a:	680e      	ldr	r6, [r1, #0]
 8004c6c:	602b      	str	r3, [r5, #0]
 8004c6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c72:	bf18      	it	ne
 8004c74:	b236      	sxthne	r6, r6
 8004c76:	e7ef      	b.n	8004c58 <_printf_i+0xbc>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	6820      	ldr	r0, [r4, #0]
 8004c7c:	1d19      	adds	r1, r3, #4
 8004c7e:	6029      	str	r1, [r5, #0]
 8004c80:	0601      	lsls	r1, r0, #24
 8004c82:	d501      	bpl.n	8004c88 <_printf_i+0xec>
 8004c84:	681e      	ldr	r6, [r3, #0]
 8004c86:	e002      	b.n	8004c8e <_printf_i+0xf2>
 8004c88:	0646      	lsls	r6, r0, #25
 8004c8a:	d5fb      	bpl.n	8004c84 <_printf_i+0xe8>
 8004c8c:	881e      	ldrh	r6, [r3, #0]
 8004c8e:	4854      	ldr	r0, [pc, #336]	; (8004de0 <_printf_i+0x244>)
 8004c90:	2f6f      	cmp	r7, #111	; 0x6f
 8004c92:	bf0c      	ite	eq
 8004c94:	2308      	moveq	r3, #8
 8004c96:	230a      	movne	r3, #10
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c9e:	6865      	ldr	r5, [r4, #4]
 8004ca0:	60a5      	str	r5, [r4, #8]
 8004ca2:	2d00      	cmp	r5, #0
 8004ca4:	bfa2      	ittt	ge
 8004ca6:	6821      	ldrge	r1, [r4, #0]
 8004ca8:	f021 0104 	bicge.w	r1, r1, #4
 8004cac:	6021      	strge	r1, [r4, #0]
 8004cae:	b90e      	cbnz	r6, 8004cb4 <_printf_i+0x118>
 8004cb0:	2d00      	cmp	r5, #0
 8004cb2:	d04d      	beq.n	8004d50 <_printf_i+0x1b4>
 8004cb4:	4615      	mov	r5, r2
 8004cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cba:	fb03 6711 	mls	r7, r3, r1, r6
 8004cbe:	5dc7      	ldrb	r7, [r0, r7]
 8004cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cc4:	4637      	mov	r7, r6
 8004cc6:	42bb      	cmp	r3, r7
 8004cc8:	460e      	mov	r6, r1
 8004cca:	d9f4      	bls.n	8004cb6 <_printf_i+0x11a>
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d10b      	bne.n	8004ce8 <_printf_i+0x14c>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	07de      	lsls	r6, r3, #31
 8004cd4:	d508      	bpl.n	8004ce8 <_printf_i+0x14c>
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	6861      	ldr	r1, [r4, #4]
 8004cda:	4299      	cmp	r1, r3
 8004cdc:	bfde      	ittt	le
 8004cde:	2330      	movle	r3, #48	; 0x30
 8004ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ce4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ce8:	1b52      	subs	r2, r2, r5
 8004cea:	6122      	str	r2, [r4, #16]
 8004cec:	f8cd a000 	str.w	sl, [sp]
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	aa03      	add	r2, sp, #12
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	f7ff fee2 	bl	8004ac0 <_printf_common>
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d14c      	bne.n	8004d9a <_printf_i+0x1fe>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d04:	b004      	add	sp, #16
 8004d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0a:	4835      	ldr	r0, [pc, #212]	; (8004de0 <_printf_i+0x244>)
 8004d0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d10:	6829      	ldr	r1, [r5, #0]
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d18:	6029      	str	r1, [r5, #0]
 8004d1a:	061d      	lsls	r5, r3, #24
 8004d1c:	d514      	bpl.n	8004d48 <_printf_i+0x1ac>
 8004d1e:	07df      	lsls	r7, r3, #31
 8004d20:	bf44      	itt	mi
 8004d22:	f043 0320 	orrmi.w	r3, r3, #32
 8004d26:	6023      	strmi	r3, [r4, #0]
 8004d28:	b91e      	cbnz	r6, 8004d32 <_printf_i+0x196>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	f023 0320 	bic.w	r3, r3, #32
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	2310      	movs	r3, #16
 8004d34:	e7b0      	b.n	8004c98 <_printf_i+0xfc>
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	f043 0320 	orr.w	r3, r3, #32
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	2378      	movs	r3, #120	; 0x78
 8004d40:	4828      	ldr	r0, [pc, #160]	; (8004de4 <_printf_i+0x248>)
 8004d42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d46:	e7e3      	b.n	8004d10 <_printf_i+0x174>
 8004d48:	0659      	lsls	r1, r3, #25
 8004d4a:	bf48      	it	mi
 8004d4c:	b2b6      	uxthmi	r6, r6
 8004d4e:	e7e6      	b.n	8004d1e <_printf_i+0x182>
 8004d50:	4615      	mov	r5, r2
 8004d52:	e7bb      	b.n	8004ccc <_printf_i+0x130>
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	6826      	ldr	r6, [r4, #0]
 8004d58:	6961      	ldr	r1, [r4, #20]
 8004d5a:	1d18      	adds	r0, r3, #4
 8004d5c:	6028      	str	r0, [r5, #0]
 8004d5e:	0635      	lsls	r5, r6, #24
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	d501      	bpl.n	8004d68 <_printf_i+0x1cc>
 8004d64:	6019      	str	r1, [r3, #0]
 8004d66:	e002      	b.n	8004d6e <_printf_i+0x1d2>
 8004d68:	0670      	lsls	r0, r6, #25
 8004d6a:	d5fb      	bpl.n	8004d64 <_printf_i+0x1c8>
 8004d6c:	8019      	strh	r1, [r3, #0]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6123      	str	r3, [r4, #16]
 8004d72:	4615      	mov	r5, r2
 8004d74:	e7ba      	b.n	8004cec <_printf_i+0x150>
 8004d76:	682b      	ldr	r3, [r5, #0]
 8004d78:	1d1a      	adds	r2, r3, #4
 8004d7a:	602a      	str	r2, [r5, #0]
 8004d7c:	681d      	ldr	r5, [r3, #0]
 8004d7e:	6862      	ldr	r2, [r4, #4]
 8004d80:	2100      	movs	r1, #0
 8004d82:	4628      	mov	r0, r5
 8004d84:	f7fb fa44 	bl	8000210 <memchr>
 8004d88:	b108      	cbz	r0, 8004d8e <_printf_i+0x1f2>
 8004d8a:	1b40      	subs	r0, r0, r5
 8004d8c:	6060      	str	r0, [r4, #4]
 8004d8e:	6863      	ldr	r3, [r4, #4]
 8004d90:	6123      	str	r3, [r4, #16]
 8004d92:	2300      	movs	r3, #0
 8004d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d98:	e7a8      	b.n	8004cec <_printf_i+0x150>
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	462a      	mov	r2, r5
 8004d9e:	4649      	mov	r1, r9
 8004da0:	4640      	mov	r0, r8
 8004da2:	47d0      	blx	sl
 8004da4:	3001      	adds	r0, #1
 8004da6:	d0ab      	beq.n	8004d00 <_printf_i+0x164>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	079b      	lsls	r3, r3, #30
 8004dac:	d413      	bmi.n	8004dd6 <_printf_i+0x23a>
 8004dae:	68e0      	ldr	r0, [r4, #12]
 8004db0:	9b03      	ldr	r3, [sp, #12]
 8004db2:	4298      	cmp	r0, r3
 8004db4:	bfb8      	it	lt
 8004db6:	4618      	movlt	r0, r3
 8004db8:	e7a4      	b.n	8004d04 <_printf_i+0x168>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4632      	mov	r2, r6
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	47d0      	blx	sl
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d09b      	beq.n	8004d00 <_printf_i+0x164>
 8004dc8:	3501      	adds	r5, #1
 8004dca:	68e3      	ldr	r3, [r4, #12]
 8004dcc:	9903      	ldr	r1, [sp, #12]
 8004dce:	1a5b      	subs	r3, r3, r1
 8004dd0:	42ab      	cmp	r3, r5
 8004dd2:	dcf2      	bgt.n	8004dba <_printf_i+0x21e>
 8004dd4:	e7eb      	b.n	8004dae <_printf_i+0x212>
 8004dd6:	2500      	movs	r5, #0
 8004dd8:	f104 0619 	add.w	r6, r4, #25
 8004ddc:	e7f5      	b.n	8004dca <_printf_i+0x22e>
 8004dde:	bf00      	nop
 8004de0:	080050ed 	.word	0x080050ed
 8004de4:	080050fe 	.word	0x080050fe

08004de8 <memcpy>:
 8004de8:	440a      	add	r2, r1
 8004dea:	4291      	cmp	r1, r2
 8004dec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004df0:	d100      	bne.n	8004df4 <memcpy+0xc>
 8004df2:	4770      	bx	lr
 8004df4:	b510      	push	{r4, lr}
 8004df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dfe:	4291      	cmp	r1, r2
 8004e00:	d1f9      	bne.n	8004df6 <memcpy+0xe>
 8004e02:	bd10      	pop	{r4, pc}

08004e04 <memmove>:
 8004e04:	4288      	cmp	r0, r1
 8004e06:	b510      	push	{r4, lr}
 8004e08:	eb01 0402 	add.w	r4, r1, r2
 8004e0c:	d902      	bls.n	8004e14 <memmove+0x10>
 8004e0e:	4284      	cmp	r4, r0
 8004e10:	4623      	mov	r3, r4
 8004e12:	d807      	bhi.n	8004e24 <memmove+0x20>
 8004e14:	1e43      	subs	r3, r0, #1
 8004e16:	42a1      	cmp	r1, r4
 8004e18:	d008      	beq.n	8004e2c <memmove+0x28>
 8004e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e22:	e7f8      	b.n	8004e16 <memmove+0x12>
 8004e24:	4402      	add	r2, r0
 8004e26:	4601      	mov	r1, r0
 8004e28:	428a      	cmp	r2, r1
 8004e2a:	d100      	bne.n	8004e2e <memmove+0x2a>
 8004e2c:	bd10      	pop	{r4, pc}
 8004e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e36:	e7f7      	b.n	8004e28 <memmove+0x24>

08004e38 <_free_r>:
 8004e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e3a:	2900      	cmp	r1, #0
 8004e3c:	d044      	beq.n	8004ec8 <_free_r+0x90>
 8004e3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e42:	9001      	str	r0, [sp, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f1a1 0404 	sub.w	r4, r1, #4
 8004e4a:	bfb8      	it	lt
 8004e4c:	18e4      	addlt	r4, r4, r3
 8004e4e:	f000 f913 	bl	8005078 <__malloc_lock>
 8004e52:	4a1e      	ldr	r2, [pc, #120]	; (8004ecc <_free_r+0x94>)
 8004e54:	9801      	ldr	r0, [sp, #4]
 8004e56:	6813      	ldr	r3, [r2, #0]
 8004e58:	b933      	cbnz	r3, 8004e68 <_free_r+0x30>
 8004e5a:	6063      	str	r3, [r4, #4]
 8004e5c:	6014      	str	r4, [r2, #0]
 8004e5e:	b003      	add	sp, #12
 8004e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e64:	f000 b90e 	b.w	8005084 <__malloc_unlock>
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	d908      	bls.n	8004e7e <_free_r+0x46>
 8004e6c:	6825      	ldr	r5, [r4, #0]
 8004e6e:	1961      	adds	r1, r4, r5
 8004e70:	428b      	cmp	r3, r1
 8004e72:	bf01      	itttt	eq
 8004e74:	6819      	ldreq	r1, [r3, #0]
 8004e76:	685b      	ldreq	r3, [r3, #4]
 8004e78:	1949      	addeq	r1, r1, r5
 8004e7a:	6021      	streq	r1, [r4, #0]
 8004e7c:	e7ed      	b.n	8004e5a <_free_r+0x22>
 8004e7e:	461a      	mov	r2, r3
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	b10b      	cbz	r3, 8004e88 <_free_r+0x50>
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d9fa      	bls.n	8004e7e <_free_r+0x46>
 8004e88:	6811      	ldr	r1, [r2, #0]
 8004e8a:	1855      	adds	r5, r2, r1
 8004e8c:	42a5      	cmp	r5, r4
 8004e8e:	d10b      	bne.n	8004ea8 <_free_r+0x70>
 8004e90:	6824      	ldr	r4, [r4, #0]
 8004e92:	4421      	add	r1, r4
 8004e94:	1854      	adds	r4, r2, r1
 8004e96:	42a3      	cmp	r3, r4
 8004e98:	6011      	str	r1, [r2, #0]
 8004e9a:	d1e0      	bne.n	8004e5e <_free_r+0x26>
 8004e9c:	681c      	ldr	r4, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	6053      	str	r3, [r2, #4]
 8004ea2:	4421      	add	r1, r4
 8004ea4:	6011      	str	r1, [r2, #0]
 8004ea6:	e7da      	b.n	8004e5e <_free_r+0x26>
 8004ea8:	d902      	bls.n	8004eb0 <_free_r+0x78>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	6003      	str	r3, [r0, #0]
 8004eae:	e7d6      	b.n	8004e5e <_free_r+0x26>
 8004eb0:	6825      	ldr	r5, [r4, #0]
 8004eb2:	1961      	adds	r1, r4, r5
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	bf04      	itt	eq
 8004eb8:	6819      	ldreq	r1, [r3, #0]
 8004eba:	685b      	ldreq	r3, [r3, #4]
 8004ebc:	6063      	str	r3, [r4, #4]
 8004ebe:	bf04      	itt	eq
 8004ec0:	1949      	addeq	r1, r1, r5
 8004ec2:	6021      	streq	r1, [r4, #0]
 8004ec4:	6054      	str	r4, [r2, #4]
 8004ec6:	e7ca      	b.n	8004e5e <_free_r+0x26>
 8004ec8:	b003      	add	sp, #12
 8004eca:	bd30      	pop	{r4, r5, pc}
 8004ecc:	200001b0 	.word	0x200001b0

08004ed0 <sbrk_aligned>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	4e0e      	ldr	r6, [pc, #56]	; (8004f0c <sbrk_aligned+0x3c>)
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	6831      	ldr	r1, [r6, #0]
 8004ed8:	4605      	mov	r5, r0
 8004eda:	b911      	cbnz	r1, 8004ee2 <sbrk_aligned+0x12>
 8004edc:	f000 f8bc 	bl	8005058 <_sbrk_r>
 8004ee0:	6030      	str	r0, [r6, #0]
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f000 f8b7 	bl	8005058 <_sbrk_r>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d00a      	beq.n	8004f04 <sbrk_aligned+0x34>
 8004eee:	1cc4      	adds	r4, r0, #3
 8004ef0:	f024 0403 	bic.w	r4, r4, #3
 8004ef4:	42a0      	cmp	r0, r4
 8004ef6:	d007      	beq.n	8004f08 <sbrk_aligned+0x38>
 8004ef8:	1a21      	subs	r1, r4, r0
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 f8ac 	bl	8005058 <_sbrk_r>
 8004f00:	3001      	adds	r0, #1
 8004f02:	d101      	bne.n	8004f08 <sbrk_aligned+0x38>
 8004f04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f08:	4620      	mov	r0, r4
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	200001b4 	.word	0x200001b4

08004f10 <_malloc_r>:
 8004f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f14:	1ccd      	adds	r5, r1, #3
 8004f16:	f025 0503 	bic.w	r5, r5, #3
 8004f1a:	3508      	adds	r5, #8
 8004f1c:	2d0c      	cmp	r5, #12
 8004f1e:	bf38      	it	cc
 8004f20:	250c      	movcc	r5, #12
 8004f22:	2d00      	cmp	r5, #0
 8004f24:	4607      	mov	r7, r0
 8004f26:	db01      	blt.n	8004f2c <_malloc_r+0x1c>
 8004f28:	42a9      	cmp	r1, r5
 8004f2a:	d905      	bls.n	8004f38 <_malloc_r+0x28>
 8004f2c:	230c      	movs	r3, #12
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	2600      	movs	r6, #0
 8004f32:	4630      	mov	r0, r6
 8004f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f38:	4e2e      	ldr	r6, [pc, #184]	; (8004ff4 <_malloc_r+0xe4>)
 8004f3a:	f000 f89d 	bl	8005078 <__malloc_lock>
 8004f3e:	6833      	ldr	r3, [r6, #0]
 8004f40:	461c      	mov	r4, r3
 8004f42:	bb34      	cbnz	r4, 8004f92 <_malloc_r+0x82>
 8004f44:	4629      	mov	r1, r5
 8004f46:	4638      	mov	r0, r7
 8004f48:	f7ff ffc2 	bl	8004ed0 <sbrk_aligned>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	4604      	mov	r4, r0
 8004f50:	d14d      	bne.n	8004fee <_malloc_r+0xde>
 8004f52:	6834      	ldr	r4, [r6, #0]
 8004f54:	4626      	mov	r6, r4
 8004f56:	2e00      	cmp	r6, #0
 8004f58:	d140      	bne.n	8004fdc <_malloc_r+0xcc>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4638      	mov	r0, r7
 8004f60:	eb04 0803 	add.w	r8, r4, r3
 8004f64:	f000 f878 	bl	8005058 <_sbrk_r>
 8004f68:	4580      	cmp	r8, r0
 8004f6a:	d13a      	bne.n	8004fe2 <_malloc_r+0xd2>
 8004f6c:	6821      	ldr	r1, [r4, #0]
 8004f6e:	3503      	adds	r5, #3
 8004f70:	1a6d      	subs	r5, r5, r1
 8004f72:	f025 0503 	bic.w	r5, r5, #3
 8004f76:	3508      	adds	r5, #8
 8004f78:	2d0c      	cmp	r5, #12
 8004f7a:	bf38      	it	cc
 8004f7c:	250c      	movcc	r5, #12
 8004f7e:	4629      	mov	r1, r5
 8004f80:	4638      	mov	r0, r7
 8004f82:	f7ff ffa5 	bl	8004ed0 <sbrk_aligned>
 8004f86:	3001      	adds	r0, #1
 8004f88:	d02b      	beq.n	8004fe2 <_malloc_r+0xd2>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	442b      	add	r3, r5
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	e00e      	b.n	8004fb0 <_malloc_r+0xa0>
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	1b52      	subs	r2, r2, r5
 8004f96:	d41e      	bmi.n	8004fd6 <_malloc_r+0xc6>
 8004f98:	2a0b      	cmp	r2, #11
 8004f9a:	d916      	bls.n	8004fca <_malloc_r+0xba>
 8004f9c:	1961      	adds	r1, r4, r5
 8004f9e:	42a3      	cmp	r3, r4
 8004fa0:	6025      	str	r5, [r4, #0]
 8004fa2:	bf18      	it	ne
 8004fa4:	6059      	strne	r1, [r3, #4]
 8004fa6:	6863      	ldr	r3, [r4, #4]
 8004fa8:	bf08      	it	eq
 8004faa:	6031      	streq	r1, [r6, #0]
 8004fac:	5162      	str	r2, [r4, r5]
 8004fae:	604b      	str	r3, [r1, #4]
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	f104 060b 	add.w	r6, r4, #11
 8004fb6:	f000 f865 	bl	8005084 <__malloc_unlock>
 8004fba:	f026 0607 	bic.w	r6, r6, #7
 8004fbe:	1d23      	adds	r3, r4, #4
 8004fc0:	1af2      	subs	r2, r6, r3
 8004fc2:	d0b6      	beq.n	8004f32 <_malloc_r+0x22>
 8004fc4:	1b9b      	subs	r3, r3, r6
 8004fc6:	50a3      	str	r3, [r4, r2]
 8004fc8:	e7b3      	b.n	8004f32 <_malloc_r+0x22>
 8004fca:	6862      	ldr	r2, [r4, #4]
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	bf0c      	ite	eq
 8004fd0:	6032      	streq	r2, [r6, #0]
 8004fd2:	605a      	strne	r2, [r3, #4]
 8004fd4:	e7ec      	b.n	8004fb0 <_malloc_r+0xa0>
 8004fd6:	4623      	mov	r3, r4
 8004fd8:	6864      	ldr	r4, [r4, #4]
 8004fda:	e7b2      	b.n	8004f42 <_malloc_r+0x32>
 8004fdc:	4634      	mov	r4, r6
 8004fde:	6876      	ldr	r6, [r6, #4]
 8004fe0:	e7b9      	b.n	8004f56 <_malloc_r+0x46>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	603b      	str	r3, [r7, #0]
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f000 f84c 	bl	8005084 <__malloc_unlock>
 8004fec:	e7a1      	b.n	8004f32 <_malloc_r+0x22>
 8004fee:	6025      	str	r5, [r4, #0]
 8004ff0:	e7de      	b.n	8004fb0 <_malloc_r+0xa0>
 8004ff2:	bf00      	nop
 8004ff4:	200001b0 	.word	0x200001b0

08004ff8 <_realloc_r>:
 8004ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	4614      	mov	r4, r2
 8005000:	460e      	mov	r6, r1
 8005002:	b921      	cbnz	r1, 800500e <_realloc_r+0x16>
 8005004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005008:	4611      	mov	r1, r2
 800500a:	f7ff bf81 	b.w	8004f10 <_malloc_r>
 800500e:	b92a      	cbnz	r2, 800501c <_realloc_r+0x24>
 8005010:	f7ff ff12 	bl	8004e38 <_free_r>
 8005014:	4625      	mov	r5, r4
 8005016:	4628      	mov	r0, r5
 8005018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800501c:	f000 f838 	bl	8005090 <_malloc_usable_size_r>
 8005020:	4284      	cmp	r4, r0
 8005022:	4607      	mov	r7, r0
 8005024:	d802      	bhi.n	800502c <_realloc_r+0x34>
 8005026:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800502a:	d812      	bhi.n	8005052 <_realloc_r+0x5a>
 800502c:	4621      	mov	r1, r4
 800502e:	4640      	mov	r0, r8
 8005030:	f7ff ff6e 	bl	8004f10 <_malloc_r>
 8005034:	4605      	mov	r5, r0
 8005036:	2800      	cmp	r0, #0
 8005038:	d0ed      	beq.n	8005016 <_realloc_r+0x1e>
 800503a:	42bc      	cmp	r4, r7
 800503c:	4622      	mov	r2, r4
 800503e:	4631      	mov	r1, r6
 8005040:	bf28      	it	cs
 8005042:	463a      	movcs	r2, r7
 8005044:	f7ff fed0 	bl	8004de8 <memcpy>
 8005048:	4631      	mov	r1, r6
 800504a:	4640      	mov	r0, r8
 800504c:	f7ff fef4 	bl	8004e38 <_free_r>
 8005050:	e7e1      	b.n	8005016 <_realloc_r+0x1e>
 8005052:	4635      	mov	r5, r6
 8005054:	e7df      	b.n	8005016 <_realloc_r+0x1e>
	...

08005058 <_sbrk_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4d06      	ldr	r5, [pc, #24]	; (8005074 <_sbrk_r+0x1c>)
 800505c:	2300      	movs	r3, #0
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	f7fb fdce 	bl	8000c04 <_sbrk>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_sbrk_r+0x1a>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_sbrk_r+0x1a>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	200001b8 	.word	0x200001b8

08005078 <__malloc_lock>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__malloc_lock+0x8>)
 800507a:	f000 b811 	b.w	80050a0 <__retarget_lock_acquire_recursive>
 800507e:	bf00      	nop
 8005080:	200001bc 	.word	0x200001bc

08005084 <__malloc_unlock>:
 8005084:	4801      	ldr	r0, [pc, #4]	; (800508c <__malloc_unlock+0x8>)
 8005086:	f000 b80c 	b.w	80050a2 <__retarget_lock_release_recursive>
 800508a:	bf00      	nop
 800508c:	200001bc 	.word	0x200001bc

08005090 <_malloc_usable_size_r>:
 8005090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005094:	1f18      	subs	r0, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	bfbc      	itt	lt
 800509a:	580b      	ldrlt	r3, [r1, r0]
 800509c:	18c0      	addlt	r0, r0, r3
 800509e:	4770      	bx	lr

080050a0 <__retarget_lock_acquire_recursive>:
 80050a0:	4770      	bx	lr

080050a2 <__retarget_lock_release_recursive>:
 80050a2:	4770      	bx	lr

080050a4 <_init>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr

080050b0 <_fini>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr
